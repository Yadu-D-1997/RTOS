ARM GAS  /tmp/cc3GprpR.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB232:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** 
   2:Core/Src/main.c **** /* USER CODE BEGIN Header */
   3:Core/Src/main.c **** /**
   4:Core/Src/main.c ****   ******************************************************************************
   5:Core/Src/main.c ****   * @file           : main.c
   6:Core/Src/main.c ****   * @brief          : Main program body
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "FreeRTOS.h"
  26:Core/Src/main.c **** #include "task.h"
  27:Core/Src/main.c **** #include "timers.h"
  28:Core/Src/main.c **** #include "queue.h"
  29:Core/Src/main.c **** #include "semphr.h"
  30:Core/Src/main.c **** #include "event_groups.h"
  31:Core/Src/main.c **** #include <stdio.h>
ARM GAS  /tmp/cc3GprpR.s 			page 2


  32:Core/Src/main.c **** #include <string.h>
  33:Core/Src/main.c **** /* USER CODE END Includes */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  53:Core/Src/main.c **** UART_HandleTypeDef huart2;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** TaskHandle_t Task01Handle = NULL;
  57:Core/Src/main.c **** TaskHandle_t Task02Handle = NULL;
  58:Core/Src/main.c **** TaskHandle_t Task03Handle = NULL;
  59:Core/Src/main.c **** TaskHandle_t Task04Handle = NULL;
  60:Core/Src/main.c **** TaskHandle_t Task05Handle = NULL;
  61:Core/Src/main.c **** /* USER CODE END PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  64:Core/Src/main.c **** void SystemClock_Config(void);
  65:Core/Src/main.c **** static void MX_GPIO_Init(void);
  66:Core/Src/main.c **** static void MX_DMA_Init(void);
  67:Core/Src/main.c **** static void MX_ADC1_Init(void);
  68:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  71:Core/Src/main.c **** void StartTask03(void *argument);
  72:Core/Src/main.c **** void StartTask04(void *argument);
  73:Core/Src/main.c **** void StartTask05(void *argument);
  74:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument),char * TaskName,uint16_t StackSize,int *pvPara
  75:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle);
  76:Core/Src/main.c **** void getStatusName(int a);
  77:Core/Src/main.c **** uint8_t ClrScrFlag = 0;
  78:Core/Src/main.c **** char TaskList_Buffer[50];
  79:Core/Src/main.c **** /* USER CODE END PFP */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  82:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /* USER CODE END 0 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /**
  87:Core/Src/main.c ****   * @brief  The application entry point.
  88:Core/Src/main.c ****   * @retval int
ARM GAS  /tmp/cc3GprpR.s 			page 3


  89:Core/Src/main.c ****   */
  90:Core/Src/main.c **** int main(void)
  91:Core/Src/main.c **** {
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END 1 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 100:Core/Src/main.c ****   HAL_Init();
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE END Init */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* Configure the system clock */
 107:Core/Src/main.c ****   SystemClock_Config();
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE END SysInit */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Initialize all configured peripherals */
 114:Core/Src/main.c ****   MX_GPIO_Init();
 115:Core/Src/main.c ****   MX_DMA_Init();
 116:Core/Src/main.c ****   MX_ADC1_Init();
 117:Core/Src/main.c ****   MX_USART2_UART_Init();
 118:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 119:Core/Src/main.c ****   
 120:Core/Src/main.c ****   TaskAdd(StartTask03, "Task03", 128*4, NULL, 8, &Task03Handle);
 121:Core/Src/main.c ****   TaskAdd(StartTask04, "Task04", 128*4, NULL, 6, &Task04Handle);
 122:Core/Src/main.c ****   TaskAdd(StartTask05, "Task05", 128*4, NULL, 4, &Task05Handle);
 123:Core/Src/main.c ****   //  printf("!!Setup!!\r\n");    
 124:Core/Src/main.c ****   //  if( xTaskCreate( StartTask01, "Task01", 512, NULL, 8, &Task01Handle ) != pdPASS ) {
 125:Core/Src/main.c ****   //    printf("---->Failed to add Task01\r\n");
 126:Core/Src/main.c ****   //  }    
 127:Core/Src/main.c ****   //  if( xTaskCreate( StartTask02, "Task02", 512, NULL, 6, &Task02Handle ) != pdPASS ) {
 128:Core/Src/main.c ****   //    printf("---->Failed to add Task02\r\n");
 129:Core/Src/main.c ****   //  }
 130:Core/Src/main.c ****   
 131:Core/Src/main.c ****   	
 132:Core/Src/main.c ****   /* Start the real time scheduler with preemption */
 133:Core/Src/main.c ****   printf("|** Start Scheduler **|\r\n");
 134:Core/Src/main.c ****   vTaskStartScheduler ();
 135:Core/Src/main.c ****   
 136:Core/Src/main.c ****   //if(TaskAdd(StartTask03, "Task03", 512, NULL, 8, &Task03Handle) != pdPASS)
 137:Core/Src/main.c ****   /* USER CODE END 2 */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler
 140:Core/Src/main.c ****      unless a task calls vTaskEndScheduler () */
 141:Core/Src/main.c **** 	
 142:Core/Src/main.c ****   /* Infinite loop */
 143:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 144:Core/Src/main.c ****   while (1)
 145:Core/Src/main.c ****   {
ARM GAS  /tmp/cc3GprpR.s 			page 4


 146:Core/Src/main.c ****     /* USER CODE END WHILE */
 147:Core/Src/main.c **** 	
 148:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 149:Core/Src/main.c ****   }
 150:Core/Src/main.c ****   /* USER CODE END 3 */
 151:Core/Src/main.c **** }
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /**
 154:Core/Src/main.c ****   * @brief System Clock Configuration
 155:Core/Src/main.c ****   * @retval None
 156:Core/Src/main.c ****   */
 157:Core/Src/main.c **** void SystemClock_Config(void)
 158:Core/Src/main.c **** {
 159:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 163:Core/Src/main.c ****   */
 164:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 165:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 168:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 169:Core/Src/main.c ****   */
 170:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 179:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 180:Core/Src/main.c ****   {
 181:Core/Src/main.c ****     Error_Handler();
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 185:Core/Src/main.c ****   */
 186:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 187:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 189:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 191:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 194:Core/Src/main.c ****   {
 195:Core/Src/main.c ****     Error_Handler();
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c **** }
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** /**
 200:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 201:Core/Src/main.c ****   * @param None
 202:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/cc3GprpR.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c **** static void MX_ADC1_Init(void)
 205:Core/Src/main.c **** {
 206:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c ****   hadc1.Instance = ADC1;
 219:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 220:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 221:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 222:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 223:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 224:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 225:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 226:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 227:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 228:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 229:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 230:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 231:Core/Src/main.c ****   {
 232:Core/Src/main.c ****     Error_Handler();
 233:Core/Src/main.c ****   }
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 238:Core/Src/main.c ****   sConfig.Rank = 1;
 239:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 240:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 241:Core/Src/main.c ****   {
 242:Core/Src/main.c ****     Error_Handler();
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****   * @brief USART2 Initialization Function
 251:Core/Src/main.c ****   * @param None
 252:Core/Src/main.c ****   * @retval None
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 255:Core/Src/main.c **** {
 256:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 259:Core/Src/main.c **** 
ARM GAS  /tmp/cc3GprpR.s 			page 6


 260:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 263:Core/Src/main.c ****   huart2.Instance = USART2;
 264:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 265:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 266:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 267:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 268:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 269:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 270:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 271:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 278:Core/Src/main.c **** }
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** /**
 281:Core/Src/main.c ****   * Enable DMA controller clock
 282:Core/Src/main.c ****   */
 283:Core/Src/main.c **** static void MX_DMA_Init(void)
 284:Core/Src/main.c **** {
 285:Core/Src/main.c ****   /* DMA controller clock enable */
 286:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /* DMA interrupt init */
 289:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 290:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 291:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 292:Core/Src/main.c **** }
 293:Core/Src/main.c **** 
 294:Core/Src/main.c **** /**
 295:Core/Src/main.c ****   * @brief GPIO Initialization Function
 296:Core/Src/main.c ****   * @param None
 297:Core/Src/main.c ****   * @retval None
 298:Core/Src/main.c ****   */
 299:Core/Src/main.c **** static void MX_GPIO_Init(void)
 300:Core/Src/main.c **** {
  28              		.loc 1 300 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 301:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 301 3 view .LVU1
  42              		.loc 1 301 20 is_stmt 0 view .LVU2
ARM GAS  /tmp/cc3GprpR.s 			page 7


  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 302:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 303:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 306:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 306 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 306 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 306 3 view .LVU5
  54 0012 264B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 306 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 306 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 306 3 view .LVU8
 307:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 307 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 307 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 307 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 307 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 307 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 307 3 view .LVU14
 308:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 308 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 308 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 308 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 308 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
ARM GAS  /tmp/cc3GprpR.s 			page 8


  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 308 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 308 3 view .LVU20
 309:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 309 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 309 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 309 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 309 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 309 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 309 3 view .LVU26
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 312:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 312 3 view .LVU27
 115 0062 134D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 315:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 315 3 view .LVU28
 122              		.loc 1 315 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 316:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 125              		.loc 1 316 3 is_stmt 1 view .LVU30
 126              		.loc 1 316 24 is_stmt 0 view .LVU31
 127 0074 4FF40413 		mov	r3, #2162688
 128 0078 0693     		str	r3, [sp, #24]
 317:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 317 3 is_stmt 1 view .LVU32
 130              		.loc 1 317 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 318:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 318 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 0D48     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 321:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
ARM GAS  /tmp/cc3GprpR.s 			page 9


 137              		.loc 1 321 3 view .LVU35
 138              		.loc 1 321 23 is_stmt 0 view .LVU36
 139 0084 2023     		movs	r3, #32
 140 0086 0593     		str	r3, [sp, #20]
 322:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 322 3 is_stmt 1 view .LVU37
 142              		.loc 1 322 24 is_stmt 0 view .LVU38
 143 0088 0123     		movs	r3, #1
 144 008a 0693     		str	r3, [sp, #24]
 323:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 323 3 is_stmt 1 view .LVU39
 146              		.loc 1 323 24 is_stmt 0 view .LVU40
 147 008c 0794     		str	r4, [sp, #28]
 324:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 324 3 is_stmt 1 view .LVU41
 149              		.loc 1 324 25 is_stmt 0 view .LVU42
 150 008e 0894     		str	r4, [sp, #32]
 325:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 325 3 is_stmt 1 view .LVU43
 152 0090 05A9     		add	r1, sp, #20
 153 0092 2846     		mov	r0, r5
 154 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* EXTI interrupt init*/
 328:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 156              		.loc 1 328 3 view .LVU44
 157 0098 2246     		mov	r2, r4
 158 009a 0521     		movs	r1, #5
 159 009c 2820     		movs	r0, #40
 160 009e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 161              	.LVL3:
 329:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 162              		.loc 1 329 3 view .LVU45
 163 00a2 2820     		movs	r0, #40
 164 00a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 165              	.LVL4:
 330:Core/Src/main.c **** 
 331:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 332:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 333:Core/Src/main.c **** }
 166              		.loc 1 333 1 is_stmt 0 view .LVU46
 167 00a8 0BB0     		add	sp, sp, #44
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 12
 170              		@ sp needed
 171 00aa 30BD     		pop	{r4, r5, pc}
 172              	.L4:
 173              		.align	2
 174              	.L3:
 175 00ac 00380240 		.word	1073887232
 176 00b0 00000240 		.word	1073872896
 177 00b4 00080240 		.word	1073874944
 178              		.cfi_endproc
 179              	.LFE232:
 181              		.section	.text.MX_DMA_Init,"ax",%progbits
 182              		.align	1
ARM GAS  /tmp/cc3GprpR.s 			page 10


 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	MX_DMA_Init:
 188              	.LFB231:
 284:Core/Src/main.c ****   /* DMA controller clock enable */
 189              		.loc 1 284 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193 0000 00B5     		push	{lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 14, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 16
 286:Core/Src/main.c **** 
 200              		.loc 1 286 3 view .LVU48
 201              	.LBB8:
 286:Core/Src/main.c **** 
 202              		.loc 1 286 3 view .LVU49
 203 0004 0022     		movs	r2, #0
 204 0006 0192     		str	r2, [sp, #4]
 286:Core/Src/main.c **** 
 205              		.loc 1 286 3 view .LVU50
 206 0008 094B     		ldr	r3, .L7
 207 000a 196B     		ldr	r1, [r3, #48]
 208 000c 41F48001 		orr	r1, r1, #4194304
 209 0010 1963     		str	r1, [r3, #48]
 286:Core/Src/main.c **** 
 210              		.loc 1 286 3 view .LVU51
 211 0012 1B6B     		ldr	r3, [r3, #48]
 212 0014 03F48003 		and	r3, r3, #4194304
 213 0018 0193     		str	r3, [sp, #4]
 286:Core/Src/main.c **** 
 214              		.loc 1 286 3 view .LVU52
 215 001a 019B     		ldr	r3, [sp, #4]
 216              	.LBE8:
 286:Core/Src/main.c **** 
 217              		.loc 1 286 3 view .LVU53
 290:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 218              		.loc 1 290 3 view .LVU54
 219 001c 0521     		movs	r1, #5
 220 001e 3820     		movs	r0, #56
 221 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 222              	.LVL5:
 291:Core/Src/main.c **** }
 223              		.loc 1 291 3 view .LVU55
 224 0024 3820     		movs	r0, #56
 225 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 226              	.LVL6:
 292:Core/Src/main.c **** 
 227              		.loc 1 292 1 is_stmt 0 view .LVU56
 228 002a 03B0     		add	sp, sp, #12
 229              	.LCFI5:
 230              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc3GprpR.s 			page 11


 231              		@ sp needed
 232 002c 5DF804FB 		ldr	pc, [sp], #4
 233              	.L8:
 234              		.align	2
 235              	.L7:
 236 0030 00380240 		.word	1073887232
 237              		.cfi_endproc
 238              	.LFE231:
 240              		.section	.text.__io_putchar,"ax",%progbits
 241              		.align	1
 242              		.global	__io_putchar
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 247              	__io_putchar:
 248              	.LVL7:
 249              	.LFB236:
 334:Core/Src/main.c **** 
 335:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 336:Core/Src/main.c **** void StartTask03(void *argument)
 337:Core/Src/main.c **** {
 338:Core/Src/main.c ****   
 339:Core/Src/main.c ****   for(;;)
 340:Core/Src/main.c ****   { 
 341:Core/Src/main.c ****     printf("_____I N   T A S K   3_____\r\n\r\n");
 342:Core/Src/main.c ****    
 343:Core/Src/main.c ****     eTaskState a = eTaskGetState(  Task03Handle );
 344:Core/Src/main.c ****     printf("task 3 "); 
 345:Core/Src/main.c ****     getStatusName(a);
 346:Core/Src/main.c ****     a = eTaskGetState(  Task04Handle );
 347:Core/Src/main.c ****     printf("task 4 "); 
 348:Core/Src/main.c ****     getStatusName(a);
 349:Core/Src/main.c ****     a = eTaskGetState(  Task05Handle );
 350:Core/Src/main.c ****     printf("task 5 "); 
 351:Core/Src/main.c ****     getStatusName(a);
 352:Core/Src/main.c ****     vTaskSuspend( Task04Handle );
 353:Core/Src/main.c ****     vTaskDelay(3000);
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c **** }
 356:Core/Src/main.c **** void StartTask04(void *argument)
 357:Core/Src/main.c **** {
 358:Core/Src/main.c ****   for(;;)
 359:Core/Src/main.c ****   {
 360:Core/Src/main.c ****   
 361:Core/Src/main.c ****     printf("_____I N   T A S K   4_____\r\n\r\n");
 362:Core/Src/main.c ****   	
 363:Core/Src/main.c ****     /*eTaskState int a = eTaskGetState(  Task04Handle );*/
 364:Core/Src/main.c ****     eTaskState a = eTaskGetState(  Task03Handle );
 365:Core/Src/main.c ****     printf("task 3 "); 
 366:Core/Src/main.c ****     getStatusName(a);
 367:Core/Src/main.c ****     a = eTaskGetState(  Task04Handle );
 368:Core/Src/main.c ****     printf("task 4 "); 
 369:Core/Src/main.c ****     getStatusName(a);
 370:Core/Src/main.c ****     a = eTaskGetState(  Task05Handle );
 371:Core/Src/main.c ****     printf("task 5 "); 
 372:Core/Src/main.c ****     getStatusName(a);
 373:Core/Src/main.c ****     vTaskResume( Task03Handle );
ARM GAS  /tmp/cc3GprpR.s 			page 12


 374:Core/Src/main.c ****     vTaskDelay(3000);
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c **** }
 377:Core/Src/main.c **** 
 378:Core/Src/main.c **** void StartTask05(void *argument)
 379:Core/Src/main.c **** {
 380:Core/Src/main.c ****     
 381:Core/Src/main.c ****     for(;;)
 382:Core/Src/main.c ****     {
 383:Core/Src/main.c ****     printf("_____I N   T A S K   5_____\r\n\r\n");
 384:Core/Src/main.c ****     
 385:Core/Src/main.c ****     eTaskState a = eTaskGetState(  Task03Handle );
 386:Core/Src/main.c ****     printf("task 3 "); 
 387:Core/Src/main.c ****     getStatusName(a);
 388:Core/Src/main.c ****     a = eTaskGetState(  Task04Handle );
 389:Core/Src/main.c ****     printf("task 4 "); 
 390:Core/Src/main.c ****     getStatusName(a);
 391:Core/Src/main.c ****     a = eTaskGetState(  Task05Handle );
 392:Core/Src/main.c ****     printf("task 5 "); 
 393:Core/Src/main.c ****     getStatusName(a);
 394:Core/Src/main.c ****     vTaskSuspend( Task03Handle );
 395:Core/Src/main.c ****     vTaskResume( Task04Handle );
 396:Core/Src/main.c ****     vTaskDelay(3000);
 397:Core/Src/main.c ****     
 398:Core/Src/main.c ****     if (ClrScrFlag == 1){
 399:Core/Src/main.c ****       char clear_screen[] = "\033[2J\033[H";
 400:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 401:Core/Src/main.c ****       
 402:Core/Src/main.c ****       memset(TaskList_Buffer,0,sizeof(TaskList_Buffer));
 403:Core/Src/main.c ****       vTaskList(TaskList_Buffer);
 404:Core/Src/main.c ****       printf("------------TASK LIST------------------\r\n");
 405:Core/Src/main.c ****       printf("no of tasks %d\r\n", uxTaskGetNumberOfTasks());
 406:Core/Src/main.c ****       printf("--------------------------------------\r\n");
 407:Core/Src/main.c ****       printf("tasks    state      prioriy     stack   number\r\n");
 408:Core/Src/main.c ****       printf("--------------------------------------\r\n");
 409:Core/Src/main.c ****       printf("%s\r\n",TaskList_Buffer); 
 410:Core/Src/main.c ****       printf("--------------------------------------\r\n");
 411:Core/Src/main.c ****       ClrScrFlag = 0;
 412:Core/Src/main.c ****       
 413:Core/Src/main.c ****       }
 414:Core/Src/main.c ****        
 415:Core/Src/main.c ****   }
 416:Core/Src/main.c **** }
 417:Core/Src/main.c **** PUTCHAR_PROTOTYPE
 418:Core/Src/main.c **** {
 250              		.loc 1 418 1 is_stmt 1 view -0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		.loc 1 418 1 is_stmt 0 view .LVU58
 255 0000 00B5     		push	{lr}
 256              	.LCFI6:
 257              		.cfi_def_cfa_offset 4
 258              		.cfi_offset 14, -4
 259 0002 83B0     		sub	sp, sp, #12
 260              	.LCFI7:
 261              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc3GprpR.s 			page 13


 262 0004 0190     		str	r0, [sp, #4]
 419:Core/Src/main.c ****   /* Place your implementation of fputc here */
 420:Core/Src/main.c ****   /* e.g. write a character to the USART1 and Loop until the end of transmission */
 421:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 263              		.loc 1 421 3 is_stmt 1 view .LVU59
 264 0006 4FF6FF73 		movw	r3, #65535
 265 000a 0122     		movs	r2, #1
 266 000c 01A9     		add	r1, sp, #4
 267 000e 0348     		ldr	r0, .L11
 268              	.LVL8:
 269              		.loc 1 421 3 is_stmt 0 view .LVU60
 270 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 271              	.LVL9:
 422:Core/Src/main.c ****   return ch;
 272              		.loc 1 422 3 is_stmt 1 view .LVU61
 423:Core/Src/main.c **** }
 273              		.loc 1 423 1 is_stmt 0 view .LVU62
 274 0014 0198     		ldr	r0, [sp, #4]
 275 0016 03B0     		add	sp, sp, #12
 276              	.LCFI8:
 277              		.cfi_def_cfa_offset 4
 278              		@ sp needed
 279 0018 5DF804FB 		ldr	pc, [sp], #4
 280              	.L12:
 281              		.align	2
 282              	.L11:
 283 001c 00000000 		.word	.LANCHOR0
 284              		.cfi_endproc
 285              	.LFE236:
 287              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 288              		.align	1
 289              		.global	HAL_GPIO_EXTI_Callback
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 294              	HAL_GPIO_EXTI_Callback:
 295              	.LVL10:
 296              	.LFB237:
 424:Core/Src/main.c **** 
 425:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 426:Core/Src/main.c **** {
 297              		.loc 1 426 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 427:Core/Src/main.c ****   if (GPIO_Pin == B1_Pin)
 301              		.loc 1 427 3 view .LVU64
 302              		.loc 1 427 6 is_stmt 0 view .LVU65
 303 0000 B0F5005F 		cmp	r0, #8192
 304 0004 00D0     		beq	.L19
 305 0006 7047     		bx	lr
 306              	.L19:
 426:Core/Src/main.c ****   if (GPIO_Pin == B1_Pin)
 307              		.loc 1 426 1 view .LVU66
 308 0008 08B5     		push	{r3, lr}
 309              	.LCFI9:
 310              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc3GprpR.s 			page 14


 311              		.cfi_offset 3, -8
 312              		.cfi_offset 14, -4
 428:Core/Src/main.c ****   {
 429:Core/Src/main.c ****   	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 313              		.loc 1 429 4 is_stmt 1 view .LVU67
 314 000a 2021     		movs	r1, #32
 315 000c 0348     		ldr	r0, .L20
 316              	.LVL11:
 317              		.loc 1 429 4 is_stmt 0 view .LVU68
 318 000e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 319              	.LVL12:
 430:Core/Src/main.c ****  	ClrScrFlag = 1;	
 320              		.loc 1 430 3 is_stmt 1 view .LVU69
 321              		.loc 1 430 14 is_stmt 0 view .LVU70
 322 0012 034B     		ldr	r3, .L20+4
 323 0014 0122     		movs	r2, #1
 324 0016 1A70     		strb	r2, [r3]
 431:Core/Src/main.c ****   }
 432:Core/Src/main.c ****   
 433:Core/Src/main.c **** }
 325              		.loc 1 433 1 view .LVU71
 326 0018 08BD     		pop	{r3, pc}
 327              	.L21:
 328 001a 00BF     		.align	2
 329              	.L20:
 330 001c 00000240 		.word	1073872896
 331 0020 00000000 		.word	.LANCHOR1
 332              		.cfi_endproc
 333              	.LFE237:
 335              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 336              		.align	1
 337              		.global	HAL_ADC_ConvCpltCallback
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 342              	HAL_ADC_ConvCpltCallback:
 343              	.LVL13:
 344              	.LFB238:
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 437:Core/Src/main.c **** {
 345              		.loc 1 437 1 is_stmt 1 view -0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 438:Core/Src/main.c ****   if (hadc->Instance == ADC1)
 350              		.loc 1 438 3 view .LVU73
 439:Core/Src/main.c ****   {
 440:Core/Src/main.c ****   }
 351              		.loc 1 440 3 view .LVU74
 441:Core/Src/main.c **** }
 352              		.loc 1 441 1 is_stmt 0 view .LVU75
 353 0000 7047     		bx	lr
 354              		.cfi_endproc
 355              	.LFE238:
ARM GAS  /tmp/cc3GprpR.s 			page 15


 357              		.section	.rodata.TaskAdd.str1.4,"aMS",%progbits,1
 358              		.align	2
 359              	.LC0:
 360 0000 2D2D2D2D 		.ascii	"---->%s Added\015\012\000"
 360      3E257320 
 360      41646465 
 360      640D0A00 
 361              		.align	2
 362              	.LC1:
 363 0010 2D2D2D2D 		.ascii	"---->Failed to add %s\015\012\000"
 363      3E466169 
 363      6C656420 
 363      746F2061 
 363      64642025 
 364              		.section	.text.TaskAdd,"ax",%progbits
 365              		.align	1
 366              		.global	TaskAdd
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 371              	TaskAdd:
 372              	.LVL14:
 373              	.LFB239:
 442:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument), /* Function that implements the task. */
 443:Core/Src/main.c **** 	char * TaskName, /* Text name for the task. */
 444:Core/Src/main.c **** 	uint16_t StackSize, /* Stack size in words, not bytes. */
 445:Core/Src/main.c **** 	int *pvParameters, /* Parameter passed into the task. */
 446:Core/Src/main.c **** 	UBaseType_t uxPriority, /* Priority at which the task is created. */
 447:Core/Src/main.c **** 	TaskHandle_t *TaskHandle ) /* Used to pass out the task’s handle. */
 448:Core/Src/main.c **** 	{
 374              		.loc 1 448 2 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 8, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		.loc 1 448 2 is_stmt 0 view .LVU77
 379 0000 70B5     		push	{r4, r5, r6, lr}
 380              	.LCFI10:
 381              		.cfi_def_cfa_offset 16
 382              		.cfi_offset 4, -16
 383              		.cfi_offset 5, -12
 384              		.cfi_offset 6, -8
 385              		.cfi_offset 14, -4
 386 0002 82B0     		sub	sp, sp, #8
 387              	.LCFI11:
 388              		.cfi_def_cfa_offset 24
 389 0004 0C46     		mov	r4, r1
 390 0006 079D     		ldr	r5, [sp, #28]
 449:Core/Src/main.c **** 		BaseType_t retValue = xTaskCreate( FunctionName, TaskName, StackSize, pvParameters,
 391              		.loc 1 449 3 is_stmt 1 view .LVU78
 392              		.loc 1 449 25 is_stmt 0 view .LVU79
 393 0008 0195     		str	r5, [sp, #4]
 394 000a 069E     		ldr	r6, [sp, #24]
 395 000c 0096     		str	r6, [sp]
 396 000e FFF7FEFF 		bl	xTaskCreate
 397              	.LVL15:
 450:Core/Src/main.c **** 		uxPriority, TaskHandle );
 451:Core/Src/main.c **** 		//printf("Converted Random number in main to %d in task %s", *pvParameters, TaskName);
ARM GAS  /tmp/cc3GprpR.s 			page 16


 452:Core/Src/main.c **** 		if( retValue == pdPASS ) {
 398              		.loc 1 452 3 is_stmt 1 view .LVU80
 399              		.loc 1 452 5 is_stmt 0 view .LVU81
 400 0012 0128     		cmp	r0, #1
 401 0014 06D0     		beq	.L27
 453:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 454:Core/Src/main.c **** 			return 0;
 455:Core/Src/main.c **** 		}
 456:Core/Src/main.c **** 	
 457:Core/Src/main.c **** 		else {
 458:Core/Src/main.c **** 			printf("---->Failed to add %s\r\n", TaskName);
 402              		.loc 1 458 4 is_stmt 1 view .LVU82
 403 0016 2146     		mov	r1, r4
 404 0018 0748     		ldr	r0, .L28
 405              	.LVL16:
 406              		.loc 1 458 4 is_stmt 0 view .LVU83
 407 001a FFF7FEFF 		bl	printf
 408              	.LVL17:
 459:Core/Src/main.c **** 		}
 460:Core/Src/main.c **** 	return 1;
 409              		.loc 1 460 2 is_stmt 1 view .LVU84
 410              		.loc 1 460 9 is_stmt 0 view .LVU85
 411 001e 0120     		movs	r0, #1
 412              	.L25:
 461:Core/Src/main.c **** }
 413              		.loc 1 461 1 view .LVU86
 414 0020 02B0     		add	sp, sp, #8
 415              	.LCFI12:
 416              		.cfi_remember_state
 417              		.cfi_def_cfa_offset 16
 418              		@ sp needed
 419 0022 70BD     		pop	{r4, r5, r6, pc}
 420              	.LVL18:
 421              	.L27:
 422              	.LCFI13:
 423              		.cfi_restore_state
 453:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 424              		.loc 1 453 4 is_stmt 1 view .LVU87
 425 0024 2868     		ldr	r0, [r5]
 426              	.LVL19:
 453:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 427              		.loc 1 453 4 is_stmt 0 view .LVU88
 428 0026 FFF7FEFF 		bl	pcTaskGetName
 429              	.LVL20:
 430 002a 0146     		mov	r1, r0
 431 002c 0348     		ldr	r0, .L28+4
 432 002e FFF7FEFF 		bl	printf
 433              	.LVL21:
 454:Core/Src/main.c **** 		}
 434              		.loc 1 454 4 is_stmt 1 view .LVU89
 454:Core/Src/main.c **** 		}
 435              		.loc 1 454 11 is_stmt 0 view .LVU90
 436 0032 0020     		movs	r0, #0
 437 0034 F4E7     		b	.L25
 438              	.L29:
 439 0036 00BF     		.align	2
 440              	.L28:
ARM GAS  /tmp/cc3GprpR.s 			page 17


 441 0038 10000000 		.word	.LC1
 442 003c 00000000 		.word	.LC0
 443              		.cfi_endproc
 444              	.LFE239:
 446              		.section	.rodata.KillTask.str1.4,"aMS",%progbits,1
 447              		.align	2
 448              	.LC2:
 449 0000 2D2D2D2D 		.ascii	"---->%s Killed\015\012\000"
 449      3E257320 
 449      4B696C6C 
 449      65640D0A 
 449      00
 450              		.section	.text.KillTask,"ax",%progbits
 451              		.align	1
 452              		.global	KillTask
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	KillTask:
 458              	.LVL22:
 459              	.LFB240:
 462:Core/Src/main.c **** 
 463:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle)
 464:Core/Src/main.c **** {
 460              		.loc 1 464 1 is_stmt 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		.loc 1 464 1 is_stmt 0 view .LVU92
 465 0000 10B5     		push	{r4, lr}
 466              	.LCFI14:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 4, -8
 469              		.cfi_offset 14, -4
 470 0002 0446     		mov	r4, r0
 465:Core/Src/main.c **** 	vTaskDelete( *TaskHandle );
 471              		.loc 1 465 2 is_stmt 1 view .LVU93
 472 0004 0068     		ldr	r0, [r0]
 473              	.LVL23:
 474              		.loc 1 465 2 is_stmt 0 view .LVU94
 475 0006 FFF7FEFF 		bl	vTaskDelete
 476              	.LVL24:
 466:Core/Src/main.c **** 	printf("---->%s Killed\r\n", pcTaskGetName(*TaskHandle));
 477              		.loc 1 466 2 is_stmt 1 view .LVU95
 478 000a 2068     		ldr	r0, [r4]
 479 000c FFF7FEFF 		bl	pcTaskGetName
 480              	.LVL25:
 481 0010 0146     		mov	r1, r0
 482 0012 0348     		ldr	r0, .L32
 483 0014 FFF7FEFF 		bl	printf
 484              	.LVL26:
 467:Core/Src/main.c **** 	/* Task gets killed when IDLE Task runs */
 468:Core/Src/main.c **** 	*TaskHandle = NULL;
 485              		.loc 1 468 2 view .LVU96
 486              		.loc 1 468 14 is_stmt 0 view .LVU97
 487 0018 0023     		movs	r3, #0
 488 001a 2360     		str	r3, [r4]
ARM GAS  /tmp/cc3GprpR.s 			page 18


 469:Core/Src/main.c **** }
 489              		.loc 1 469 1 view .LVU98
 490 001c 10BD     		pop	{r4, pc}
 491              	.LVL27:
 492              	.L33:
 493              		.loc 1 469 1 view .LVU99
 494 001e 00BF     		.align	2
 495              	.L32:
 496 0020 00000000 		.word	.LC2
 497              		.cfi_endproc
 498              	.LFE240:
 500              		.section	.rodata.getStatusName.str1.4,"aMS",%progbits,1
 501              		.align	2
 502              	.LC3:
 503 0000 73746174 		.ascii	"state : eRunning  %d \015\012\000"
 503      65203A20 
 503      6552756E 
 503      6E696E67 
 503      20202564 
 504              		.align	2
 505              	.LC4:
 506 0018 73746174 		.ascii	"state : eReady  %d \015\012\000"
 506      65203A20 
 506      65526561 
 506      64792020 
 506      2564200D 
 507 002e 0000     		.align	2
 508              	.LC5:
 509 0030 73746174 		.ascii	"state : eBlocked %d \015\012\000"
 509      65203A20 
 509      65426C6F 
 509      636B6564 
 509      20256420 
 510 0047 00       		.align	2
 511              	.LC6:
 512 0048 73746174 		.ascii	"state : eSuspended  %d \015\012\000"
 512      65203A20 
 512      65537573 
 512      70656E64 
 512      65642020 
 513 0062 0000     		.align	2
 514              	.LC7:
 515 0064 73746174 		.ascii	"state : eDeleted  %d \015\012\000"
 515      65203A20 
 515      6544656C 
 515      65746564 
 515      20202564 
 516              		.align	2
 517              	.LC8:
 518 007c 73746174 		.ascii	"state : eInvalid  %d \015\012\000"
 518      65203A20 
 518      65496E76 
 518      616C6964 
 518      20202564 
 519              		.section	.text.getStatusName,"ax",%progbits
 520              		.align	1
 521              		.global	getStatusName
ARM GAS  /tmp/cc3GprpR.s 			page 19


 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 526              	getStatusName:
 527              	.LVL28:
 528              	.LFB241:
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** void getStatusName(int a)
 472:Core/Src/main.c **** {
 529              		.loc 1 472 1 is_stmt 1 view -0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              		.loc 1 472 1 is_stmt 0 view .LVU101
 534 0000 08B5     		push	{r3, lr}
 535              	.LCFI15:
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 3, -8
 538              		.cfi_offset 14, -4
 539 0002 0146     		mov	r1, r0
 473:Core/Src/main.c **** 	/*if (a == 0){
 474:Core/Src/main.c **** 		printf( "state : eRunning  %d \r\n", a );
 475:Core/Src/main.c **** 	}
 476:Core/Src/main.c **** 	if (a == 1){
 477:Core/Src/main.c **** 		printf( "state : eReady %d \r\n", a );
 478:Core/Src/main.c **** 	}
 479:Core/Src/main.c **** 	if (a == 2){
 480:Core/Src/main.c **** 		printf( "state : eBlocked %d \r\n", a );
 481:Core/Src/main.c **** 	}
 482:Core/Src/main.c **** 	if (a == 3){
 483:Core/Src/main.c **** 		printf( "state : eSuspended %d \r\n", a );
 484:Core/Src/main.c **** 	}
 485:Core/Src/main.c **** 	if (a == 4){
 486:Core/Src/main.c **** 		printf( "state : eDeleted %d \r\n", a );
 487:Core/Src/main.c **** 	}*/
 488:Core/Src/main.c **** 	switch(a)
 540              		.loc 1 488 2 is_stmt 1 view .LVU102
 541 0004 0428     		cmp	r0, #4
 542 0006 18D8     		bhi	.L35
 543 0008 DFE800F0 		tbb	[pc, r0]
 544              	.L37:
 545 000c 03       		.byte	(.L41-.L37)/2
 546 000d 07       		.byte	(.L40-.L37)/2
 547 000e 0B       		.byte	(.L39-.L37)/2
 548 000f 0F       		.byte	(.L38-.L37)/2
 549 0010 13       		.byte	(.L36-.L37)/2
 550 0011 00       		.p2align 1
 551              	.L41:
 489:Core/Src/main.c **** 	{
 490:Core/Src/main.c **** 		case 0:  printf( "state : eRunning  %d \r\n", a );
 552              		.loc 1 490 12 view .LVU103
 553 0012 0C48     		ldr	r0, .L44
 554              	.LVL29:
 555              		.loc 1 490 12 is_stmt 0 view .LVU104
 556 0014 FFF7FEFF 		bl	printf
 557              	.LVL30:
 491:Core/Src/main.c **** 		break;	
ARM GAS  /tmp/cc3GprpR.s 			page 20


 558              		.loc 1 491 3 is_stmt 1 view .LVU105
 559              	.L34:
 492:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 493:Core/Src/main.c **** 		break;
 494:Core/Src/main.c **** 		case 2:  printf( "state : eBlocked %d \r\n", a );
 495:Core/Src/main.c **** 		break;
 496:Core/Src/main.c **** 		case 3:  printf( "state : eSuspended  %d \r\n", a );
 497:Core/Src/main.c **** 		break;
 498:Core/Src/main.c **** 		case 4:  printf( "state : eDeleted  %d \r\n", a );
 499:Core/Src/main.c **** 		break;
 500:Core/Src/main.c **** 		default: printf( "state : eInvalid  %d \r\n", a );
 501:Core/Src/main.c **** 		break;
 502:Core/Src/main.c **** 	}
 503:Core/Src/main.c **** }
 560              		.loc 1 503 1 is_stmt 0 view .LVU106
 561 0018 08BD     		pop	{r3, pc}
 562              	.LVL31:
 563              	.L40:
 492:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 564              		.loc 1 492 12 is_stmt 1 view .LVU107
 565 001a 0B48     		ldr	r0, .L44+4
 566              	.LVL32:
 492:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 567              		.loc 1 492 12 is_stmt 0 view .LVU108
 568 001c FFF7FEFF 		bl	printf
 569              	.LVL33:
 493:Core/Src/main.c **** 		case 2:  printf( "state : eBlocked %d \r\n", a );
 570              		.loc 1 493 3 is_stmt 1 view .LVU109
 571 0020 FAE7     		b	.L34
 572              	.LVL34:
 573              	.L39:
 494:Core/Src/main.c **** 		break;
 574              		.loc 1 494 12 view .LVU110
 575 0022 0A48     		ldr	r0, .L44+8
 576              	.LVL35:
 494:Core/Src/main.c **** 		break;
 577              		.loc 1 494 12 is_stmt 0 view .LVU111
 578 0024 FFF7FEFF 		bl	printf
 579              	.LVL36:
 495:Core/Src/main.c **** 		case 3:  printf( "state : eSuspended  %d \r\n", a );
 580              		.loc 1 495 3 is_stmt 1 view .LVU112
 581 0028 F6E7     		b	.L34
 582              	.LVL37:
 583              	.L38:
 496:Core/Src/main.c **** 		break;
 584              		.loc 1 496 12 view .LVU113
 585 002a 0948     		ldr	r0, .L44+12
 586              	.LVL38:
 496:Core/Src/main.c **** 		break;
 587              		.loc 1 496 12 is_stmt 0 view .LVU114
 588 002c FFF7FEFF 		bl	printf
 589              	.LVL39:
 497:Core/Src/main.c **** 		case 4:  printf( "state : eDeleted  %d \r\n", a );
 590              		.loc 1 497 3 is_stmt 1 view .LVU115
 591 0030 F2E7     		b	.L34
 592              	.LVL40:
 593              	.L36:
ARM GAS  /tmp/cc3GprpR.s 			page 21


 498:Core/Src/main.c **** 		break;
 594              		.loc 1 498 12 view .LVU116
 595 0032 0848     		ldr	r0, .L44+16
 596              	.LVL41:
 498:Core/Src/main.c **** 		break;
 597              		.loc 1 498 12 is_stmt 0 view .LVU117
 598 0034 FFF7FEFF 		bl	printf
 599              	.LVL42:
 499:Core/Src/main.c **** 		default: printf( "state : eInvalid  %d \r\n", a );
 600              		.loc 1 499 3 is_stmt 1 view .LVU118
 601 0038 EEE7     		b	.L34
 602              	.LVL43:
 603              	.L35:
 500:Core/Src/main.c **** 		break;
 604              		.loc 1 500 12 view .LVU119
 605 003a 0748     		ldr	r0, .L44+20
 606              	.LVL44:
 500:Core/Src/main.c **** 		break;
 607              		.loc 1 500 12 is_stmt 0 view .LVU120
 608 003c FFF7FEFF 		bl	printf
 609              	.LVL45:
 501:Core/Src/main.c **** 	}
 610              		.loc 1 501 3 is_stmt 1 view .LVU121
 611              		.loc 1 503 1 is_stmt 0 view .LVU122
 612 0040 EAE7     		b	.L34
 613              	.L45:
 614 0042 00BF     		.align	2
 615              	.L44:
 616 0044 00000000 		.word	.LC3
 617 0048 18000000 		.word	.LC4
 618 004c 30000000 		.word	.LC5
 619 0050 48000000 		.word	.LC6
 620 0054 64000000 		.word	.LC7
 621 0058 7C000000 		.word	.LC8
 622              		.cfi_endproc
 623              	.LFE241:
 625              		.section	.rodata.StartTask03.str1.4,"aMS",%progbits,1
 626              		.align	2
 627              	.LC9:
 628 0000 5F5F5F5F 		.ascii	"_____I N   T A S K   3_____\015\012\015\000"
 628      5F49204E 
 628      20202054 
 628      20412053 
 628      204B2020 
 629 001f 00       		.align	2
 630              	.LC10:
 631 0020 7461736B 		.ascii	"task 3 \000"
 631      20332000 
 632              		.align	2
 633              	.LC11:
 634 0028 7461736B 		.ascii	"task 4 \000"
 634      20342000 
 635              		.align	2
 636              	.LC12:
 637 0030 7461736B 		.ascii	"task 5 \000"
 637      20352000 
 638              		.section	.text.StartTask03,"ax",%progbits
ARM GAS  /tmp/cc3GprpR.s 			page 22


 639              		.align	1
 640              		.global	StartTask03
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 645              	StartTask03:
 646              	.LFB233:
 337:Core/Src/main.c ****   
 647              		.loc 1 337 1 is_stmt 1 view -0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              	.LVL46:
 337:Core/Src/main.c ****   
 652              		.loc 1 337 1 is_stmt 0 view .LVU124
 653 0000 38B5     		push	{r3, r4, r5, lr}
 654              	.LCFI16:
 655              		.cfi_def_cfa_offset 16
 656              		.cfi_offset 3, -16
 657              		.cfi_offset 4, -12
 658              		.cfi_offset 5, -8
 659              		.cfi_offset 14, -4
 660              	.LVL47:
 661              	.L47:
 339:Core/Src/main.c ****   { 
 662              		.loc 1 339 3 is_stmt 1 discriminator 1 view .LVU125
 663              	.LBB9:
 341:Core/Src/main.c ****    
 664              		.loc 1 341 5 discriminator 1 view .LVU126
 665 0002 1648     		ldr	r0, .L49
 666 0004 FFF7FEFF 		bl	puts
 667              	.LVL48:
 343:Core/Src/main.c ****     printf("task 3 "); 
 668              		.loc 1 343 5 discriminator 1 view .LVU127
 343:Core/Src/main.c ****     printf("task 3 "); 
 669              		.loc 1 343 20 is_stmt 0 discriminator 1 view .LVU128
 670 0008 154B     		ldr	r3, .L49+4
 671 000a 1868     		ldr	r0, [r3]
 672 000c FFF7FEFF 		bl	eTaskGetState
 673              	.LVL49:
 674 0010 0446     		mov	r4, r0
 675              	.LVL50:
 344:Core/Src/main.c ****     getStatusName(a);
 676              		.loc 1 344 5 is_stmt 1 discriminator 1 view .LVU129
 677 0012 1448     		ldr	r0, .L49+8
 678 0014 FFF7FEFF 		bl	printf
 679              	.LVL51:
 345:Core/Src/main.c ****     a = eTaskGetState(  Task04Handle );
 680              		.loc 1 345 5 discriminator 1 view .LVU130
 681 0018 2046     		mov	r0, r4
 682 001a FFF7FEFF 		bl	getStatusName
 683              	.LVL52:
 346:Core/Src/main.c ****     printf("task 4 "); 
 684              		.loc 1 346 5 discriminator 1 view .LVU131
 346:Core/Src/main.c ****     printf("task 4 "); 
 685              		.loc 1 346 9 is_stmt 0 discriminator 1 view .LVU132
 686 001e 124D     		ldr	r5, .L49+12
ARM GAS  /tmp/cc3GprpR.s 			page 23


 687 0020 2868     		ldr	r0, [r5]
 688 0022 FFF7FEFF 		bl	eTaskGetState
 689              	.LVL53:
 690 0026 0446     		mov	r4, r0
 691              	.LVL54:
 347:Core/Src/main.c ****     getStatusName(a);
 692              		.loc 1 347 5 is_stmt 1 discriminator 1 view .LVU133
 693 0028 1048     		ldr	r0, .L49+16
 694 002a FFF7FEFF 		bl	printf
 695              	.LVL55:
 348:Core/Src/main.c ****     a = eTaskGetState(  Task05Handle );
 696              		.loc 1 348 5 discriminator 1 view .LVU134
 697 002e 2046     		mov	r0, r4
 698 0030 FFF7FEFF 		bl	getStatusName
 699              	.LVL56:
 349:Core/Src/main.c ****     printf("task 5 "); 
 700              		.loc 1 349 5 discriminator 1 view .LVU135
 349:Core/Src/main.c ****     printf("task 5 "); 
 701              		.loc 1 349 9 is_stmt 0 discriminator 1 view .LVU136
 702 0034 0E4B     		ldr	r3, .L49+20
 703 0036 1868     		ldr	r0, [r3]
 704 0038 FFF7FEFF 		bl	eTaskGetState
 705              	.LVL57:
 706 003c 0446     		mov	r4, r0
 707              	.LVL58:
 350:Core/Src/main.c ****     getStatusName(a);
 708              		.loc 1 350 5 is_stmt 1 discriminator 1 view .LVU137
 709 003e 0D48     		ldr	r0, .L49+24
 710 0040 FFF7FEFF 		bl	printf
 711              	.LVL59:
 351:Core/Src/main.c ****     vTaskSuspend( Task04Handle );
 712              		.loc 1 351 5 discriminator 1 view .LVU138
 713 0044 2046     		mov	r0, r4
 714 0046 FFF7FEFF 		bl	getStatusName
 715              	.LVL60:
 352:Core/Src/main.c ****     vTaskDelay(3000);
 716              		.loc 1 352 5 discriminator 1 view .LVU139
 717 004a 2868     		ldr	r0, [r5]
 718 004c FFF7FEFF 		bl	vTaskSuspend
 719              	.LVL61:
 353:Core/Src/main.c ****   }
 720              		.loc 1 353 5 discriminator 1 view .LVU140
 721 0050 40F6B830 		movw	r0, #3000
 722 0054 FFF7FEFF 		bl	vTaskDelay
 723              	.LVL62:
 724              	.LBE9:
 339:Core/Src/main.c ****   { 
 725              		.loc 1 339 8 discriminator 1 view .LVU141
 726 0058 D3E7     		b	.L47
 727              	.L50:
 728 005a 00BF     		.align	2
 729              	.L49:
 730 005c 00000000 		.word	.LC9
 731 0060 00000000 		.word	.LANCHOR2
 732 0064 20000000 		.word	.LC10
 733 0068 00000000 		.word	.LANCHOR3
 734 006c 28000000 		.word	.LC11
ARM GAS  /tmp/cc3GprpR.s 			page 24


 735 0070 00000000 		.word	.LANCHOR4
 736 0074 30000000 		.word	.LC12
 737              		.cfi_endproc
 738              	.LFE233:
 740              		.section	.rodata.StartTask04.str1.4,"aMS",%progbits,1
 741              		.align	2
 742              	.LC13:
 743 0000 5F5F5F5F 		.ascii	"_____I N   T A S K   4_____\015\012\015\000"
 743      5F49204E 
 743      20202054 
 743      20412053 
 743      204B2020 
 744              		.section	.text.StartTask04,"ax",%progbits
 745              		.align	1
 746              		.global	StartTask04
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 751              	StartTask04:
 752              	.LFB234:
 357:Core/Src/main.c ****   for(;;)
 753              		.loc 1 357 1 view -0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              	.LVL63:
 357:Core/Src/main.c ****   for(;;)
 758              		.loc 1 357 1 is_stmt 0 view .LVU143
 759 0000 38B5     		push	{r3, r4, r5, lr}
 760              	.LCFI17:
 761              		.cfi_def_cfa_offset 16
 762              		.cfi_offset 3, -16
 763              		.cfi_offset 4, -12
 764              		.cfi_offset 5, -8
 765              		.cfi_offset 14, -4
 766              	.LVL64:
 767              	.L52:
 358:Core/Src/main.c ****   {
 768              		.loc 1 358 3 is_stmt 1 discriminator 1 view .LVU144
 769              	.LBB10:
 361:Core/Src/main.c ****   	
 770              		.loc 1 361 5 discriminator 1 view .LVU145
 771 0002 1648     		ldr	r0, .L54
 772 0004 FFF7FEFF 		bl	puts
 773              	.LVL65:
 364:Core/Src/main.c ****     printf("task 3 "); 
 774              		.loc 1 364 5 discriminator 1 view .LVU146
 364:Core/Src/main.c ****     printf("task 3 "); 
 775              		.loc 1 364 20 is_stmt 0 discriminator 1 view .LVU147
 776 0008 154D     		ldr	r5, .L54+4
 777 000a 2868     		ldr	r0, [r5]
 778 000c FFF7FEFF 		bl	eTaskGetState
 779              	.LVL66:
 780 0010 0446     		mov	r4, r0
 781              	.LVL67:
 365:Core/Src/main.c ****     getStatusName(a);
 782              		.loc 1 365 5 is_stmt 1 discriminator 1 view .LVU148
ARM GAS  /tmp/cc3GprpR.s 			page 25


 783 0012 1448     		ldr	r0, .L54+8
 784 0014 FFF7FEFF 		bl	printf
 785              	.LVL68:
 366:Core/Src/main.c ****     a = eTaskGetState(  Task04Handle );
 786              		.loc 1 366 5 discriminator 1 view .LVU149
 787 0018 2046     		mov	r0, r4
 788 001a FFF7FEFF 		bl	getStatusName
 789              	.LVL69:
 367:Core/Src/main.c ****     printf("task 4 "); 
 790              		.loc 1 367 5 discriminator 1 view .LVU150
 367:Core/Src/main.c ****     printf("task 4 "); 
 791              		.loc 1 367 9 is_stmt 0 discriminator 1 view .LVU151
 792 001e 124B     		ldr	r3, .L54+12
 793 0020 1868     		ldr	r0, [r3]
 794 0022 FFF7FEFF 		bl	eTaskGetState
 795              	.LVL70:
 796 0026 0446     		mov	r4, r0
 797              	.LVL71:
 368:Core/Src/main.c ****     getStatusName(a);
 798              		.loc 1 368 5 is_stmt 1 discriminator 1 view .LVU152
 799 0028 1048     		ldr	r0, .L54+16
 800 002a FFF7FEFF 		bl	printf
 801              	.LVL72:
 369:Core/Src/main.c ****     a = eTaskGetState(  Task05Handle );
 802              		.loc 1 369 5 discriminator 1 view .LVU153
 803 002e 2046     		mov	r0, r4
 804 0030 FFF7FEFF 		bl	getStatusName
 805              	.LVL73:
 370:Core/Src/main.c ****     printf("task 5 "); 
 806              		.loc 1 370 5 discriminator 1 view .LVU154
 370:Core/Src/main.c ****     printf("task 5 "); 
 807              		.loc 1 370 9 is_stmt 0 discriminator 1 view .LVU155
 808 0034 0E4B     		ldr	r3, .L54+20
 809 0036 1868     		ldr	r0, [r3]
 810 0038 FFF7FEFF 		bl	eTaskGetState
 811              	.LVL74:
 812 003c 0446     		mov	r4, r0
 813              	.LVL75:
 371:Core/Src/main.c ****     getStatusName(a);
 814              		.loc 1 371 5 is_stmt 1 discriminator 1 view .LVU156
 815 003e 0D48     		ldr	r0, .L54+24
 816 0040 FFF7FEFF 		bl	printf
 817              	.LVL76:
 372:Core/Src/main.c ****     vTaskResume( Task03Handle );
 818              		.loc 1 372 5 discriminator 1 view .LVU157
 819 0044 2046     		mov	r0, r4
 820 0046 FFF7FEFF 		bl	getStatusName
 821              	.LVL77:
 373:Core/Src/main.c ****     vTaskDelay(3000);
 822              		.loc 1 373 5 discriminator 1 view .LVU158
 823 004a 2868     		ldr	r0, [r5]
 824 004c FFF7FEFF 		bl	vTaskResume
 825              	.LVL78:
 374:Core/Src/main.c ****   }
 826              		.loc 1 374 5 discriminator 1 view .LVU159
 827 0050 40F6B830 		movw	r0, #3000
 828 0054 FFF7FEFF 		bl	vTaskDelay
ARM GAS  /tmp/cc3GprpR.s 			page 26


 829              	.LVL79:
 830              	.LBE10:
 358:Core/Src/main.c ****   {
 831              		.loc 1 358 8 discriminator 1 view .LVU160
 832 0058 D3E7     		b	.L52
 833              	.L55:
 834 005a 00BF     		.align	2
 835              	.L54:
 836 005c 00000000 		.word	.LC13
 837 0060 00000000 		.word	.LANCHOR2
 838 0064 20000000 		.word	.LC10
 839 0068 00000000 		.word	.LANCHOR3
 840 006c 28000000 		.word	.LC11
 841 0070 00000000 		.word	.LANCHOR4
 842 0074 30000000 		.word	.LC12
 843              		.cfi_endproc
 844              	.LFE234:
 846              		.section	.rodata.StartTask05.str1.4,"aMS",%progbits,1
 847              		.align	2
 848              	.LC14:
 849 0000 5F5F5F5F 		.ascii	"_____I N   T A S K   5_____\015\012\015\000"
 849      5F49204E 
 849      20202054 
 849      20412053 
 849      204B2020 
 850 001f 00       		.align	2
 851              	.LC16:
 852 0020 2D2D2D2D 		.ascii	"------------TASK LIST------------------\015\000"
 852      2D2D2D2D 
 852      2D2D2D2D 
 852      5441534B 
 852      204C4953 
 853 0049 000000   		.align	2
 854              	.LC17:
 855 004c 6E6F206F 		.ascii	"no of tasks %d\015\012\000"
 855      66207461 
 855      736B7320 
 855      25640D0A 
 855      00
 856 005d 000000   		.align	2
 857              	.LC18:
 858 0060 2D2D2D2D 		.ascii	"--------------------------------------\015\000"
 858      2D2D2D2D 
 858      2D2D2D2D 
 858      2D2D2D2D 
 858      2D2D2D2D 
 859              		.align	2
 860              	.LC19:
 861 0088 7461736B 		.ascii	"tasks    state      prioriy     stack   number\015\000"
 861      73202020 
 861      20737461 
 861      74652020 
 861      20202020 
 862              		.align	2
 863              	.LC20:
 864 00b8 25730D0A 		.ascii	"%s\015\012\000"
 864      00
ARM GAS  /tmp/cc3GprpR.s 			page 27


 865 00bd 000000   		.align	2
 866              	.LC15:
 867 00c0 1B5B324A 		.ascii	"\033[2J\033[H\000"
 867      1B5B4800 
 868              		.section	.text.StartTask05,"ax",%progbits
 869              		.align	1
 870              		.global	StartTask05
 871              		.syntax unified
 872              		.thumb
 873              		.thumb_func
 875              	StartTask05:
 876              	.LFB235:
 379:Core/Src/main.c ****     
 877              		.loc 1 379 1 view -0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 8
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              	.LVL80:
 379:Core/Src/main.c ****     
 882              		.loc 1 379 1 is_stmt 0 view .LVU162
 883 0000 70B5     		push	{r4, r5, r6, lr}
 884              	.LCFI18:
 885              		.cfi_def_cfa_offset 16
 886              		.cfi_offset 4, -16
 887              		.cfi_offset 5, -12
 888              		.cfi_offset 6, -8
 889              		.cfi_offset 14, -4
 890 0002 82B0     		sub	sp, sp, #8
 891              	.LCFI19:
 892              		.cfi_def_cfa_offset 24
 893              	.LVL81:
 894              	.L57:
 381:Core/Src/main.c ****     {
 895              		.loc 1 381 5 is_stmt 1 view .LVU163
 896              	.LBB11:
 383:Core/Src/main.c ****     
 897              		.loc 1 383 5 view .LVU164
 898 0004 3248     		ldr	r0, .L60
 899 0006 FFF7FEFF 		bl	puts
 900              	.LVL82:
 385:Core/Src/main.c ****     printf("task 3 "); 
 901              		.loc 1 385 5 view .LVU165
 385:Core/Src/main.c ****     printf("task 3 "); 
 902              		.loc 1 385 20 is_stmt 0 view .LVU166
 903 000a 324E     		ldr	r6, .L60+4
 904 000c 3068     		ldr	r0, [r6]
 905 000e FFF7FEFF 		bl	eTaskGetState
 906              	.LVL83:
 907 0012 0446     		mov	r4, r0
 908              	.LVL84:
 386:Core/Src/main.c ****     getStatusName(a);
 909              		.loc 1 386 5 is_stmt 1 view .LVU167
 910 0014 3048     		ldr	r0, .L60+8
 911 0016 FFF7FEFF 		bl	printf
 912              	.LVL85:
 387:Core/Src/main.c ****     a = eTaskGetState(  Task04Handle );
 913              		.loc 1 387 5 view .LVU168
ARM GAS  /tmp/cc3GprpR.s 			page 28


 914 001a 2046     		mov	r0, r4
 915 001c FFF7FEFF 		bl	getStatusName
 916              	.LVL86:
 388:Core/Src/main.c ****     printf("task 4 "); 
 917              		.loc 1 388 5 view .LVU169
 388:Core/Src/main.c ****     printf("task 4 "); 
 918              		.loc 1 388 9 is_stmt 0 view .LVU170
 919 0020 2E4D     		ldr	r5, .L60+12
 920 0022 2868     		ldr	r0, [r5]
 921 0024 FFF7FEFF 		bl	eTaskGetState
 922              	.LVL87:
 923 0028 0446     		mov	r4, r0
 924              	.LVL88:
 389:Core/Src/main.c ****     getStatusName(a);
 925              		.loc 1 389 5 is_stmt 1 view .LVU171
 926 002a 2D48     		ldr	r0, .L60+16
 927 002c FFF7FEFF 		bl	printf
 928              	.LVL89:
 390:Core/Src/main.c ****     a = eTaskGetState(  Task05Handle );
 929              		.loc 1 390 5 view .LVU172
 930 0030 2046     		mov	r0, r4
 931 0032 FFF7FEFF 		bl	getStatusName
 932              	.LVL90:
 391:Core/Src/main.c ****     printf("task 5 "); 
 933              		.loc 1 391 5 view .LVU173
 391:Core/Src/main.c ****     printf("task 5 "); 
 934              		.loc 1 391 9 is_stmt 0 view .LVU174
 935 0036 2B4B     		ldr	r3, .L60+20
 936 0038 1868     		ldr	r0, [r3]
 937 003a FFF7FEFF 		bl	eTaskGetState
 938              	.LVL91:
 939 003e 0446     		mov	r4, r0
 940              	.LVL92:
 392:Core/Src/main.c ****     getStatusName(a);
 941              		.loc 1 392 5 is_stmt 1 view .LVU175
 942 0040 2948     		ldr	r0, .L60+24
 943 0042 FFF7FEFF 		bl	printf
 944              	.LVL93:
 393:Core/Src/main.c ****     vTaskSuspend( Task03Handle );
 945              		.loc 1 393 5 view .LVU176
 946 0046 2046     		mov	r0, r4
 947 0048 FFF7FEFF 		bl	getStatusName
 948              	.LVL94:
 394:Core/Src/main.c ****     vTaskResume( Task04Handle );
 949              		.loc 1 394 5 view .LVU177
 950 004c 3068     		ldr	r0, [r6]
 951 004e FFF7FEFF 		bl	vTaskSuspend
 952              	.LVL95:
 395:Core/Src/main.c ****     vTaskDelay(3000);
 953              		.loc 1 395 5 view .LVU178
 954 0052 2868     		ldr	r0, [r5]
 955 0054 FFF7FEFF 		bl	vTaskResume
 956              	.LVL96:
 396:Core/Src/main.c ****     
 957              		.loc 1 396 5 view .LVU179
 958 0058 40F6B830 		movw	r0, #3000
 959 005c FFF7FEFF 		bl	vTaskDelay
ARM GAS  /tmp/cc3GprpR.s 			page 29


 960              	.LVL97:
 398:Core/Src/main.c ****       char clear_screen[] = "\033[2J\033[H";
 961              		.loc 1 398 5 view .LVU180
 398:Core/Src/main.c ****       char clear_screen[] = "\033[2J\033[H";
 962              		.loc 1 398 20 is_stmt 0 view .LVU181
 963 0060 224B     		ldr	r3, .L60+28
 964 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 398:Core/Src/main.c ****       char clear_screen[] = "\033[2J\033[H";
 965              		.loc 1 398 8 view .LVU182
 966 0064 012B     		cmp	r3, #1
 967 0066 CDD1     		bne	.L57
 968              	.LBB12:
 399:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 969              		.loc 1 399 7 is_stmt 1 view .LVU183
 399:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 970              		.loc 1 399 12 is_stmt 0 view .LVU184
 971 0068 214B     		ldr	r3, .L60+32
 972 006a 6C46     		mov	r4, sp
 973              	.LVL98:
 399:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 974              		.loc 1 399 12 view .LVU185
 975 006c 93E80300 		ldm	r3, {r0, r1}
 976 0070 84E80300 		stm	r4, {r0, r1}
 400:Core/Src/main.c ****       
 977              		.loc 1 400 7 is_stmt 1 view .LVU186
 978 0074 4FF6FF73 		movw	r3, #65535
 979 0078 0822     		movs	r2, #8
 980 007a 2146     		mov	r1, r4
 981 007c 1D48     		ldr	r0, .L60+36
 982 007e FFF7FEFF 		bl	HAL_UART_Transmit
 983              	.LVL99:
 402:Core/Src/main.c ****       vTaskList(TaskList_Buffer);
 984              		.loc 1 402 7 view .LVU187
 985 0082 1D4D     		ldr	r5, .L60+40
 986 0084 3222     		movs	r2, #50
 987 0086 0021     		movs	r1, #0
 988 0088 2846     		mov	r0, r5
 989 008a FFF7FEFF 		bl	memset
 990              	.LVL100:
 403:Core/Src/main.c ****       printf("------------TASK LIST------------------\r\n");
 991              		.loc 1 403 7 view .LVU188
 992 008e 2846     		mov	r0, r5
 993 0090 FFF7FEFF 		bl	vTaskList
 994              	.LVL101:
 404:Core/Src/main.c ****       printf("no of tasks %d\r\n", uxTaskGetNumberOfTasks());
 995              		.loc 1 404 7 view .LVU189
 996 0094 1948     		ldr	r0, .L60+44
 997 0096 FFF7FEFF 		bl	puts
 998              	.LVL102:
 405:Core/Src/main.c ****       printf("--------------------------------------\r\n");
 999              		.loc 1 405 7 view .LVU190
 1000 009a FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1001              	.LVL103:
 1002 009e 0146     		mov	r1, r0
 1003 00a0 1748     		ldr	r0, .L60+48
 1004 00a2 FFF7FEFF 		bl	printf
 1005              	.LVL104:
ARM GAS  /tmp/cc3GprpR.s 			page 30


 406:Core/Src/main.c ****       printf("tasks    state      prioriy     stack   number\r\n");
 1006              		.loc 1 406 7 view .LVU191
 1007 00a6 174C     		ldr	r4, .L60+52
 1008 00a8 2046     		mov	r0, r4
 1009 00aa FFF7FEFF 		bl	puts
 1010              	.LVL105:
 407:Core/Src/main.c ****       printf("--------------------------------------\r\n");
 1011              		.loc 1 407 7 view .LVU192
 1012 00ae 1648     		ldr	r0, .L60+56
 1013 00b0 FFF7FEFF 		bl	puts
 1014              	.LVL106:
 408:Core/Src/main.c ****       printf("%s\r\n",TaskList_Buffer); 
 1015              		.loc 1 408 7 view .LVU193
 1016 00b4 2046     		mov	r0, r4
 1017 00b6 FFF7FEFF 		bl	puts
 1018              	.LVL107:
 409:Core/Src/main.c ****       printf("--------------------------------------\r\n");
 1019              		.loc 1 409 7 view .LVU194
 1020 00ba 2946     		mov	r1, r5
 1021 00bc 1348     		ldr	r0, .L60+60
 1022 00be FFF7FEFF 		bl	printf
 1023              	.LVL108:
 410:Core/Src/main.c ****       ClrScrFlag = 0;
 1024              		.loc 1 410 7 view .LVU195
 1025 00c2 2046     		mov	r0, r4
 1026 00c4 FFF7FEFF 		bl	puts
 1027              	.LVL109:
 411:Core/Src/main.c ****       
 1028              		.loc 1 411 7 view .LVU196
 411:Core/Src/main.c ****       
 1029              		.loc 1 411 18 is_stmt 0 view .LVU197
 1030 00c8 084B     		ldr	r3, .L60+28
 1031 00ca 0022     		movs	r2, #0
 1032 00cc 1A70     		strb	r2, [r3]
 1033 00ce 99E7     		b	.L57
 1034              	.L61:
 1035              		.align	2
 1036              	.L60:
 1037 00d0 00000000 		.word	.LC14
 1038 00d4 00000000 		.word	.LANCHOR2
 1039 00d8 20000000 		.word	.LC10
 1040 00dc 00000000 		.word	.LANCHOR3
 1041 00e0 28000000 		.word	.LC11
 1042 00e4 00000000 		.word	.LANCHOR4
 1043 00e8 30000000 		.word	.LC12
 1044 00ec 00000000 		.word	.LANCHOR1
 1045 00f0 C0000000 		.word	.LC15
 1046 00f4 00000000 		.word	.LANCHOR0
 1047 00f8 00000000 		.word	.LANCHOR5
 1048 00fc 20000000 		.word	.LC16
 1049 0100 4C000000 		.word	.LC17
 1050 0104 60000000 		.word	.LC18
 1051 0108 88000000 		.word	.LC19
 1052 010c B8000000 		.word	.LC20
 1053              	.LBE12:
 1054              	.LBE11:
 1055              		.cfi_endproc
ARM GAS  /tmp/cc3GprpR.s 			page 31


 1056              	.LFE235:
 1058              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1059              		.align	1
 1060              		.global	HAL_TIM_PeriodElapsedCallback
 1061              		.syntax unified
 1062              		.thumb
 1063              		.thumb_func
 1065              	HAL_TIM_PeriodElapsedCallback:
 1066              	.LVL110:
 1067              	.LFB242:
 504:Core/Src/main.c **** /* USER CODE END 4 */
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** /**
 507:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 508:Core/Src/main.c ****   * @note   This function is called  when TIM11 interrupt took place, inside
 509:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 510:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 511:Core/Src/main.c ****   * @param  htim : TIM handle
 512:Core/Src/main.c ****   * @retval None
 513:Core/Src/main.c ****   */
 514:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 515:Core/Src/main.c **** {
 1068              		.loc 1 515 1 is_stmt 1 view -0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              		.loc 1 515 1 is_stmt 0 view .LVU199
 1073 0000 08B5     		push	{r3, lr}
 1074              	.LCFI20:
 1075              		.cfi_def_cfa_offset 8
 1076              		.cfi_offset 3, -8
 1077              		.cfi_offset 14, -4
 516:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 519:Core/Src/main.c ****   if (htim->Instance == TIM11) {
 1078              		.loc 1 519 3 is_stmt 1 view .LVU200
 1079              		.loc 1 519 11 is_stmt 0 view .LVU201
 1080 0002 0268     		ldr	r2, [r0]
 1081              		.loc 1 519 6 view .LVU202
 1082 0004 034B     		ldr	r3, .L66
 1083 0006 9A42     		cmp	r2, r3
 1084 0008 00D0     		beq	.L65
 1085              	.LVL111:
 1086              	.L62:
 520:Core/Src/main.c ****     HAL_IncTick();
 521:Core/Src/main.c ****   }
 522:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 523:Core/Src/main.c **** 
 524:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 525:Core/Src/main.c **** }
 1087              		.loc 1 525 1 view .LVU203
 1088 000a 08BD     		pop	{r3, pc}
 1089              	.LVL112:
 1090              	.L65:
 520:Core/Src/main.c ****     HAL_IncTick();
 1091              		.loc 1 520 5 is_stmt 1 view .LVU204
ARM GAS  /tmp/cc3GprpR.s 			page 32


 1092 000c FFF7FEFF 		bl	HAL_IncTick
 1093              	.LVL113:
 1094              		.loc 1 525 1 is_stmt 0 view .LVU205
 1095 0010 FBE7     		b	.L62
 1096              	.L67:
 1097 0012 00BF     		.align	2
 1098              	.L66:
 1099 0014 00480140 		.word	1073825792
 1100              		.cfi_endproc
 1101              	.LFE242:
 1103              		.section	.text.Error_Handler,"ax",%progbits
 1104              		.align	1
 1105              		.global	Error_Handler
 1106              		.syntax unified
 1107              		.thumb
 1108              		.thumb_func
 1110              	Error_Handler:
 1111              	.LFB243:
 526:Core/Src/main.c **** 
 527:Core/Src/main.c **** /**
 528:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 529:Core/Src/main.c ****   * @retval None
 530:Core/Src/main.c ****   */
 531:Core/Src/main.c **** void Error_Handler(void)
 532:Core/Src/main.c **** {
 1112              		.loc 1 532 1 is_stmt 1 view -0
 1113              		.cfi_startproc
 1114              		@ Volatile: function does not return.
 1115              		@ args = 0, pretend = 0, frame = 0
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 1117              		@ link register save eliminated.
 533:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 534:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 535:Core/Src/main.c ****   __disable_irq();
 1118              		.loc 1 535 3 view .LVU207
 1119              	.LBB13:
 1120              	.LBI13:
 1121              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/cc3GprpR.s 			page 33


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/cc3GprpR.s 			page 34


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  /tmp/cc3GprpR.s 			page 35


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
ARM GAS  /tmp/cc3GprpR.s 			page 36


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  /tmp/cc3GprpR.s 			page 37


 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc3GprpR.s 			page 38


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/cc3GprpR.s 			page 39


 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  /tmp/cc3GprpR.s 			page 40


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc3GprpR.s 			page 41


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cc3GprpR.s 			page 42


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
ARM GAS  /tmp/cc3GprpR.s 			page 43


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc3GprpR.s 			page 44


 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  /tmp/cc3GprpR.s 			page 45


 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/cc3GprpR.s 			page 46


 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/cc3GprpR.s 			page 47


 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc3GprpR.s 			page 48


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc3GprpR.s 			page 49


 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1122              		.loc 2 960 27 view .LVU208
 1123              	.LBB14:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1124              		.loc 2 962 3 view .LVU209
 1125              		.syntax unified
 1126              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1127 0000 72B6     		cpsid i
 1128              	@ 0 "" 2
 1129              		.thumb
 1130              		.syntax unified
 1131              	.L69:
 1132              	.LBE14:
 1133              	.LBE13:
 536:Core/Src/main.c ****   while (1)
 1134              		.loc 1 536 3 discriminator 1 view .LVU210
 537:Core/Src/main.c ****   {
 538:Core/Src/main.c ****   }
 1135              		.loc 1 538 3 discriminator 1 view .LVU211
 536:Core/Src/main.c ****   while (1)
 1136              		.loc 1 536 9 discriminator 1 view .LVU212
 1137 0002 FEE7     		b	.L69
 1138              		.cfi_endproc
 1139              	.LFE243:
 1141              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1142              		.align	1
 1143              		.syntax unified
 1144              		.thumb
ARM GAS  /tmp/cc3GprpR.s 			page 50


 1145              		.thumb_func
 1147              	MX_ADC1_Init:
 1148              	.LFB229:
 205:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 1149              		.loc 1 205 1 view -0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 16
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153 0000 00B5     		push	{lr}
 1154              	.LCFI21:
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 14, -4
 1157 0002 85B0     		sub	sp, sp, #20
 1158              	.LCFI22:
 1159              		.cfi_def_cfa_offset 24
 210:Core/Src/main.c **** 
 1160              		.loc 1 210 3 view .LVU214
 210:Core/Src/main.c **** 
 1161              		.loc 1 210 26 is_stmt 0 view .LVU215
 1162 0004 0023     		movs	r3, #0
 1163 0006 0093     		str	r3, [sp]
 1164 0008 0193     		str	r3, [sp, #4]
 1165 000a 0293     		str	r3, [sp, #8]
 1166 000c 0393     		str	r3, [sp, #12]
 218:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1167              		.loc 1 218 3 is_stmt 1 view .LVU216
 218:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1168              		.loc 1 218 18 is_stmt 0 view .LVU217
 1169 000e 1448     		ldr	r0, .L76
 1170 0010 144A     		ldr	r2, .L76+4
 1171 0012 0260     		str	r2, [r0]
 219:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1172              		.loc 1 219 3 is_stmt 1 view .LVU218
 219:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1173              		.loc 1 219 29 is_stmt 0 view .LVU219
 1174 0014 4FF48032 		mov	r2, #65536
 1175 0018 4260     		str	r2, [r0, #4]
 220:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1176              		.loc 1 220 3 is_stmt 1 view .LVU220
 220:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1177              		.loc 1 220 25 is_stmt 0 view .LVU221
 1178 001a 8360     		str	r3, [r0, #8]
 221:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1179              		.loc 1 221 3 is_stmt 1 view .LVU222
 221:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1180              		.loc 1 221 27 is_stmt 0 view .LVU223
 1181 001c 0122     		movs	r2, #1
 1182 001e 0261     		str	r2, [r0, #16]
 222:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1183              		.loc 1 222 3 is_stmt 1 view .LVU224
 222:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1184              		.loc 1 222 33 is_stmt 0 view .LVU225
 1185 0020 0276     		strb	r2, [r0, #24]
 223:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1186              		.loc 1 223 3 is_stmt 1 view .LVU226
 223:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1187              		.loc 1 223 36 is_stmt 0 view .LVU227
ARM GAS  /tmp/cc3GprpR.s 			page 51


 1188 0022 80F82030 		strb	r3, [r0, #32]
 224:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1189              		.loc 1 224 3 is_stmt 1 view .LVU228
 224:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1190              		.loc 1 224 35 is_stmt 0 view .LVU229
 1191 0026 C362     		str	r3, [r0, #44]
 225:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1192              		.loc 1 225 3 is_stmt 1 view .LVU230
 225:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1193              		.loc 1 225 31 is_stmt 0 view .LVU231
 1194 0028 0F49     		ldr	r1, .L76+8
 1195 002a 8162     		str	r1, [r0, #40]
 226:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1196              		.loc 1 226 3 is_stmt 1 view .LVU232
 226:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1197              		.loc 1 226 24 is_stmt 0 view .LVU233
 1198 002c C360     		str	r3, [r0, #12]
 227:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1199              		.loc 1 227 3 is_stmt 1 view .LVU234
 227:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1200              		.loc 1 227 30 is_stmt 0 view .LVU235
 1201 002e C261     		str	r2, [r0, #28]
 228:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1202              		.loc 1 228 3 is_stmt 1 view .LVU236
 228:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1203              		.loc 1 228 36 is_stmt 0 view .LVU237
 1204 0030 80F83020 		strb	r2, [r0, #48]
 229:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1205              		.loc 1 229 3 is_stmt 1 view .LVU238
 229:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1206              		.loc 1 229 27 is_stmt 0 view .LVU239
 1207 0034 4261     		str	r2, [r0, #20]
 230:Core/Src/main.c ****   {
 1208              		.loc 1 230 3 is_stmt 1 view .LVU240
 230:Core/Src/main.c ****   {
 1209              		.loc 1 230 7 is_stmt 0 view .LVU241
 1210 0036 FFF7FEFF 		bl	HAL_ADC_Init
 1211              	.LVL114:
 230:Core/Src/main.c ****   {
 1212              		.loc 1 230 6 view .LVU242
 1213 003a 68B9     		cbnz	r0, .L74
 237:Core/Src/main.c ****   sConfig.Rank = 1;
 1214              		.loc 1 237 3 is_stmt 1 view .LVU243
 237:Core/Src/main.c ****   sConfig.Rank = 1;
 1215              		.loc 1 237 19 is_stmt 0 view .LVU244
 1216 003c 0B4B     		ldr	r3, .L76+12
 1217 003e 0093     		str	r3, [sp]
 238:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1218              		.loc 1 238 3 is_stmt 1 view .LVU245
 238:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1219              		.loc 1 238 16 is_stmt 0 view .LVU246
 1220 0040 0123     		movs	r3, #1
 1221 0042 0193     		str	r3, [sp, #4]
 239:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1222              		.loc 1 239 3 is_stmt 1 view .LVU247
 239:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1223              		.loc 1 239 24 is_stmt 0 view .LVU248
ARM GAS  /tmp/cc3GprpR.s 			page 52


 1224 0044 0723     		movs	r3, #7
 1225 0046 0293     		str	r3, [sp, #8]
 240:Core/Src/main.c ****   {
 1226              		.loc 1 240 3 is_stmt 1 view .LVU249
 240:Core/Src/main.c ****   {
 1227              		.loc 1 240 7 is_stmt 0 view .LVU250
 1228 0048 6946     		mov	r1, sp
 1229 004a 0548     		ldr	r0, .L76
 1230 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1231              	.LVL115:
 240:Core/Src/main.c ****   {
 1232              		.loc 1 240 6 view .LVU251
 1233 0050 20B9     		cbnz	r0, .L75
 247:Core/Src/main.c **** 
 1234              		.loc 1 247 1 view .LVU252
 1235 0052 05B0     		add	sp, sp, #20
 1236              	.LCFI23:
 1237              		.cfi_remember_state
 1238              		.cfi_def_cfa_offset 4
 1239              		@ sp needed
 1240 0054 5DF804FB 		ldr	pc, [sp], #4
 1241              	.L74:
 1242              	.LCFI24:
 1243              		.cfi_restore_state
 232:Core/Src/main.c ****   }
 1244              		.loc 1 232 5 is_stmt 1 view .LVU253
 1245 0058 FFF7FEFF 		bl	Error_Handler
 1246              	.LVL116:
 1247              	.L75:
 242:Core/Src/main.c ****   }
 1248              		.loc 1 242 5 view .LVU254
 1249 005c FFF7FEFF 		bl	Error_Handler
 1250              	.LVL117:
 1251              	.L77:
 1252              		.align	2
 1253              	.L76:
 1254 0060 00000000 		.word	.LANCHOR6
 1255 0064 00200140 		.word	1073815552
 1256 0068 0100000F 		.word	251658241
 1257 006c 12000010 		.word	268435474
 1258              		.cfi_endproc
 1259              	.LFE229:
 1261              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1262              		.align	1
 1263              		.syntax unified
 1264              		.thumb
 1265              		.thumb_func
 1267              	MX_USART2_UART_Init:
 1268              	.LFB230:
 255:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 1269              		.loc 1 255 1 view -0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 0
 1272              		@ frame_needed = 0, uses_anonymous_args = 0
 1273 0000 08B5     		push	{r3, lr}
 1274              	.LCFI25:
 1275              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc3GprpR.s 			page 53


 1276              		.cfi_offset 3, -8
 1277              		.cfi_offset 14, -4
 263:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1278              		.loc 1 263 3 view .LVU256
 263:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1279              		.loc 1 263 19 is_stmt 0 view .LVU257
 1280 0002 0A48     		ldr	r0, .L82
 1281 0004 0A4B     		ldr	r3, .L82+4
 1282 0006 0360     		str	r3, [r0]
 264:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1283              		.loc 1 264 3 is_stmt 1 view .LVU258
 264:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1284              		.loc 1 264 24 is_stmt 0 view .LVU259
 1285 0008 4FF4E133 		mov	r3, #115200
 1286 000c 4360     		str	r3, [r0, #4]
 265:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1287              		.loc 1 265 3 is_stmt 1 view .LVU260
 265:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1288              		.loc 1 265 26 is_stmt 0 view .LVU261
 1289 000e 0023     		movs	r3, #0
 1290 0010 8360     		str	r3, [r0, #8]
 266:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1291              		.loc 1 266 3 is_stmt 1 view .LVU262
 266:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1292              		.loc 1 266 24 is_stmt 0 view .LVU263
 1293 0012 C360     		str	r3, [r0, #12]
 267:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1294              		.loc 1 267 3 is_stmt 1 view .LVU264
 267:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1295              		.loc 1 267 22 is_stmt 0 view .LVU265
 1296 0014 0361     		str	r3, [r0, #16]
 268:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1297              		.loc 1 268 3 is_stmt 1 view .LVU266
 268:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1298              		.loc 1 268 20 is_stmt 0 view .LVU267
 1299 0016 0C22     		movs	r2, #12
 1300 0018 4261     		str	r2, [r0, #20]
 269:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1301              		.loc 1 269 3 is_stmt 1 view .LVU268
 269:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1302              		.loc 1 269 25 is_stmt 0 view .LVU269
 1303 001a 8361     		str	r3, [r0, #24]
 270:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1304              		.loc 1 270 3 is_stmt 1 view .LVU270
 270:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1305              		.loc 1 270 28 is_stmt 0 view .LVU271
 1306 001c C361     		str	r3, [r0, #28]
 271:Core/Src/main.c ****   {
 1307              		.loc 1 271 3 is_stmt 1 view .LVU272
 271:Core/Src/main.c ****   {
 1308              		.loc 1 271 7 is_stmt 0 view .LVU273
 1309 001e FFF7FEFF 		bl	HAL_UART_Init
 1310              	.LVL118:
 271:Core/Src/main.c ****   {
 1311              		.loc 1 271 6 view .LVU274
 1312 0022 00B9     		cbnz	r0, .L81
 278:Core/Src/main.c **** 
ARM GAS  /tmp/cc3GprpR.s 			page 54


 1313              		.loc 1 278 1 view .LVU275
 1314 0024 08BD     		pop	{r3, pc}
 1315              	.L81:
 273:Core/Src/main.c ****   }
 1316              		.loc 1 273 5 is_stmt 1 view .LVU276
 1317 0026 FFF7FEFF 		bl	Error_Handler
 1318              	.LVL119:
 1319              	.L83:
 1320 002a 00BF     		.align	2
 1321              	.L82:
 1322 002c 00000000 		.word	.LANCHOR0
 1323 0030 00440040 		.word	1073759232
 1324              		.cfi_endproc
 1325              	.LFE230:
 1327              		.section	.text.SystemClock_Config,"ax",%progbits
 1328              		.align	1
 1329              		.global	SystemClock_Config
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1334              	SystemClock_Config:
 1335              	.LFB228:
 158:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1336              		.loc 1 158 1 view -0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 80
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340 0000 00B5     		push	{lr}
 1341              	.LCFI26:
 1342              		.cfi_def_cfa_offset 4
 1343              		.cfi_offset 14, -4
 1344 0002 95B0     		sub	sp, sp, #84
 1345              	.LCFI27:
 1346              		.cfi_def_cfa_offset 88
 159:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1347              		.loc 1 159 3 view .LVU278
 159:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1348              		.loc 1 159 22 is_stmt 0 view .LVU279
 1349 0004 3022     		movs	r2, #48
 1350 0006 0021     		movs	r1, #0
 1351 0008 08A8     		add	r0, sp, #32
 1352 000a FFF7FEFF 		bl	memset
 1353              	.LVL120:
 160:Core/Src/main.c **** 
 1354              		.loc 1 160 3 is_stmt 1 view .LVU280
 160:Core/Src/main.c **** 
 1355              		.loc 1 160 22 is_stmt 0 view .LVU281
 1356 000e 0023     		movs	r3, #0
 1357 0010 0393     		str	r3, [sp, #12]
 1358 0012 0493     		str	r3, [sp, #16]
 1359 0014 0593     		str	r3, [sp, #20]
 1360 0016 0693     		str	r3, [sp, #24]
 1361 0018 0793     		str	r3, [sp, #28]
 164:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1362              		.loc 1 164 3 is_stmt 1 view .LVU282
 1363              	.LBB15:
 164:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
ARM GAS  /tmp/cc3GprpR.s 			page 55


 1364              		.loc 1 164 3 view .LVU283
 1365 001a 0193     		str	r3, [sp, #4]
 164:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1366              		.loc 1 164 3 view .LVU284
 1367 001c 1E4A     		ldr	r2, .L90
 1368 001e 116C     		ldr	r1, [r2, #64]
 1369 0020 41F08051 		orr	r1, r1, #268435456
 1370 0024 1164     		str	r1, [r2, #64]
 164:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1371              		.loc 1 164 3 view .LVU285
 1372 0026 126C     		ldr	r2, [r2, #64]
 1373 0028 02F08052 		and	r2, r2, #268435456
 1374 002c 0192     		str	r2, [sp, #4]
 164:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1375              		.loc 1 164 3 view .LVU286
 1376 002e 019A     		ldr	r2, [sp, #4]
 1377              	.LBE15:
 164:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1378              		.loc 1 164 3 view .LVU287
 165:Core/Src/main.c **** 
 1379              		.loc 1 165 3 view .LVU288
 1380              	.LBB16:
 165:Core/Src/main.c **** 
 1381              		.loc 1 165 3 view .LVU289
 1382 0030 0293     		str	r3, [sp, #8]
 165:Core/Src/main.c **** 
 1383              		.loc 1 165 3 view .LVU290
 1384 0032 1A4A     		ldr	r2, .L90+4
 1385 0034 1168     		ldr	r1, [r2]
 1386 0036 41F44041 		orr	r1, r1, #49152
 1387 003a 1160     		str	r1, [r2]
 165:Core/Src/main.c **** 
 1388              		.loc 1 165 3 view .LVU291
 1389 003c 1268     		ldr	r2, [r2]
 1390 003e 02F44042 		and	r2, r2, #49152
 1391 0042 0292     		str	r2, [sp, #8]
 165:Core/Src/main.c **** 
 1392              		.loc 1 165 3 view .LVU292
 1393 0044 029A     		ldr	r2, [sp, #8]
 1394              	.LBE16:
 165:Core/Src/main.c **** 
 1395              		.loc 1 165 3 view .LVU293
 170:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1396              		.loc 1 170 3 view .LVU294
 170:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1397              		.loc 1 170 36 is_stmt 0 view .LVU295
 1398 0046 0221     		movs	r1, #2
 1399 0048 0891     		str	r1, [sp, #32]
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1400              		.loc 1 171 3 is_stmt 1 view .LVU296
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1401              		.loc 1 171 30 is_stmt 0 view .LVU297
 1402 004a 0122     		movs	r2, #1
 1403 004c 0B92     		str	r2, [sp, #44]
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1404              		.loc 1 172 3 is_stmt 1 view .LVU298
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/cc3GprpR.s 			page 56


 1405              		.loc 1 172 41 is_stmt 0 view .LVU299
 1406 004e 1022     		movs	r2, #16
 1407 0050 0C92     		str	r2, [sp, #48]
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1408              		.loc 1 173 3 is_stmt 1 view .LVU300
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1409              		.loc 1 173 34 is_stmt 0 view .LVU301
 1410 0052 0E91     		str	r1, [sp, #56]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1411              		.loc 1 174 3 is_stmt 1 view .LVU302
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1412              		.loc 1 174 35 is_stmt 0 view .LVU303
 1413 0054 0F93     		str	r3, [sp, #60]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1414              		.loc 1 175 3 is_stmt 1 view .LVU304
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1415              		.loc 1 175 30 is_stmt 0 view .LVU305
 1416 0056 1092     		str	r2, [sp, #64]
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1417              		.loc 1 176 3 is_stmt 1 view .LVU306
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1418              		.loc 1 176 30 is_stmt 0 view .LVU307
 1419 0058 4FF4A873 		mov	r3, #336
 1420 005c 1193     		str	r3, [sp, #68]
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1421              		.loc 1 177 3 is_stmt 1 view .LVU308
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1422              		.loc 1 177 30 is_stmt 0 view .LVU309
 1423 005e 0423     		movs	r3, #4
 1424 0060 1293     		str	r3, [sp, #72]
 178:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1425              		.loc 1 178 3 is_stmt 1 view .LVU310
 178:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1426              		.loc 1 178 30 is_stmt 0 view .LVU311
 1427 0062 1393     		str	r3, [sp, #76]
 179:Core/Src/main.c ****   {
 1428              		.loc 1 179 3 is_stmt 1 view .LVU312
 179:Core/Src/main.c ****   {
 1429              		.loc 1 179 7 is_stmt 0 view .LVU313
 1430 0064 08A8     		add	r0, sp, #32
 1431 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1432              	.LVL121:
 179:Core/Src/main.c ****   {
 1433              		.loc 1 179 6 view .LVU314
 1434 006a 80B9     		cbnz	r0, .L88
 186:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1435              		.loc 1 186 3 is_stmt 1 view .LVU315
 186:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1436              		.loc 1 186 31 is_stmt 0 view .LVU316
 1437 006c 0F23     		movs	r3, #15
 1438 006e 0393     		str	r3, [sp, #12]
 188:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1439              		.loc 1 188 3 is_stmt 1 view .LVU317
 188:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1440              		.loc 1 188 34 is_stmt 0 view .LVU318
 1441 0070 0221     		movs	r1, #2
 1442 0072 0491     		str	r1, [sp, #16]
ARM GAS  /tmp/cc3GprpR.s 			page 57


 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1443              		.loc 1 189 3 is_stmt 1 view .LVU319
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1444              		.loc 1 189 35 is_stmt 0 view .LVU320
 1445 0074 0023     		movs	r3, #0
 1446 0076 0593     		str	r3, [sp, #20]
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1447              		.loc 1 190 3 is_stmt 1 view .LVU321
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1448              		.loc 1 190 36 is_stmt 0 view .LVU322
 1449 0078 4FF48052 		mov	r2, #4096
 1450 007c 0692     		str	r2, [sp, #24]
 191:Core/Src/main.c **** 
 1451              		.loc 1 191 3 is_stmt 1 view .LVU323
 191:Core/Src/main.c **** 
 1452              		.loc 1 191 36 is_stmt 0 view .LVU324
 1453 007e 0793     		str	r3, [sp, #28]
 193:Core/Src/main.c ****   {
 1454              		.loc 1 193 3 is_stmt 1 view .LVU325
 193:Core/Src/main.c ****   {
 1455              		.loc 1 193 7 is_stmt 0 view .LVU326
 1456 0080 03A8     		add	r0, sp, #12
 1457 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1458              	.LVL122:
 193:Core/Src/main.c ****   {
 1459              		.loc 1 193 6 view .LVU327
 1460 0086 20B9     		cbnz	r0, .L89
 197:Core/Src/main.c **** 
 1461              		.loc 1 197 1 view .LVU328
 1462 0088 15B0     		add	sp, sp, #84
 1463              	.LCFI28:
 1464              		.cfi_remember_state
 1465              		.cfi_def_cfa_offset 4
 1466              		@ sp needed
 1467 008a 5DF804FB 		ldr	pc, [sp], #4
 1468              	.L88:
 1469              	.LCFI29:
 1470              		.cfi_restore_state
 181:Core/Src/main.c ****   }
 1471              		.loc 1 181 5 is_stmt 1 view .LVU329
 1472 008e FFF7FEFF 		bl	Error_Handler
 1473              	.LVL123:
 1474              	.L89:
 195:Core/Src/main.c ****   }
 1475              		.loc 1 195 5 view .LVU330
 1476 0092 FFF7FEFF 		bl	Error_Handler
 1477              	.LVL124:
 1478              	.L91:
 1479 0096 00BF     		.align	2
 1480              	.L90:
 1481 0098 00380240 		.word	1073887232
 1482 009c 00700040 		.word	1073770496
 1483              		.cfi_endproc
 1484              	.LFE228:
 1486              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1487              		.align	2
 1488              	.LC21:
ARM GAS  /tmp/cc3GprpR.s 			page 58


 1489 0000 5461736B 		.ascii	"Task03\000"
 1489      303300
 1490 0007 00       		.align	2
 1491              	.LC22:
 1492 0008 5461736B 		.ascii	"Task04\000"
 1492      303400
 1493 000f 00       		.align	2
 1494              	.LC23:
 1495 0010 5461736B 		.ascii	"Task05\000"
 1495      303500
 1496 0017 00       		.align	2
 1497              	.LC24:
 1498 0018 7C2A2A20 		.ascii	"|** Start Scheduler **|\015\000"
 1498      53746172 
 1498      74205363 
 1498      68656475 
 1498      6C657220 
 1499              		.section	.text.main,"ax",%progbits
 1500              		.align	1
 1501              		.global	main
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1506              	main:
 1507              	.LFB227:
  91:Core/Src/main.c **** 
 1508              		.loc 1 91 1 view -0
 1509              		.cfi_startproc
 1510              		@ Volatile: function does not return.
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513 0000 00B5     		push	{lr}
 1514              	.LCFI30:
 1515              		.cfi_def_cfa_offset 4
 1516              		.cfi_offset 14, -4
 1517 0002 83B0     		sub	sp, sp, #12
 1518              	.LCFI31:
 1519              		.cfi_def_cfa_offset 16
 100:Core/Src/main.c **** 
 1520              		.loc 1 100 3 view .LVU332
 1521 0004 FFF7FEFF 		bl	HAL_Init
 1522              	.LVL125:
 107:Core/Src/main.c **** 
 1523              		.loc 1 107 3 view .LVU333
 1524 0008 FFF7FEFF 		bl	SystemClock_Config
 1525              	.LVL126:
 114:Core/Src/main.c ****   MX_DMA_Init();
 1526              		.loc 1 114 3 view .LVU334
 1527 000c FFF7FEFF 		bl	MX_GPIO_Init
 1528              	.LVL127:
 115:Core/Src/main.c ****   MX_ADC1_Init();
 1529              		.loc 1 115 3 view .LVU335
 1530 0010 FFF7FEFF 		bl	MX_DMA_Init
 1531              	.LVL128:
 116:Core/Src/main.c ****   MX_USART2_UART_Init();
 1532              		.loc 1 116 3 view .LVU336
 1533 0014 FFF7FEFF 		bl	MX_ADC1_Init
ARM GAS  /tmp/cc3GprpR.s 			page 59


 1534              	.LVL129:
 117:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1535              		.loc 1 117 3 view .LVU337
 1536 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 1537              	.LVL130:
 120:Core/Src/main.c ****   TaskAdd(StartTask04, "Task04", 128*4, NULL, 6, &Task04Handle);
 1538              		.loc 1 120 3 view .LVU338
 1539 001c 134B     		ldr	r3, .L95
 1540 001e 0193     		str	r3, [sp, #4]
 1541 0020 0823     		movs	r3, #8
 1542 0022 0093     		str	r3, [sp]
 1543 0024 0023     		movs	r3, #0
 1544 0026 4FF40072 		mov	r2, #512
 1545 002a 1149     		ldr	r1, .L95+4
 1546 002c 1148     		ldr	r0, .L95+8
 1547 002e FFF7FEFF 		bl	TaskAdd
 1548              	.LVL131:
 121:Core/Src/main.c ****   TaskAdd(StartTask05, "Task05", 128*4, NULL, 4, &Task05Handle);
 1549              		.loc 1 121 3 view .LVU339
 1550 0032 114B     		ldr	r3, .L95+12
 1551 0034 0193     		str	r3, [sp, #4]
 1552 0036 0623     		movs	r3, #6
 1553 0038 0093     		str	r3, [sp]
 1554 003a 0023     		movs	r3, #0
 1555 003c 4FF40072 		mov	r2, #512
 1556 0040 0E49     		ldr	r1, .L95+16
 1557 0042 0F48     		ldr	r0, .L95+20
 1558 0044 FFF7FEFF 		bl	TaskAdd
 1559              	.LVL132:
 122:Core/Src/main.c ****   //  printf("!!Setup!!\r\n");    
 1560              		.loc 1 122 3 view .LVU340
 1561 0048 0E4B     		ldr	r3, .L95+24
 1562 004a 0193     		str	r3, [sp, #4]
 1563 004c 0423     		movs	r3, #4
 1564 004e 0093     		str	r3, [sp]
 1565 0050 0023     		movs	r3, #0
 1566 0052 4FF40072 		mov	r2, #512
 1567 0056 0C49     		ldr	r1, .L95+28
 1568 0058 0C48     		ldr	r0, .L95+32
 1569 005a FFF7FEFF 		bl	TaskAdd
 1570              	.LVL133:
 133:Core/Src/main.c ****   vTaskStartScheduler ();
 1571              		.loc 1 133 3 view .LVU341
 1572 005e 0C48     		ldr	r0, .L95+36
 1573 0060 FFF7FEFF 		bl	puts
 1574              	.LVL134:
 134:Core/Src/main.c ****   
 1575              		.loc 1 134 3 view .LVU342
 1576 0064 FFF7FEFF 		bl	vTaskStartScheduler
 1577              	.LVL135:
 1578              	.L93:
 144:Core/Src/main.c ****   {
 1579              		.loc 1 144 3 discriminator 1 view .LVU343
 149:Core/Src/main.c ****   /* USER CODE END 3 */
 1580              		.loc 1 149 3 discriminator 1 view .LVU344
 144:Core/Src/main.c ****   {
 1581              		.loc 1 144 9 discriminator 1 view .LVU345
ARM GAS  /tmp/cc3GprpR.s 			page 60


 1582 0068 FEE7     		b	.L93
 1583              	.L96:
 1584 006a 00BF     		.align	2
 1585              	.L95:
 1586 006c 00000000 		.word	.LANCHOR2
 1587 0070 00000000 		.word	.LC21
 1588 0074 00000000 		.word	StartTask03
 1589 0078 00000000 		.word	.LANCHOR3
 1590 007c 08000000 		.word	.LC22
 1591 0080 00000000 		.word	StartTask04
 1592 0084 00000000 		.word	.LANCHOR4
 1593 0088 10000000 		.word	.LC23
 1594 008c 00000000 		.word	StartTask05
 1595 0090 18000000 		.word	.LC24
 1596              		.cfi_endproc
 1597              	.LFE227:
 1599              		.global	TaskList_Buffer
 1600              		.global	ClrScrFlag
 1601              		.global	Task05Handle
 1602              		.global	Task04Handle
 1603              		.global	Task03Handle
 1604              		.global	Task02Handle
 1605              		.global	Task01Handle
 1606              		.global	huart2
 1607              		.global	hdma_adc1
 1608              		.global	hadc1
 1609              		.section	.bss.ClrScrFlag,"aw",%nobits
 1610              		.set	.LANCHOR1,. + 0
 1613              	ClrScrFlag:
 1614 0000 00       		.space	1
 1615              		.section	.bss.Task01Handle,"aw",%nobits
 1616              		.align	2
 1619              	Task01Handle:
 1620 0000 00000000 		.space	4
 1621              		.section	.bss.Task02Handle,"aw",%nobits
 1622              		.align	2
 1625              	Task02Handle:
 1626 0000 00000000 		.space	4
 1627              		.section	.bss.Task03Handle,"aw",%nobits
 1628              		.align	2
 1629              		.set	.LANCHOR2,. + 0
 1632              	Task03Handle:
 1633 0000 00000000 		.space	4
 1634              		.section	.bss.Task04Handle,"aw",%nobits
 1635              		.align	2
 1636              		.set	.LANCHOR3,. + 0
 1639              	Task04Handle:
 1640 0000 00000000 		.space	4
 1641              		.section	.bss.Task05Handle,"aw",%nobits
 1642              		.align	2
 1643              		.set	.LANCHOR4,. + 0
 1646              	Task05Handle:
 1647 0000 00000000 		.space	4
 1648              		.section	.bss.TaskList_Buffer,"aw",%nobits
 1649              		.align	2
 1650              		.set	.LANCHOR5,. + 0
 1653              	TaskList_Buffer:
ARM GAS  /tmp/cc3GprpR.s 			page 61


 1654 0000 00000000 		.space	50
 1654      00000000 
 1654      00000000 
 1654      00000000 
 1654      00000000 
 1655              		.section	.bss.hadc1,"aw",%nobits
 1656              		.align	2
 1657              		.set	.LANCHOR6,. + 0
 1660              	hadc1:
 1661 0000 00000000 		.space	72
 1661      00000000 
 1661      00000000 
 1661      00000000 
 1661      00000000 
 1662              		.section	.bss.hdma_adc1,"aw",%nobits
 1663              		.align	2
 1666              	hdma_adc1:
 1667 0000 00000000 		.space	96
 1667      00000000 
 1667      00000000 
 1667      00000000 
 1667      00000000 
 1668              		.section	.bss.huart2,"aw",%nobits
 1669              		.align	2
 1670              		.set	.LANCHOR0,. + 0
 1673              	huart2:
 1674 0000 00000000 		.space	72
 1674      00000000 
 1674      00000000 
 1674      00000000 
 1674      00000000 
 1675              		.text
 1676              	.Letext0:
 1677              		.file 3 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 1678              		.file 4 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 1679              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1680              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1681              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1682              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1683              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1684              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1685              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1686              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1687              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1688              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1689              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1690              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1691              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1692              		.file 18 "/usr/local/arm-none-eabi/include/stdio.h"
 1693              		.file 19 "<built-in>"
 1694              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/cc3GprpR.s 			page 62


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc3GprpR.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc3GprpR.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc3GprpR.s:175    .text.MX_GPIO_Init:00000000000000ac $d
     /tmp/cc3GprpR.s:182    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc3GprpR.s:187    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc3GprpR.s:236    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc3GprpR.s:241    .text.__io_putchar:0000000000000000 $t
     /tmp/cc3GprpR.s:247    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cc3GprpR.s:283    .text.__io_putchar:000000000000001c $d
     /tmp/cc3GprpR.s:288    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cc3GprpR.s:294    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cc3GprpR.s:330    .text.HAL_GPIO_EXTI_Callback:000000000000001c $d
     /tmp/cc3GprpR.s:336    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc3GprpR.s:342    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc3GprpR.s:358    .rodata.TaskAdd.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:365    .text.TaskAdd:0000000000000000 $t
     /tmp/cc3GprpR.s:371    .text.TaskAdd:0000000000000000 TaskAdd
     /tmp/cc3GprpR.s:441    .text.TaskAdd:0000000000000038 $d
     /tmp/cc3GprpR.s:447    .rodata.KillTask.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:451    .text.KillTask:0000000000000000 $t
     /tmp/cc3GprpR.s:457    .text.KillTask:0000000000000000 KillTask
     /tmp/cc3GprpR.s:496    .text.KillTask:0000000000000020 $d
     /tmp/cc3GprpR.s:501    .rodata.getStatusName.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:520    .text.getStatusName:0000000000000000 $t
     /tmp/cc3GprpR.s:526    .text.getStatusName:0000000000000000 getStatusName
     /tmp/cc3GprpR.s:545    .text.getStatusName:000000000000000c $d
     /tmp/cc3GprpR.s:616    .text.getStatusName:0000000000000044 $d
     /tmp/cc3GprpR.s:626    .rodata.StartTask03.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:639    .text.StartTask03:0000000000000000 $t
     /tmp/cc3GprpR.s:645    .text.StartTask03:0000000000000000 StartTask03
     /tmp/cc3GprpR.s:730    .text.StartTask03:000000000000005c $d
     /tmp/cc3GprpR.s:741    .rodata.StartTask04.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:745    .text.StartTask04:0000000000000000 $t
     /tmp/cc3GprpR.s:751    .text.StartTask04:0000000000000000 StartTask04
     /tmp/cc3GprpR.s:836    .text.StartTask04:000000000000005c $d
     /tmp/cc3GprpR.s:847    .rodata.StartTask05.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:869    .text.StartTask05:0000000000000000 $t
     /tmp/cc3GprpR.s:875    .text.StartTask05:0000000000000000 StartTask05
     /tmp/cc3GprpR.s:1037   .text.StartTask05:00000000000000d0 $d
     /tmp/cc3GprpR.s:1059   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc3GprpR.s:1065   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc3GprpR.s:1099   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc3GprpR.s:1104   .text.Error_Handler:0000000000000000 $t
     /tmp/cc3GprpR.s:1110   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc3GprpR.s:1142   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc3GprpR.s:1147   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc3GprpR.s:1254   .text.MX_ADC1_Init:0000000000000060 $d
     /tmp/cc3GprpR.s:1262   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc3GprpR.s:1267   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc3GprpR.s:1322   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/cc3GprpR.s:1328   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc3GprpR.s:1334   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc3GprpR.s:1481   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc3GprpR.s:1487   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc3GprpR.s:1500   .text.main:0000000000000000 $t
ARM GAS  /tmp/cc3GprpR.s 			page 63


     /tmp/cc3GprpR.s:1506   .text.main:0000000000000000 main
     /tmp/cc3GprpR.s:1586   .text.main:000000000000006c $d
     /tmp/cc3GprpR.s:1653   .bss.TaskList_Buffer:0000000000000000 TaskList_Buffer
     /tmp/cc3GprpR.s:1613   .bss.ClrScrFlag:0000000000000000 ClrScrFlag
     /tmp/cc3GprpR.s:1646   .bss.Task05Handle:0000000000000000 Task05Handle
     /tmp/cc3GprpR.s:1639   .bss.Task04Handle:0000000000000000 Task04Handle
     /tmp/cc3GprpR.s:1632   .bss.Task03Handle:0000000000000000 Task03Handle
     /tmp/cc3GprpR.s:1625   .bss.Task02Handle:0000000000000000 Task02Handle
     /tmp/cc3GprpR.s:1619   .bss.Task01Handle:0000000000000000 Task01Handle
     /tmp/cc3GprpR.s:1673   .bss.huart2:0000000000000000 huart2
     /tmp/cc3GprpR.s:1666   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/cc3GprpR.s:1660   .bss.hadc1:0000000000000000 hadc1
     /tmp/cc3GprpR.s:1614   .bss.ClrScrFlag:0000000000000000 $d
     /tmp/cc3GprpR.s:1616   .bss.Task01Handle:0000000000000000 $d
     /tmp/cc3GprpR.s:1622   .bss.Task02Handle:0000000000000000 $d
     /tmp/cc3GprpR.s:1628   .bss.Task03Handle:0000000000000000 $d
     /tmp/cc3GprpR.s:1635   .bss.Task04Handle:0000000000000000 $d
     /tmp/cc3GprpR.s:1642   .bss.Task05Handle:0000000000000000 $d
     /tmp/cc3GprpR.s:1649   .bss.TaskList_Buffer:0000000000000000 $d
     /tmp/cc3GprpR.s:1656   .bss.hadc1:0000000000000000 $d
     /tmp/cc3GprpR.s:1663   .bss.hdma_adc1:0000000000000000 $d
     /tmp/cc3GprpR.s:1669   .bss.huart2:0000000000000000 $d
     /tmp/cc3GprpR.s:550    .text.getStatusName:0000000000000011 $d
     /tmp/cc3GprpR.s:550    .text.getStatusName:0000000000000012 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
HAL_GPIO_TogglePin
xTaskCreate
printf
pcTaskGetName
vTaskDelete
puts
eTaskGetState
vTaskSuspend
vTaskDelay
vTaskResume
memset
vTaskList
uxTaskGetNumberOfTasks
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
vTaskStartScheduler
