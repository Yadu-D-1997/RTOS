ARM GAS  /tmp/cc6c1qkn.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB232:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** 
   2:Core/Src/main.c **** /* USER CODE BEGIN Header */
   3:Core/Src/main.c **** /**
   4:Core/Src/main.c ****   ******************************************************************************
   5:Core/Src/main.c ****   * @file           : main.c
   6:Core/Src/main.c ****   * @brief          : Main program body
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "FreeRTOS.h"
  26:Core/Src/main.c **** #include "task.h"
  27:Core/Src/main.c **** #include "timers.h"
  28:Core/Src/main.c **** #include "queue.h"
  29:Core/Src/main.c **** #include "semphr.h"
  30:Core/Src/main.c **** #include "event_groups.h"
  31:Core/Src/main.c **** #include <stdio.h>
ARM GAS  /tmp/cc6c1qkn.s 			page 2


  32:Core/Src/main.c **** #include <string.h>
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  53:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  54:Core/Src/main.c **** UART_HandleTypeDef huart2;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** TaskHandle_t Task01Handle = NULL;
  58:Core/Src/main.c **** TaskHandle_t Task02Handle = NULL;
  59:Core/Src/main.c **** TaskHandle_t Task03Handle = NULL;
  60:Core/Src/main.c **** TaskHandle_t Task04Handle = NULL;
  61:Core/Src/main.c **** TaskHandle_t Task05Handle = NULL;
  62:Core/Src/main.c **** TaskHandle_t Task06Handle = NULL;
  63:Core/Src/main.c **** SemaphoreHandle_t CouSemo = NULL;
  64:Core/Src/main.c **** //xSemaphoreCreateCounting( UBaseType_t uxMaxCount, UBaseType_t uxInitialCount);
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** //SemaphoreHandle_t Bi_Semo1 = NULL;
  67:Core/Src/main.c **** //SemaphoreHandle_t Muto1 = NULL;
  68:Core/Src/main.c **** /* USER CODE END PV */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  71:Core/Src/main.c **** void SystemClock_Config(void);
  72:Core/Src/main.c **** static void MX_GPIO_Init(void);
  73:Core/Src/main.c **** static void MX_DMA_Init(void);
  74:Core/Src/main.c **** static void MX_ADC1_Init(void);
  75:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  78:Core/Src/main.c **** void StartTask03(void *argument);
  79:Core/Src/main.c **** void StartTask04(void *argument);
  80:Core/Src/main.c **** void StartTask05(void *argument);
  81:Core/Src/main.c **** void StartTask06(void *argument);
  82:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument),char * TaskName,uint16_t StackSize,int *pvPara
  83:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle);
  84:Core/Src/main.c **** void getStatusName(int a);
  85:Core/Src/main.c **** uint8_t ClrScrFlag = 0;
  86:Core/Src/main.c **** char TaskList_Buffer[50];
  87:Core/Src/main.c **** uint8_t inker = 0;
  88:Core/Src/main.c **** uint8_t inkerMutex = 0;
ARM GAS  /tmp/cc6c1qkn.s 			page 3


  89:Core/Src/main.c **** UBaseType_t uxInitialCount = 0;
  90:Core/Src/main.c **** UBaseType_t uxMaxCount = 3;
  91:Core/Src/main.c **** /* USER CODE END PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  94:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* USER CODE END 0 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /**
  99:Core/Src/main.c ****   * @brief  The application entry point.
 100:Core/Src/main.c ****   * @retval int
 101:Core/Src/main.c ****   */
 102:Core/Src/main.c **** int main(void)
 103:Core/Src/main.c **** {
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE END 1 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 112:Core/Src/main.c ****   HAL_Init();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END Init */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Configure the system clock */
 119:Core/Src/main.c ****   SystemClock_Config();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* USER CODE END SysInit */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* Initialize all configured peripherals */
 126:Core/Src/main.c ****   MX_GPIO_Init();
 127:Core/Src/main.c ****   MX_DMA_Init();
 128:Core/Src/main.c ****   MX_ADC1_Init();
 129:Core/Src/main.c ****   MX_USART2_UART_Init();
 130:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 131:Core/Src/main.c ****   
 132:Core/Src/main.c ****   TaskAdd(StartTask03, "Task03", 128*4, NULL, 8, &Task03Handle);
 133:Core/Src/main.c ****   TaskAdd(StartTask04, "Task04", 128*4, NULL, 6, &Task04Handle);
 134:Core/Src/main.c ****   TaskAdd(StartTask05, "Task05", 128*4, NULL, 4, &Task05Handle);
 135:Core/Src/main.c ****   TaskAdd(StartTask06, "Task06", 128*4, NULL, 2, &Task06Handle);
 136:Core/Src/main.c ****   //Bi_Semo1 = xSemaphoreCreateBinary();
 137:Core/Src/main.c ****   //Muto1 = xSemaphoreCreateMutex();
 138:Core/Src/main.c ****   
 139:Core/Src/main.c ****   CouSemo = xSemaphoreCreateCounting( 3, 0);
 140:Core/Src/main.c ****   printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 141:Core/Src/main.c ****   if( CouSemo != NULL )
 142:Core/Src/main.c ****     			{
 143:Core/Src/main.c **** 				printf("the  counting semaphore was succesfully created \r\n");
 144:Core/Src/main.c ****     			}
 145:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
ARM GAS  /tmp/cc6c1qkn.s 			page 4


 146:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
 147:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
 148:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
 149:Core/Src/main.c ****   printf("CouSemo count after is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 150:Core/Src/main.c ****   printf("----> MAX COUNT = %ld ; INITIAL COUNT %ld \r\n", uxMaxCount, uxInitialCount);
 151:Core/Src/main.c ****   //printf("bi semo count is %d\r\n",uxSemaphoreGetCount(Bi_Semo1));
 152:Core/Src/main.c ****   //printf("giving Bi_semo1\r\n");
 153:Core/Src/main.c ****   //xSemaphoreGive(Bi_Semo1);
 154:Core/Src/main.c ****   printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 155:Core/Src/main.c ****   /*if( Bi_Semo1 == NULL )
 156:Core/Src/main.c ****     {
 157:Core/Src/main.c **** 	printf("bisemo not created\r\n");
 158:Core/Src/main.c ****     }
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****     else
 161:Core/Src/main.c ****     {
 162:Core/Src/main.c **** 	printf("bisemo created\r\n");
 163:Core/Src/main.c ****     }
 164:Core/Src/main.c ****     
 165:Core/Src/main.c ****     if( Muto1 == NULL )
 166:Core/Src/main.c ****     {
 167:Core/Src/main.c **** 	printf(" muto not created\r\n");
 168:Core/Src/main.c ****     }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****     else
 171:Core/Src/main.c ****     {
 172:Core/Src/main.c **** 	printf(" muto created\r\n");
 173:Core/Src/main.c ****     }
 174:Core/Src/main.c ****     */
 175:Core/Src/main.c ****     
 176:Core/Src/main.c ****   //  printf("!!Setup!!\r\n");    
 177:Core/Src/main.c ****   //  if( xTaskCreate( StartTask01, "Task01", 512, NULL, 8, &Task01Handle ) != pdPASS ) {
 178:Core/Src/main.c ****   //    printf("---->Failed to add Task01\r\n");
 179:Core/Src/main.c ****   //  }    
 180:Core/Src/main.c ****   //  if( xTaskCreate( StartTask02, "Task02", 512, NULL, 6, &Task02Handle ) != pdPASS ) {
 181:Core/Src/main.c ****   //    printf("---->Failed to add Task02\r\n");
 182:Core/Src/main.c ****   //  }
 183:Core/Src/main.c ****   
 184:Core/Src/main.c ****   	
 185:Core/Src/main.c ****   /* Start the real time scheduler with preemption */
 186:Core/Src/main.c ****   printf("|** Start Scheduler **|\r\n");
 187:Core/Src/main.c ****   vTaskStartScheduler ();
 188:Core/Src/main.c ****   
 189:Core/Src/main.c ****   //if(TaskAdd(StartTask03, "Task03", 512, NULL, 8, &Task03Handle) != pdPASS)
 190:Core/Src/main.c ****   /* USER CODE END 2 */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler
 193:Core/Src/main.c ****      unless a task calls vTaskEndScheduler () */
 194:Core/Src/main.c **** 	
 195:Core/Src/main.c ****   /* Infinite loop */
 196:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 197:Core/Src/main.c ****   while (1)
 198:Core/Src/main.c ****   {
 199:Core/Src/main.c ****     /* USER CODE END WHILE */
 200:Core/Src/main.c **** 	
 201:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 202:Core/Src/main.c ****   }
ARM GAS  /tmp/cc6c1qkn.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE END 3 */
 204:Core/Src/main.c **** }
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** /**
 207:Core/Src/main.c ****   * @brief System Clock Configuration
 208:Core/Src/main.c ****   * @retval None
 209:Core/Src/main.c ****   */
 210:Core/Src/main.c **** void SystemClock_Config(void)
 211:Core/Src/main.c **** {
 212:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 213:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 216:Core/Src/main.c ****   */
 217:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 221:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 224:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 232:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 233:Core/Src/main.c ****   {
 234:Core/Src/main.c ****     Error_Handler();
 235:Core/Src/main.c ****   }
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 238:Core/Src/main.c ****   */
 239:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 240:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 241:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 242:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 247:Core/Src/main.c ****   {
 248:Core/Src/main.c ****     Error_Handler();
 249:Core/Src/main.c ****   }
 250:Core/Src/main.c **** }
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /**
 253:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 254:Core/Src/main.c ****   * @param None
 255:Core/Src/main.c ****   * @retval None
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c **** static void MX_ADC1_Init(void)
 258:Core/Src/main.c **** {
 259:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
ARM GAS  /tmp/cc6c1qkn.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 270:Core/Src/main.c ****   */
 271:Core/Src/main.c ****   hadc1.Instance = ADC1;
 272:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 273:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 274:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 275:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 276:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 277:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 278:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 279:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 280:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 281:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 282:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 283:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 291:Core/Src/main.c ****   sConfig.Rank = 1;
 292:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 293:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 300:Core/Src/main.c **** }
 301:Core/Src/main.c **** 
 302:Core/Src/main.c **** /**
 303:Core/Src/main.c ****   * @brief USART2 Initialization Function
 304:Core/Src/main.c ****   * @param None
 305:Core/Src/main.c ****   * @retval None
 306:Core/Src/main.c ****   */
 307:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 308:Core/Src/main.c **** {
 309:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 316:Core/Src/main.c ****   huart2.Instance = USART2;
ARM GAS  /tmp/cc6c1qkn.s 			page 7


 317:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 318:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 319:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 320:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 321:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 322:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 323:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 324:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 331:Core/Src/main.c **** }
 332:Core/Src/main.c **** 
 333:Core/Src/main.c **** /**
 334:Core/Src/main.c ****   * Enable DMA controller clock
 335:Core/Src/main.c ****   */
 336:Core/Src/main.c **** static void MX_DMA_Init(void)
 337:Core/Src/main.c **** {
 338:Core/Src/main.c ****   /* DMA controller clock enable */
 339:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* DMA interrupt init */
 342:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 343:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 344:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 345:Core/Src/main.c **** }
 346:Core/Src/main.c **** 
 347:Core/Src/main.c **** /**
 348:Core/Src/main.c ****   * @brief GPIO Initialization Function
 349:Core/Src/main.c ****   * @param None
 350:Core/Src/main.c ****   * @retval None
 351:Core/Src/main.c ****   */
 352:Core/Src/main.c **** static void MX_GPIO_Init(void)
 353:Core/Src/main.c **** {
  28              		.loc 1 353 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 354:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 354 3 view .LVU1
  42              		.loc 1 354 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/cc6c1qkn.s 			page 8


  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 355:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 356:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 359:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 359 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 359 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 359 3 view .LVU5
  54 0012 264B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 359 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 359 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 359 3 view .LVU8
 360:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 360 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 360 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 360 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 360 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 360 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 360 3 view .LVU14
 361:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 361 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 361 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 361 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 361 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 361 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
ARM GAS  /tmp/cc6c1qkn.s 			page 9


  97              		.loc 1 361 3 view .LVU20
 362:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 362 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 362 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 362 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 362 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 362 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 362 3 view .LVU26
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 365:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 365 3 view .LVU27
 115 0062 134D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 368:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 368 3 view .LVU28
 122              		.loc 1 368 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 369:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 125              		.loc 1 369 3 is_stmt 1 view .LVU30
 126              		.loc 1 369 24 is_stmt 0 view .LVU31
 127 0074 4FF40413 		mov	r3, #2162688
 128 0078 0693     		str	r3, [sp, #24]
 370:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 370 3 is_stmt 1 view .LVU32
 130              		.loc 1 370 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 371:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 371 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 0D48     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 374:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 137              		.loc 1 374 3 view .LVU35
 138              		.loc 1 374 23 is_stmt 0 view .LVU36
 139 0084 2023     		movs	r3, #32
 140 0086 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/cc6c1qkn.s 			page 10


 375:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 375 3 is_stmt 1 view .LVU37
 142              		.loc 1 375 24 is_stmt 0 view .LVU38
 143 0088 0123     		movs	r3, #1
 144 008a 0693     		str	r3, [sp, #24]
 376:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 376 3 is_stmt 1 view .LVU39
 146              		.loc 1 376 24 is_stmt 0 view .LVU40
 147 008c 0794     		str	r4, [sp, #28]
 377:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 377 3 is_stmt 1 view .LVU41
 149              		.loc 1 377 25 is_stmt 0 view .LVU42
 150 008e 0894     		str	r4, [sp, #32]
 378:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 378 3 is_stmt 1 view .LVU43
 152 0090 05A9     		add	r1, sp, #20
 153 0092 2846     		mov	r0, r5
 154 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* EXTI interrupt init*/
 381:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 156              		.loc 1 381 3 view .LVU44
 157 0098 2246     		mov	r2, r4
 158 009a 0521     		movs	r1, #5
 159 009c 2820     		movs	r0, #40
 160 009e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 161              	.LVL3:
 382:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 162              		.loc 1 382 3 view .LVU45
 163 00a2 2820     		movs	r0, #40
 164 00a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 165              	.LVL4:
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 385:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 386:Core/Src/main.c **** }
 166              		.loc 1 386 1 is_stmt 0 view .LVU46
 167 00a8 0BB0     		add	sp, sp, #44
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 12
 170              		@ sp needed
 171 00aa 30BD     		pop	{r4, r5, pc}
 172              	.L4:
 173              		.align	2
 174              	.L3:
 175 00ac 00380240 		.word	1073887232
 176 00b0 00000240 		.word	1073872896
 177 00b4 00080240 		.word	1073874944
 178              		.cfi_endproc
 179              	.LFE232:
 181              		.section	.text.MX_DMA_Init,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	MX_DMA_Init:
ARM GAS  /tmp/cc6c1qkn.s 			page 11


 188              	.LFB231:
 337:Core/Src/main.c ****   /* DMA controller clock enable */
 189              		.loc 1 337 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193 0000 00B5     		push	{lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 14, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 16
 339:Core/Src/main.c **** 
 200              		.loc 1 339 3 view .LVU48
 201              	.LBB8:
 339:Core/Src/main.c **** 
 202              		.loc 1 339 3 view .LVU49
 203 0004 0022     		movs	r2, #0
 204 0006 0192     		str	r2, [sp, #4]
 339:Core/Src/main.c **** 
 205              		.loc 1 339 3 view .LVU50
 206 0008 094B     		ldr	r3, .L7
 207 000a 196B     		ldr	r1, [r3, #48]
 208 000c 41F48001 		orr	r1, r1, #4194304
 209 0010 1963     		str	r1, [r3, #48]
 339:Core/Src/main.c **** 
 210              		.loc 1 339 3 view .LVU51
 211 0012 1B6B     		ldr	r3, [r3, #48]
 212 0014 03F48003 		and	r3, r3, #4194304
 213 0018 0193     		str	r3, [sp, #4]
 339:Core/Src/main.c **** 
 214              		.loc 1 339 3 view .LVU52
 215 001a 019B     		ldr	r3, [sp, #4]
 216              	.LBE8:
 339:Core/Src/main.c **** 
 217              		.loc 1 339 3 view .LVU53
 343:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 218              		.loc 1 343 3 view .LVU54
 219 001c 0521     		movs	r1, #5
 220 001e 3820     		movs	r0, #56
 221 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 222              	.LVL5:
 344:Core/Src/main.c **** }
 223              		.loc 1 344 3 view .LVU55
 224 0024 3820     		movs	r0, #56
 225 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 226              	.LVL6:
 345:Core/Src/main.c **** 
 227              		.loc 1 345 1 is_stmt 0 view .LVU56
 228 002a 03B0     		add	sp, sp, #12
 229              	.LCFI5:
 230              		.cfi_def_cfa_offset 4
 231              		@ sp needed
 232 002c 5DF804FB 		ldr	pc, [sp], #4
 233              	.L8:
 234              		.align	2
ARM GAS  /tmp/cc6c1qkn.s 			page 12


 235              	.L7:
 236 0030 00380240 		.word	1073887232
 237              		.cfi_endproc
 238              	.LFE231:
 240              		.section	.rodata.StartTask03.str1.4,"aMS",%progbits,1
 241              		.align	2
 242              	.LC0:
 243 0000 7461736B 		.ascii	"task3 take semaphore \015\000"
 243      33207461 
 243      6B652073 
 243      656D6170 
 243      686F7265 
 244 0017 00       		.align	2
 245              	.LC1:
 246 0018 436F7553 		.ascii	"CouSemo count is %ld\015\012\000"
 246      656D6F20 
 246      636F756E 
 246      74206973 
 246      20256C64 
 247 002f 00       		.align	2
 248              	.LC2:
 249 0030 6469646E 		.ascii	"didnt get the semaphore\015\000"
 249      74206765 
 249      74207468 
 249      65207365 
 249      6D617068 
 250              		.section	.text.StartTask03,"ax",%progbits
 251              		.align	1
 252              		.global	StartTask03
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 257              	StartTask03:
 258              	.LFB233:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 389:Core/Src/main.c **** void StartTask03(void *argument)
 390:Core/Src/main.c **** {
 259              		.loc 1 390 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ Volatile: function does not return.
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              	.LVL7:
 265              		.loc 1 390 1 is_stmt 0 view .LVU58
 266 0000 08B5     		push	{r3, lr}
 267              	.LCFI6:
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 3, -8
 270              		.cfi_offset 14, -4
 271 0002 0EE0     		b	.L12
 272              	.LVL8:
 273              	.L14:
 391:Core/Src/main.c ****   
 392:Core/Src/main.c ****   for(;;)
 393:Core/Src/main.c ****   {
 394:Core/Src/main.c ****   if( xSemaphoreTake( CouSemo,  1000 ) == pdTRUE )
ARM GAS  /tmp/cc6c1qkn.s 			page 13


 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****         {
 397:Core/Src/main.c ****             printf("task3 take semaphore \r\n");	
 274              		.loc 1 397 13 is_stmt 1 view .LVU59
 275 0004 0D48     		ldr	r0, .L15
 276 0006 FFF7FEFF 		bl	puts
 277              	.LVL9:
 398:Core/Src/main.c **** 	    printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 278              		.loc 1 398 6 view .LVU60
 279 000a 0D4B     		ldr	r3, .L15+4
 280 000c 1868     		ldr	r0, [r3]
 281 000e FFF7FEFF 		bl	uxQueueMessagesWaiting
 282              	.LVL10:
 283 0012 0146     		mov	r1, r0
 284 0014 0B48     		ldr	r0, .L15+8
 285 0016 FFF7FEFF 		bl	printf
 286              	.LVL11:
 287              	.L11:
 399:Core/Src/main.c ****             
 400:Core/Src/main.c ****             
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****         }
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****         else
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****         {
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****             printf("didnt get the semaphore\r\n");
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****         }
 411:Core/Src/main.c ****      
 412:Core/Src/main.c ****         vTaskDelay(1500);
 288              		.loc 1 412 9 view .LVU61
 289 001a 40F2DC50 		movw	r0, #1500
 290 001e FFF7FEFF 		bl	vTaskDelay
 291              	.LVL12:
 392:Core/Src/main.c ****   {
 292              		.loc 1 392 8 view .LVU62
 293              	.L12:
 392:Core/Src/main.c ****   {
 294              		.loc 1 392 3 view .LVU63
 394:Core/Src/main.c **** 
 295              		.loc 1 394 3 view .LVU64
 394:Core/Src/main.c **** 
 296              		.loc 1 394 7 is_stmt 0 view .LVU65
 297 0022 4FF47A71 		mov	r1, #1000
 298 0026 064B     		ldr	r3, .L15+4
 299 0028 1868     		ldr	r0, [r3]
 300 002a FFF7FEFF 		bl	xQueueSemaphoreTake
 301              	.LVL13:
 394:Core/Src/main.c **** 
 302              		.loc 1 394 5 view .LVU66
 303 002e 0128     		cmp	r0, #1
 304 0030 E8D0     		beq	.L14
 408:Core/Src/main.c **** 
 305              		.loc 1 408 13 is_stmt 1 view .LVU67
 306 0032 0548     		ldr	r0, .L15+12
ARM GAS  /tmp/cc6c1qkn.s 			page 14


 307 0034 FFF7FEFF 		bl	puts
 308              	.LVL14:
 309 0038 EFE7     		b	.L11
 310              	.L16:
 311 003a 00BF     		.align	2
 312              	.L15:
 313 003c 00000000 		.word	.LC0
 314 0040 00000000 		.word	.LANCHOR0
 315 0044 18000000 		.word	.LC1
 316 0048 30000000 		.word	.LC2
 317              		.cfi_endproc
 318              	.LFE233:
 320              		.section	.text.StartTask04,"ax",%progbits
 321              		.align	1
 322              		.global	StartTask04
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 327              	StartTask04:
 328              	.LFB234:
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c **** }
 415:Core/Src/main.c **** 
 416:Core/Src/main.c **** void StartTask04(void *argument)
 417:Core/Src/main.c **** {
 329              		.loc 1 417 1 view -0
 330              		.cfi_startproc
 331              		@ Volatile: function does not return.
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              	.LVL15:
 335              		.loc 1 417 1 is_stmt 0 view .LVU69
 336 0000 08B5     		push	{r3, lr}
 337              	.LCFI7:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 3, -8
 340              		.cfi_offset 14, -4
 341 0002 0EE0     		b	.L20
 342              	.LVL16:
 343              	.L22:
 418:Core/Src/main.c ****   for(;;)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****   if( xSemaphoreTake( CouSemo,  1000 ) == pdTRUE )
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****         {
 423:Core/Src/main.c ****             printf("task3 take semaphore \r\n");
 344              		.loc 1 423 13 is_stmt 1 view .LVU70
 345 0004 0E48     		ldr	r0, .L23
 346 0006 FFF7FEFF 		bl	puts
 347              	.LVL17:
 424:Core/Src/main.c **** 	    printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 348              		.loc 1 424 6 view .LVU71
 349 000a 0E4B     		ldr	r3, .L23+4
 350 000c 1868     		ldr	r0, [r3]
 351 000e FFF7FEFF 		bl	uxQueueMessagesWaiting
 352              	.LVL18:
 353 0012 0146     		mov	r1, r0
ARM GAS  /tmp/cc6c1qkn.s 			page 15


 354 0014 0C48     		ldr	r0, .L23+8
 355 0016 FFF7FEFF 		bl	printf
 356              	.LVL19:
 357              	.L19:
 425:Core/Src/main.c ****            
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****         }
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****         else
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****         {
 432:Core/Src/main.c **** 	    printf("task3 take semaphore \r\n");
 433:Core/Src/main.c ****             printf("didnt get the semaphore\r\n");
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****         }//printf("bisemo created\r\n");
 436:Core/Src/main.c ****         vTaskDelay(1500);
 358              		.loc 1 436 9 view .LVU72
 359 001a 40F2DC50 		movw	r0, #1500
 360 001e FFF7FEFF 		bl	vTaskDelay
 361              	.LVL20:
 418:Core/Src/main.c ****   {
 362              		.loc 1 418 8 view .LVU73
 363              	.L20:
 418:Core/Src/main.c ****   {
 364              		.loc 1 418 3 view .LVU74
 420:Core/Src/main.c **** 
 365              		.loc 1 420 3 view .LVU75
 420:Core/Src/main.c **** 
 366              		.loc 1 420 7 is_stmt 0 view .LVU76
 367 0022 4FF47A71 		mov	r1, #1000
 368 0026 074B     		ldr	r3, .L23+4
 369 0028 1868     		ldr	r0, [r3]
 370 002a FFF7FEFF 		bl	xQueueSemaphoreTake
 371              	.LVL21:
 420:Core/Src/main.c **** 
 372              		.loc 1 420 5 view .LVU77
 373 002e 0128     		cmp	r0, #1
 374 0030 E8D0     		beq	.L22
 432:Core/Src/main.c ****             printf("didnt get the semaphore\r\n");
 375              		.loc 1 432 6 is_stmt 1 view .LVU78
 376 0032 0348     		ldr	r0, .L23
 377 0034 FFF7FEFF 		bl	puts
 378              	.LVL22:
 433:Core/Src/main.c **** 
 379              		.loc 1 433 13 view .LVU79
 380 0038 0448     		ldr	r0, .L23+12
 381 003a FFF7FEFF 		bl	puts
 382              	.LVL23:
 383 003e ECE7     		b	.L19
 384              	.L24:
 385              		.align	2
 386              	.L23:
 387 0040 00000000 		.word	.LC0
 388 0044 00000000 		.word	.LANCHOR0
 389 0048 18000000 		.word	.LC1
 390 004c 30000000 		.word	.LC2
 391              		.cfi_endproc
ARM GAS  /tmp/cc6c1qkn.s 			page 16


 392              	.LFE234:
 394              		.section	.rodata.StartTask05.str1.4,"aMS",%progbits,1
 395              		.align	2
 396              	.LC3:
 397 0000 7461736B 		.ascii	"task5 take semaphore \015\000"
 397      35207461 
 397      6B652073 
 397      656D6170 
 397      686F7265 
 398              		.section	.text.StartTask05,"ax",%progbits
 399              		.align	1
 400              		.global	StartTask05
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	StartTask05:
 406              	.LFB235:
 437:Core/Src/main.c ****    	}	
 438:Core/Src/main.c ****     
 439:Core/Src/main.c ****     
 440:Core/Src/main.c ****   
 441:Core/Src/main.c **** }
 442:Core/Src/main.c **** 
 443:Core/Src/main.c **** void StartTask05(void *argument)
 444:Core/Src/main.c **** {
 407              		.loc 1 444 1 view -0
 408              		.cfi_startproc
 409              		@ Volatile: function does not return.
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL24:
 413              		.loc 1 444 1 is_stmt 0 view .LVU81
 414 0000 08B5     		push	{r3, lr}
 415              	.LCFI8:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 3, -8
 418              		.cfi_offset 14, -4
 419 0002 0EE0     		b	.L28
 420              	.LVL25:
 421              	.L30:
 445:Core/Src/main.c ****     
 446:Core/Src/main.c ****     for(;;)
 447:Core/Src/main.c ****     {
 448:Core/Src/main.c ****     if( xSemaphoreTake( CouSemo,  1000 ) == pdTRUE )
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****         {
 451:Core/Src/main.c ****             printf("task5 take semaphore \r\n");
 422              		.loc 1 451 13 is_stmt 1 view .LVU82
 423 0004 0D48     		ldr	r0, .L31
 424 0006 FFF7FEFF 		bl	puts
 425              	.LVL26:
 452:Core/Src/main.c **** 	    printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 426              		.loc 1 452 6 view .LVU83
 427 000a 0D4B     		ldr	r3, .L31+4
 428 000c 1868     		ldr	r0, [r3]
 429 000e FFF7FEFF 		bl	uxQueueMessagesWaiting
 430              	.LVL27:
ARM GAS  /tmp/cc6c1qkn.s 			page 17


 431 0012 0146     		mov	r1, r0
 432 0014 0B48     		ldr	r0, .L31+8
 433 0016 FFF7FEFF 		bl	printf
 434              	.LVL28:
 435              	.L27:
 453:Core/Src/main.c ****             
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****         }
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****         else
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****         {
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****             printf("didnt get the semaphore\r\n");
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****         }
 464:Core/Src/main.c ****        vTaskDelay(1500);
 436              		.loc 1 464 8 view .LVU84
 437 001a 40F2DC50 		movw	r0, #1500
 438 001e FFF7FEFF 		bl	vTaskDelay
 439              	.LVL29:
 446:Core/Src/main.c ****     {
 440              		.loc 1 446 10 view .LVU85
 441              	.L28:
 446:Core/Src/main.c ****     {
 442              		.loc 1 446 5 view .LVU86
 448:Core/Src/main.c **** 
 443              		.loc 1 448 5 view .LVU87
 448:Core/Src/main.c **** 
 444              		.loc 1 448 9 is_stmt 0 view .LVU88
 445 0022 4FF47A71 		mov	r1, #1000
 446 0026 064B     		ldr	r3, .L31+4
 447 0028 1868     		ldr	r0, [r3]
 448 002a FFF7FEFF 		bl	xQueueSemaphoreTake
 449              	.LVL30:
 448:Core/Src/main.c **** 
 450              		.loc 1 448 7 view .LVU89
 451 002e 0128     		cmp	r0, #1
 452 0030 E8D0     		beq	.L30
 461:Core/Src/main.c **** 
 453              		.loc 1 461 13 is_stmt 1 view .LVU90
 454 0032 0548     		ldr	r0, .L31+12
 455 0034 FFF7FEFF 		bl	puts
 456              	.LVL31:
 457 0038 EFE7     		b	.L27
 458              	.L32:
 459 003a 00BF     		.align	2
 460              	.L31:
 461 003c 00000000 		.word	.LC3
 462 0040 00000000 		.word	.LANCHOR0
 463 0044 18000000 		.word	.LC1
 464 0048 30000000 		.word	.LC2
 465              		.cfi_endproc
 466              	.LFE235:
 468              		.section	.rodata.StartTask06.str1.4,"aMS",%progbits,1
 469              		.align	2
 470              	.LC4:
ARM GAS  /tmp/cc6c1qkn.s 			page 18


 471 0000 7461736B 		.ascii	"task6 take semaphore \015\000"
 471      36207461 
 471      6B652073 
 471      656D6170 
 471      686F7265 
 472              		.section	.text.StartTask06,"ax",%progbits
 473              		.align	1
 474              		.global	StartTask06
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 479              	StartTask06:
 480              	.LFB236:
 465:Core/Src/main.c ****   }
 466:Core/Src/main.c **** }
 467:Core/Src/main.c **** 
 468:Core/Src/main.c **** void StartTask06(void *argument)
 469:Core/Src/main.c **** {
 481              		.loc 1 469 1 view -0
 482              		.cfi_startproc
 483              		@ Volatile: function does not return.
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              	.LVL32:
 487              		.loc 1 469 1 is_stmt 0 view .LVU92
 488 0000 08B5     		push	{r3, lr}
 489              	.LCFI9:
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 3, -8
 492              		.cfi_offset 14, -4
 493 0002 0EE0     		b	.L36
 494              	.LVL33:
 495              	.L38:
 470:Core/Src/main.c ****     
 471:Core/Src/main.c ****     for(;;)
 472:Core/Src/main.c ****     {
 473:Core/Src/main.c ****     if( xSemaphoreTake( CouSemo,  10 ) == pdTRUE )
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****         {
 476:Core/Src/main.c ****             printf("task6 take semaphore \r\n");
 496              		.loc 1 476 13 is_stmt 1 view .LVU93
 497 0004 0C48     		ldr	r0, .L39
 498 0006 FFF7FEFF 		bl	puts
 499              	.LVL34:
 477:Core/Src/main.c **** 	    printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 500              		.loc 1 477 6 view .LVU94
 501 000a 0C4B     		ldr	r3, .L39+4
 502 000c 1868     		ldr	r0, [r3]
 503 000e FFF7FEFF 		bl	uxQueueMessagesWaiting
 504              	.LVL35:
 505 0012 0146     		mov	r1, r0
 506 0014 0A48     		ldr	r0, .L39+8
 507 0016 FFF7FEFF 		bl	printf
 508              	.LVL36:
 509              	.L35:
 478:Core/Src/main.c ****             
 479:Core/Src/main.c **** 
ARM GAS  /tmp/cc6c1qkn.s 			page 19


 480:Core/Src/main.c ****         }
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****         else
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****         {
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****             printf("didnt get the semaphore\r\n");
 487:Core/Src/main.c **** 
 488:Core/Src/main.c ****         }
 489:Core/Src/main.c ****        vTaskDelay(1000);
 510              		.loc 1 489 8 view .LVU95
 511 001a 4FF47A70 		mov	r0, #1000
 512 001e FFF7FEFF 		bl	vTaskDelay
 513              	.LVL37:
 471:Core/Src/main.c ****     {
 514              		.loc 1 471 10 view .LVU96
 515              	.L36:
 471:Core/Src/main.c ****     {
 516              		.loc 1 471 5 view .LVU97
 473:Core/Src/main.c **** 
 517              		.loc 1 473 5 view .LVU98
 473:Core/Src/main.c **** 
 518              		.loc 1 473 9 is_stmt 0 view .LVU99
 519 0022 0A21     		movs	r1, #10
 520 0024 054B     		ldr	r3, .L39+4
 521 0026 1868     		ldr	r0, [r3]
 522 0028 FFF7FEFF 		bl	xQueueSemaphoreTake
 523              	.LVL38:
 473:Core/Src/main.c **** 
 524              		.loc 1 473 7 view .LVU100
 525 002c 0128     		cmp	r0, #1
 526 002e E9D0     		beq	.L38
 486:Core/Src/main.c **** 
 527              		.loc 1 486 13 is_stmt 1 view .LVU101
 528 0030 0448     		ldr	r0, .L39+12
 529 0032 FFF7FEFF 		bl	puts
 530              	.LVL39:
 531 0036 F0E7     		b	.L35
 532              	.L40:
 533              		.align	2
 534              	.L39:
 535 0038 00000000 		.word	.LC4
 536 003c 00000000 		.word	.LANCHOR0
 537 0040 18000000 		.word	.LC1
 538 0044 30000000 		.word	.LC2
 539              		.cfi_endproc
 540              	.LFE236:
 542              		.section	.text.__io_putchar,"ax",%progbits
 543              		.align	1
 544              		.global	__io_putchar
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 549              	__io_putchar:
 550              	.LVL40:
 551              	.LFB237:
 490:Core/Src/main.c ****   }
ARM GAS  /tmp/cc6c1qkn.s 			page 20


 491:Core/Src/main.c **** }
 492:Core/Src/main.c **** PUTCHAR_PROTOTYPE
 493:Core/Src/main.c **** {
 552              		.loc 1 493 1 view -0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		.loc 1 493 1 is_stmt 0 view .LVU103
 557 0000 00B5     		push	{lr}
 558              	.LCFI10:
 559              		.cfi_def_cfa_offset 4
 560              		.cfi_offset 14, -4
 561 0002 83B0     		sub	sp, sp, #12
 562              	.LCFI11:
 563              		.cfi_def_cfa_offset 16
 564 0004 0190     		str	r0, [sp, #4]
 494:Core/Src/main.c ****   /* Place your implementation of fputc here */
 495:Core/Src/main.c ****   /* e.g. write a character to the USART1 and Loop until the end of transmission */
 496:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 565              		.loc 1 496 3 is_stmt 1 view .LVU104
 566 0006 4FF6FF73 		movw	r3, #65535
 567 000a 0122     		movs	r2, #1
 568 000c 01A9     		add	r1, sp, #4
 569 000e 0348     		ldr	r0, .L43
 570              	.LVL41:
 571              		.loc 1 496 3 is_stmt 0 view .LVU105
 572 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 573              	.LVL42:
 497:Core/Src/main.c ****   return ch;
 574              		.loc 1 497 3 is_stmt 1 view .LVU106
 498:Core/Src/main.c **** }
 575              		.loc 1 498 1 is_stmt 0 view .LVU107
 576 0014 0198     		ldr	r0, [sp, #4]
 577 0016 03B0     		add	sp, sp, #12
 578              	.LCFI12:
 579              		.cfi_def_cfa_offset 4
 580              		@ sp needed
 581 0018 5DF804FB 		ldr	pc, [sp], #4
 582              	.L44:
 583              		.align	2
 584              	.L43:
 585 001c 00000000 		.word	.LANCHOR1
 586              		.cfi_endproc
 587              	.LFE237:
 589              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 590              		.align	1
 591              		.global	HAL_GPIO_EXTI_Callback
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 596              	HAL_GPIO_EXTI_Callback:
 597              	.LVL43:
 598              	.LFB238:
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 501:Core/Src/main.c **** {
 599              		.loc 1 501 1 is_stmt 1 view -0
ARM GAS  /tmp/cc6c1qkn.s 			page 21


 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 502:Core/Src/main.c ****   if (GPIO_Pin == B1_Pin)
 603              		.loc 1 502 3 view .LVU109
 604              		.loc 1 502 6 is_stmt 0 view .LVU110
 605 0000 B0F5005F 		cmp	r0, #8192
 606 0004 00D0     		beq	.L51
 607 0006 7047     		bx	lr
 608              	.L51:
 501:Core/Src/main.c ****   if (GPIO_Pin == B1_Pin)
 609              		.loc 1 501 1 view .LVU111
 610 0008 08B5     		push	{r3, lr}
 611              	.LCFI13:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 3, -8
 614              		.cfi_offset 14, -4
 503:Core/Src/main.c ****   {
 504:Core/Src/main.c ****   	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 615              		.loc 1 504 4 is_stmt 1 view .LVU112
 616 000a 2021     		movs	r1, #32
 617 000c 0348     		ldr	r0, .L52
 618              	.LVL44:
 619              		.loc 1 504 4 is_stmt 0 view .LVU113
 620 000e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 621              	.LVL45:
 505:Core/Src/main.c ****  	ClrScrFlag = 1;	
 622              		.loc 1 505 3 is_stmt 1 view .LVU114
 623              		.loc 1 505 14 is_stmt 0 view .LVU115
 624 0012 034B     		ldr	r3, .L52+4
 625 0014 0122     		movs	r2, #1
 626 0016 1A70     		strb	r2, [r3]
 506:Core/Src/main.c ****   }
 507:Core/Src/main.c ****   
 508:Core/Src/main.c **** }
 627              		.loc 1 508 1 view .LVU116
 628 0018 08BD     		pop	{r3, pc}
 629              	.L53:
 630 001a 00BF     		.align	2
 631              	.L52:
 632 001c 00000240 		.word	1073872896
 633 0020 00000000 		.word	.LANCHOR2
 634              		.cfi_endproc
 635              	.LFE238:
 637              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 638              		.align	1
 639              		.global	HAL_ADC_ConvCpltCallback
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 644              	HAL_ADC_ConvCpltCallback:
 645              	.LVL46:
 646              	.LFB239:
 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** 
 511:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 512:Core/Src/main.c **** {
ARM GAS  /tmp/cc6c1qkn.s 			page 22


 647              		.loc 1 512 1 is_stmt 1 view -0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 513:Core/Src/main.c ****   if (hadc->Instance == ADC1)
 652              		.loc 1 513 3 view .LVU118
 514:Core/Src/main.c ****   {
 515:Core/Src/main.c ****   }
 653              		.loc 1 515 3 view .LVU119
 516:Core/Src/main.c **** }
 654              		.loc 1 516 1 is_stmt 0 view .LVU120
 655 0000 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE239:
 659              		.section	.rodata.TaskAdd.str1.4,"aMS",%progbits,1
 660              		.align	2
 661              	.LC5:
 662 0000 2D2D2D2D 		.ascii	"---->%s Added\015\012\000"
 662      3E257320 
 662      41646465 
 662      640D0A00 
 663              		.align	2
 664              	.LC6:
 665 0010 2D2D2D2D 		.ascii	"---->Failed to add %s\015\012\000"
 665      3E466169 
 665      6C656420 
 665      746F2061 
 665      64642025 
 666              		.section	.text.TaskAdd,"ax",%progbits
 667              		.align	1
 668              		.global	TaskAdd
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 673              	TaskAdd:
 674              	.LVL47:
 675              	.LFB240:
 517:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument), /* Function that implements the task. */
 518:Core/Src/main.c **** 	char * TaskName, /* Text name for the task. */
 519:Core/Src/main.c **** 	uint16_t StackSize, /* Stack size in words, not bytes. */
 520:Core/Src/main.c **** 	int *pvParameters, /* Parameter passed into the task. */
 521:Core/Src/main.c **** 	UBaseType_t uxPriority, /* Priority at which the task is created. */
 522:Core/Src/main.c **** 	TaskHandle_t *TaskHandle ) /* Used to pass out the task’s handle. */
 523:Core/Src/main.c **** 	{
 676              		.loc 1 523 2 is_stmt 1 view -0
 677              		.cfi_startproc
 678              		@ args = 8, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680              		.loc 1 523 2 is_stmt 0 view .LVU122
 681 0000 70B5     		push	{r4, r5, r6, lr}
 682              	.LCFI14:
 683              		.cfi_def_cfa_offset 16
 684              		.cfi_offset 4, -16
 685              		.cfi_offset 5, -12
 686              		.cfi_offset 6, -8
 687              		.cfi_offset 14, -4
ARM GAS  /tmp/cc6c1qkn.s 			page 23


 688 0002 82B0     		sub	sp, sp, #8
 689              	.LCFI15:
 690              		.cfi_def_cfa_offset 24
 691 0004 0C46     		mov	r4, r1
 692 0006 079D     		ldr	r5, [sp, #28]
 524:Core/Src/main.c **** 		BaseType_t retValue = xTaskCreate( FunctionName, TaskName, StackSize, pvParameters,
 693              		.loc 1 524 3 is_stmt 1 view .LVU123
 694              		.loc 1 524 25 is_stmt 0 view .LVU124
 695 0008 0195     		str	r5, [sp, #4]
 696 000a 069E     		ldr	r6, [sp, #24]
 697 000c 0096     		str	r6, [sp]
 698 000e FFF7FEFF 		bl	xTaskCreate
 699              	.LVL48:
 525:Core/Src/main.c **** 		uxPriority, TaskHandle );
 526:Core/Src/main.c **** 		//printf("Converted Random number in main to %d in task %s", *pvParameters, TaskName);
 527:Core/Src/main.c **** 		if( retValue == pdPASS ) {
 700              		.loc 1 527 3 is_stmt 1 view .LVU125
 701              		.loc 1 527 5 is_stmt 0 view .LVU126
 702 0012 0128     		cmp	r0, #1
 703 0014 06D0     		beq	.L59
 528:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 529:Core/Src/main.c **** 			return 0;
 530:Core/Src/main.c **** 		}
 531:Core/Src/main.c **** 	
 532:Core/Src/main.c **** 		else {
 533:Core/Src/main.c **** 			printf("---->Failed to add %s\r\n", TaskName);
 704              		.loc 1 533 4 is_stmt 1 view .LVU127
 705 0016 2146     		mov	r1, r4
 706 0018 0748     		ldr	r0, .L60
 707              	.LVL49:
 708              		.loc 1 533 4 is_stmt 0 view .LVU128
 709 001a FFF7FEFF 		bl	printf
 710              	.LVL50:
 534:Core/Src/main.c **** 		}
 535:Core/Src/main.c **** 	return 1;
 711              		.loc 1 535 2 is_stmt 1 view .LVU129
 712              		.loc 1 535 9 is_stmt 0 view .LVU130
 713 001e 0120     		movs	r0, #1
 714              	.L57:
 536:Core/Src/main.c **** }
 715              		.loc 1 536 1 view .LVU131
 716 0020 02B0     		add	sp, sp, #8
 717              	.LCFI16:
 718              		.cfi_remember_state
 719              		.cfi_def_cfa_offset 16
 720              		@ sp needed
 721 0022 70BD     		pop	{r4, r5, r6, pc}
 722              	.LVL51:
 723              	.L59:
 724              	.LCFI17:
 725              		.cfi_restore_state
 528:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 726              		.loc 1 528 4 is_stmt 1 view .LVU132
 727 0024 2868     		ldr	r0, [r5]
 728              	.LVL52:
 528:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 729              		.loc 1 528 4 is_stmt 0 view .LVU133
ARM GAS  /tmp/cc6c1qkn.s 			page 24


 730 0026 FFF7FEFF 		bl	pcTaskGetName
 731              	.LVL53:
 732 002a 0146     		mov	r1, r0
 733 002c 0348     		ldr	r0, .L60+4
 734 002e FFF7FEFF 		bl	printf
 735              	.LVL54:
 529:Core/Src/main.c **** 		}
 736              		.loc 1 529 4 is_stmt 1 view .LVU134
 529:Core/Src/main.c **** 		}
 737              		.loc 1 529 11 is_stmt 0 view .LVU135
 738 0032 0020     		movs	r0, #0
 739 0034 F4E7     		b	.L57
 740              	.L61:
 741 0036 00BF     		.align	2
 742              	.L60:
 743 0038 10000000 		.word	.LC6
 744 003c 00000000 		.word	.LC5
 745              		.cfi_endproc
 746              	.LFE240:
 748              		.section	.rodata.KillTask.str1.4,"aMS",%progbits,1
 749              		.align	2
 750              	.LC7:
 751 0000 2D2D2D2D 		.ascii	"---->%s Killed\015\012\000"
 751      3E257320 
 751      4B696C6C 
 751      65640D0A 
 751      00
 752              		.section	.text.KillTask,"ax",%progbits
 753              		.align	1
 754              		.global	KillTask
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 759              	KillTask:
 760              	.LVL55:
 761              	.LFB241:
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle)
 539:Core/Src/main.c **** {
 762              		.loc 1 539 1 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		.loc 1 539 1 is_stmt 0 view .LVU137
 767 0000 10B5     		push	{r4, lr}
 768              	.LCFI18:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 4, -8
 771              		.cfi_offset 14, -4
 772 0002 0446     		mov	r4, r0
 540:Core/Src/main.c **** 	vTaskDelete( *TaskHandle );
 773              		.loc 1 540 2 is_stmt 1 view .LVU138
 774 0004 0068     		ldr	r0, [r0]
 775              	.LVL56:
 776              		.loc 1 540 2 is_stmt 0 view .LVU139
 777 0006 FFF7FEFF 		bl	vTaskDelete
 778              	.LVL57:
ARM GAS  /tmp/cc6c1qkn.s 			page 25


 541:Core/Src/main.c **** 	printf("---->%s Killed\r\n", pcTaskGetName(*TaskHandle));
 779              		.loc 1 541 2 is_stmt 1 view .LVU140
 780 000a 2068     		ldr	r0, [r4]
 781 000c FFF7FEFF 		bl	pcTaskGetName
 782              	.LVL58:
 783 0010 0146     		mov	r1, r0
 784 0012 0348     		ldr	r0, .L64
 785 0014 FFF7FEFF 		bl	printf
 786              	.LVL59:
 542:Core/Src/main.c **** 	/* Task gets killed when IDLE Task runs */
 543:Core/Src/main.c **** 	*TaskHandle = NULL;
 787              		.loc 1 543 2 view .LVU141
 788              		.loc 1 543 14 is_stmt 0 view .LVU142
 789 0018 0023     		movs	r3, #0
 790 001a 2360     		str	r3, [r4]
 544:Core/Src/main.c **** }
 791              		.loc 1 544 1 view .LVU143
 792 001c 10BD     		pop	{r4, pc}
 793              	.LVL60:
 794              	.L65:
 795              		.loc 1 544 1 view .LVU144
 796 001e 00BF     		.align	2
 797              	.L64:
 798 0020 00000000 		.word	.LC7
 799              		.cfi_endproc
 800              	.LFE241:
 802              		.section	.rodata.getStatusName.str1.4,"aMS",%progbits,1
 803              		.align	2
 804              	.LC8:
 805 0000 73746174 		.ascii	"state : eRunning  %d \015\012\000"
 805      65203A20 
 805      6552756E 
 805      6E696E67 
 805      20202564 
 806              		.align	2
 807              	.LC9:
 808 0018 73746174 		.ascii	"state : eReady  %d \015\012\000"
 808      65203A20 
 808      65526561 
 808      64792020 
 808      2564200D 
 809 002e 0000     		.align	2
 810              	.LC10:
 811 0030 73746174 		.ascii	"state : eBlocked %d \015\012\000"
 811      65203A20 
 811      65426C6F 
 811      636B6564 
 811      20256420 
 812 0047 00       		.align	2
 813              	.LC11:
 814 0048 73746174 		.ascii	"state : eSuspended  %d \015\012\000"
 814      65203A20 
 814      65537573 
 814      70656E64 
 814      65642020 
 815 0062 0000     		.align	2
 816              	.LC12:
ARM GAS  /tmp/cc6c1qkn.s 			page 26


 817 0064 73746174 		.ascii	"state : eDeleted  %d \015\012\000"
 817      65203A20 
 817      6544656C 
 817      65746564 
 817      20202564 
 818              		.align	2
 819              	.LC13:
 820 007c 73746174 		.ascii	"state : eInvalid  %d \015\012\000"
 820      65203A20 
 820      65496E76 
 820      616C6964 
 820      20202564 
 821              		.section	.text.getStatusName,"ax",%progbits
 822              		.align	1
 823              		.global	getStatusName
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 828              	getStatusName:
 829              	.LVL61:
 830              	.LFB242:
 545:Core/Src/main.c **** 
 546:Core/Src/main.c **** void getStatusName(int a)
 547:Core/Src/main.c **** {
 831              		.loc 1 547 1 is_stmt 1 view -0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              		.loc 1 547 1 is_stmt 0 view .LVU146
 836 0000 08B5     		push	{r3, lr}
 837              	.LCFI19:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 3, -8
 840              		.cfi_offset 14, -4
 841 0002 0146     		mov	r1, r0
 548:Core/Src/main.c **** 	
 549:Core/Src/main.c **** 	switch(a)
 842              		.loc 1 549 2 is_stmt 1 view .LVU147
 843 0004 0428     		cmp	r0, #4
 844 0006 18D8     		bhi	.L67
 845 0008 DFE800F0 		tbb	[pc, r0]
 846              	.L69:
 847 000c 03       		.byte	(.L73-.L69)/2
 848 000d 07       		.byte	(.L72-.L69)/2
 849 000e 0B       		.byte	(.L71-.L69)/2
 850 000f 0F       		.byte	(.L70-.L69)/2
 851 0010 13       		.byte	(.L68-.L69)/2
 852 0011 00       		.p2align 1
 853              	.L73:
 550:Core/Src/main.c **** 	{
 551:Core/Src/main.c **** 		case 0:  printf( "state : eRunning  %d \r\n", a );
 854              		.loc 1 551 12 view .LVU148
 855 0012 0C48     		ldr	r0, .L76
 856              	.LVL62:
 857              		.loc 1 551 12 is_stmt 0 view .LVU149
 858 0014 FFF7FEFF 		bl	printf
 859              	.LVL63:
ARM GAS  /tmp/cc6c1qkn.s 			page 27


 552:Core/Src/main.c **** 		break;	
 860              		.loc 1 552 3 is_stmt 1 view .LVU150
 861              	.L66:
 553:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 554:Core/Src/main.c **** 		break;
 555:Core/Src/main.c **** 		case 2:  printf( "state : eBlocked %d \r\n", a );
 556:Core/Src/main.c **** 		break;
 557:Core/Src/main.c **** 		case 3:  printf( "state : eSuspended  %d \r\n", a );
 558:Core/Src/main.c **** 		break;
 559:Core/Src/main.c **** 		case 4:  printf( "state : eDeleted  %d \r\n", a );
 560:Core/Src/main.c **** 		break;
 561:Core/Src/main.c **** 		default: printf( "state : eInvalid  %d \r\n", a );
 562:Core/Src/main.c **** 		break;
 563:Core/Src/main.c **** 	}
 564:Core/Src/main.c **** }
 862              		.loc 1 564 1 is_stmt 0 view .LVU151
 863 0018 08BD     		pop	{r3, pc}
 864              	.LVL64:
 865              	.L72:
 553:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 866              		.loc 1 553 12 is_stmt 1 view .LVU152
 867 001a 0B48     		ldr	r0, .L76+4
 868              	.LVL65:
 553:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 869              		.loc 1 553 12 is_stmt 0 view .LVU153
 870 001c FFF7FEFF 		bl	printf
 871              	.LVL66:
 554:Core/Src/main.c **** 		case 2:  printf( "state : eBlocked %d \r\n", a );
 872              		.loc 1 554 3 is_stmt 1 view .LVU154
 873 0020 FAE7     		b	.L66
 874              	.LVL67:
 875              	.L71:
 555:Core/Src/main.c **** 		break;
 876              		.loc 1 555 12 view .LVU155
 877 0022 0A48     		ldr	r0, .L76+8
 878              	.LVL68:
 555:Core/Src/main.c **** 		break;
 879              		.loc 1 555 12 is_stmt 0 view .LVU156
 880 0024 FFF7FEFF 		bl	printf
 881              	.LVL69:
 556:Core/Src/main.c **** 		case 3:  printf( "state : eSuspended  %d \r\n", a );
 882              		.loc 1 556 3 is_stmt 1 view .LVU157
 883 0028 F6E7     		b	.L66
 884              	.LVL70:
 885              	.L70:
 557:Core/Src/main.c **** 		break;
 886              		.loc 1 557 12 view .LVU158
 887 002a 0948     		ldr	r0, .L76+12
 888              	.LVL71:
 557:Core/Src/main.c **** 		break;
 889              		.loc 1 557 12 is_stmt 0 view .LVU159
 890 002c FFF7FEFF 		bl	printf
 891              	.LVL72:
 558:Core/Src/main.c **** 		case 4:  printf( "state : eDeleted  %d \r\n", a );
 892              		.loc 1 558 3 is_stmt 1 view .LVU160
 893 0030 F2E7     		b	.L66
 894              	.LVL73:
ARM GAS  /tmp/cc6c1qkn.s 			page 28


 895              	.L68:
 559:Core/Src/main.c **** 		break;
 896              		.loc 1 559 12 view .LVU161
 897 0032 0848     		ldr	r0, .L76+16
 898              	.LVL74:
 559:Core/Src/main.c **** 		break;
 899              		.loc 1 559 12 is_stmt 0 view .LVU162
 900 0034 FFF7FEFF 		bl	printf
 901              	.LVL75:
 560:Core/Src/main.c **** 		default: printf( "state : eInvalid  %d \r\n", a );
 902              		.loc 1 560 3 is_stmt 1 view .LVU163
 903 0038 EEE7     		b	.L66
 904              	.LVL76:
 905              	.L67:
 561:Core/Src/main.c **** 		break;
 906              		.loc 1 561 12 view .LVU164
 907 003a 0748     		ldr	r0, .L76+20
 908              	.LVL77:
 561:Core/Src/main.c **** 		break;
 909              		.loc 1 561 12 is_stmt 0 view .LVU165
 910 003c FFF7FEFF 		bl	printf
 911              	.LVL78:
 562:Core/Src/main.c **** 	}
 912              		.loc 1 562 3 is_stmt 1 view .LVU166
 913              		.loc 1 564 1 is_stmt 0 view .LVU167
 914 0040 EAE7     		b	.L66
 915              	.L77:
 916 0042 00BF     		.align	2
 917              	.L76:
 918 0044 00000000 		.word	.LC8
 919 0048 18000000 		.word	.LC9
 920 004c 30000000 		.word	.LC10
 921 0050 48000000 		.word	.LC11
 922 0054 64000000 		.word	.LC12
 923 0058 7C000000 		.word	.LC13
 924              		.cfi_endproc
 925              	.LFE242:
 927              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 928              		.align	1
 929              		.global	HAL_TIM_PeriodElapsedCallback
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 934              	HAL_TIM_PeriodElapsedCallback:
 935              	.LVL79:
 936              	.LFB243:
 565:Core/Src/main.c **** /* USER CODE END 4 */
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** /**
 568:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 569:Core/Src/main.c ****   * @note   This function is called  when TIM11 interrupt took place, inside
 570:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 571:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 572:Core/Src/main.c ****   * @param  htim : TIM handle
 573:Core/Src/main.c ****   * @retval None
 574:Core/Src/main.c ****   */
 575:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/cc6c1qkn.s 			page 29


 576:Core/Src/main.c **** {
 937              		.loc 1 576 1 is_stmt 1 view -0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 0
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941              		.loc 1 576 1 is_stmt 0 view .LVU169
 942 0000 08B5     		push	{r3, lr}
 943              	.LCFI20:
 944              		.cfi_def_cfa_offset 8
 945              		.cfi_offset 3, -8
 946              		.cfi_offset 14, -4
 577:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 580:Core/Src/main.c ****   if (htim->Instance == TIM11) {
 947              		.loc 1 580 3 is_stmt 1 view .LVU170
 948              		.loc 1 580 11 is_stmt 0 view .LVU171
 949 0002 0268     		ldr	r2, [r0]
 950              		.loc 1 580 6 view .LVU172
 951 0004 034B     		ldr	r3, .L82
 952 0006 9A42     		cmp	r2, r3
 953 0008 00D0     		beq	.L81
 954              	.LVL80:
 955              	.L78:
 581:Core/Src/main.c ****     HAL_IncTick();
 582:Core/Src/main.c ****   }
 583:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 584:Core/Src/main.c **** 
 585:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 586:Core/Src/main.c **** }
 956              		.loc 1 586 1 view .LVU173
 957 000a 08BD     		pop	{r3, pc}
 958              	.LVL81:
 959              	.L81:
 581:Core/Src/main.c ****     HAL_IncTick();
 960              		.loc 1 581 5 is_stmt 1 view .LVU174
 961 000c FFF7FEFF 		bl	HAL_IncTick
 962              	.LVL82:
 963              		.loc 1 586 1 is_stmt 0 view .LVU175
 964 0010 FBE7     		b	.L78
 965              	.L83:
 966 0012 00BF     		.align	2
 967              	.L82:
 968 0014 00480140 		.word	1073825792
 969              		.cfi_endproc
 970              	.LFE243:
 972              		.section	.text.Error_Handler,"ax",%progbits
 973              		.align	1
 974              		.global	Error_Handler
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 979              	Error_Handler:
 980              	.LFB244:
 587:Core/Src/main.c **** 
 588:Core/Src/main.c **** /**
 589:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
ARM GAS  /tmp/cc6c1qkn.s 			page 30


 590:Core/Src/main.c ****   * @retval None
 591:Core/Src/main.c ****   */
 592:Core/Src/main.c **** void Error_Handler(void)
 593:Core/Src/main.c **** {
 981              		.loc 1 593 1 is_stmt 1 view -0
 982              		.cfi_startproc
 983              		@ Volatile: function does not return.
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986              		@ link register save eliminated.
 594:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 595:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 596:Core/Src/main.c ****   __disable_irq();
 987              		.loc 1 596 3 view .LVU177
 988              	.LBB9:
 989              	.LBI9:
 990              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
ARM GAS  /tmp/cc6c1qkn.s 			page 31


  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/cc6c1qkn.s 			page 32


  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/cc6c1qkn.s 			page 33


 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
ARM GAS  /tmp/cc6c1qkn.s 			page 34


 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6c1qkn.s 			page 35


 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6c1qkn.s 			page 36


 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
ARM GAS  /tmp/cc6c1qkn.s 			page 37


 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  /tmp/cc6c1qkn.s 			page 38


 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6c1qkn.s 			page 39


 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
ARM GAS  /tmp/cc6c1qkn.s 			page 40


 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/cc6c1qkn.s 			page 41


 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
ARM GAS  /tmp/cc6c1qkn.s 			page 42


 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6c1qkn.s 			page 43


 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/cc6c1qkn.s 			page 44


 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
ARM GAS  /tmp/cc6c1qkn.s 			page 45


 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cc6c1qkn.s 			page 46


 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6c1qkn.s 			page 47


 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 991              		.loc 2 960 27 view .LVU178
 992              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 993              		.loc 2 962 3 view .LVU179
 994              		.syntax unified
 995              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 996 0000 72B6     		cpsid i
 997              	@ 0 "" 2
 998              		.thumb
 999              		.syntax unified
 1000              	.L85:
 1001              	.LBE10:
 1002              	.LBE9:
 597:Core/Src/main.c ****   while (1)
 1003              		.loc 1 597 3 discriminator 1 view .LVU180
 598:Core/Src/main.c ****   {
 599:Core/Src/main.c ****   }
 1004              		.loc 1 599 3 discriminator 1 view .LVU181
 597:Core/Src/main.c ****   while (1)
 1005              		.loc 1 597 9 discriminator 1 view .LVU182
 1006 0002 FEE7     		b	.L85
 1007              		.cfi_endproc
 1008              	.LFE244:
 1010              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1011              		.align	1
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1016              	MX_ADC1_Init:
 1017              	.LFB229:
 258:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 1018              		.loc 1 258 1 view -0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 16
 1021              		@ frame_needed = 0, uses_anonymous_args = 0
 1022 0000 00B5     		push	{lr}
 1023              	.LCFI21:
 1024              		.cfi_def_cfa_offset 4
 1025              		.cfi_offset 14, -4
 1026 0002 85B0     		sub	sp, sp, #20
 1027              	.LCFI22:
 1028              		.cfi_def_cfa_offset 24
 263:Core/Src/main.c **** 
 1029              		.loc 1 263 3 view .LVU184
 263:Core/Src/main.c **** 
 1030              		.loc 1 263 26 is_stmt 0 view .LVU185
 1031 0004 0023     		movs	r3, #0
 1032 0006 0093     		str	r3, [sp]
ARM GAS  /tmp/cc6c1qkn.s 			page 48


 1033 0008 0193     		str	r3, [sp, #4]
 1034 000a 0293     		str	r3, [sp, #8]
 1035 000c 0393     		str	r3, [sp, #12]
 271:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1036              		.loc 1 271 3 is_stmt 1 view .LVU186
 271:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1037              		.loc 1 271 18 is_stmt 0 view .LVU187
 1038 000e 1448     		ldr	r0, .L92
 1039 0010 144A     		ldr	r2, .L92+4
 1040 0012 0260     		str	r2, [r0]
 272:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1041              		.loc 1 272 3 is_stmt 1 view .LVU188
 272:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1042              		.loc 1 272 29 is_stmt 0 view .LVU189
 1043 0014 4FF48032 		mov	r2, #65536
 1044 0018 4260     		str	r2, [r0, #4]
 273:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1045              		.loc 1 273 3 is_stmt 1 view .LVU190
 273:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1046              		.loc 1 273 25 is_stmt 0 view .LVU191
 1047 001a 8360     		str	r3, [r0, #8]
 274:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1048              		.loc 1 274 3 is_stmt 1 view .LVU192
 274:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1049              		.loc 1 274 27 is_stmt 0 view .LVU193
 1050 001c 0122     		movs	r2, #1
 1051 001e 0261     		str	r2, [r0, #16]
 275:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1052              		.loc 1 275 3 is_stmt 1 view .LVU194
 275:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1053              		.loc 1 275 33 is_stmt 0 view .LVU195
 1054 0020 0276     		strb	r2, [r0, #24]
 276:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1055              		.loc 1 276 3 is_stmt 1 view .LVU196
 276:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1056              		.loc 1 276 36 is_stmt 0 view .LVU197
 1057 0022 80F82030 		strb	r3, [r0, #32]
 277:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1058              		.loc 1 277 3 is_stmt 1 view .LVU198
 277:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1059              		.loc 1 277 35 is_stmt 0 view .LVU199
 1060 0026 C362     		str	r3, [r0, #44]
 278:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1061              		.loc 1 278 3 is_stmt 1 view .LVU200
 278:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1062              		.loc 1 278 31 is_stmt 0 view .LVU201
 1063 0028 0F49     		ldr	r1, .L92+8
 1064 002a 8162     		str	r1, [r0, #40]
 279:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1065              		.loc 1 279 3 is_stmt 1 view .LVU202
 279:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1066              		.loc 1 279 24 is_stmt 0 view .LVU203
 1067 002c C360     		str	r3, [r0, #12]
 280:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1068              		.loc 1 280 3 is_stmt 1 view .LVU204
 280:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1069              		.loc 1 280 30 is_stmt 0 view .LVU205
ARM GAS  /tmp/cc6c1qkn.s 			page 49


 1070 002e C261     		str	r2, [r0, #28]
 281:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1071              		.loc 1 281 3 is_stmt 1 view .LVU206
 281:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1072              		.loc 1 281 36 is_stmt 0 view .LVU207
 1073 0030 80F83020 		strb	r2, [r0, #48]
 282:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1074              		.loc 1 282 3 is_stmt 1 view .LVU208
 282:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1075              		.loc 1 282 27 is_stmt 0 view .LVU209
 1076 0034 4261     		str	r2, [r0, #20]
 283:Core/Src/main.c ****   {
 1077              		.loc 1 283 3 is_stmt 1 view .LVU210
 283:Core/Src/main.c ****   {
 1078              		.loc 1 283 7 is_stmt 0 view .LVU211
 1079 0036 FFF7FEFF 		bl	HAL_ADC_Init
 1080              	.LVL83:
 283:Core/Src/main.c ****   {
 1081              		.loc 1 283 6 view .LVU212
 1082 003a 68B9     		cbnz	r0, .L90
 290:Core/Src/main.c ****   sConfig.Rank = 1;
 1083              		.loc 1 290 3 is_stmt 1 view .LVU213
 290:Core/Src/main.c ****   sConfig.Rank = 1;
 1084              		.loc 1 290 19 is_stmt 0 view .LVU214
 1085 003c 0B4B     		ldr	r3, .L92+12
 1086 003e 0093     		str	r3, [sp]
 291:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1087              		.loc 1 291 3 is_stmt 1 view .LVU215
 291:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1088              		.loc 1 291 16 is_stmt 0 view .LVU216
 1089 0040 0123     		movs	r3, #1
 1090 0042 0193     		str	r3, [sp, #4]
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1091              		.loc 1 292 3 is_stmt 1 view .LVU217
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1092              		.loc 1 292 24 is_stmt 0 view .LVU218
 1093 0044 0723     		movs	r3, #7
 1094 0046 0293     		str	r3, [sp, #8]
 293:Core/Src/main.c ****   {
 1095              		.loc 1 293 3 is_stmt 1 view .LVU219
 293:Core/Src/main.c ****   {
 1096              		.loc 1 293 7 is_stmt 0 view .LVU220
 1097 0048 6946     		mov	r1, sp
 1098 004a 0548     		ldr	r0, .L92
 1099 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1100              	.LVL84:
 293:Core/Src/main.c ****   {
 1101              		.loc 1 293 6 view .LVU221
 1102 0050 20B9     		cbnz	r0, .L91
 300:Core/Src/main.c **** 
 1103              		.loc 1 300 1 view .LVU222
 1104 0052 05B0     		add	sp, sp, #20
 1105              	.LCFI23:
 1106              		.cfi_remember_state
 1107              		.cfi_def_cfa_offset 4
 1108              		@ sp needed
 1109 0054 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cc6c1qkn.s 			page 50


 1110              	.L90:
 1111              	.LCFI24:
 1112              		.cfi_restore_state
 285:Core/Src/main.c ****   }
 1113              		.loc 1 285 5 is_stmt 1 view .LVU223
 1114 0058 FFF7FEFF 		bl	Error_Handler
 1115              	.LVL85:
 1116              	.L91:
 295:Core/Src/main.c ****   }
 1117              		.loc 1 295 5 view .LVU224
 1118 005c FFF7FEFF 		bl	Error_Handler
 1119              	.LVL86:
 1120              	.L93:
 1121              		.align	2
 1122              	.L92:
 1123 0060 00000000 		.word	.LANCHOR3
 1124 0064 00200140 		.word	1073815552
 1125 0068 0100000F 		.word	251658241
 1126 006c 12000010 		.word	268435474
 1127              		.cfi_endproc
 1128              	.LFE229:
 1130              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1131              		.align	1
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1136              	MX_USART2_UART_Init:
 1137              	.LFB230:
 308:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 1138              		.loc 1 308 1 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142 0000 08B5     		push	{r3, lr}
 1143              	.LCFI25:
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 3, -8
 1146              		.cfi_offset 14, -4
 316:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1147              		.loc 1 316 3 view .LVU226
 316:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1148              		.loc 1 316 19 is_stmt 0 view .LVU227
 1149 0002 0A48     		ldr	r0, .L98
 1150 0004 0A4B     		ldr	r3, .L98+4
 1151 0006 0360     		str	r3, [r0]
 317:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1152              		.loc 1 317 3 is_stmt 1 view .LVU228
 317:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1153              		.loc 1 317 24 is_stmt 0 view .LVU229
 1154 0008 4FF4E133 		mov	r3, #115200
 1155 000c 4360     		str	r3, [r0, #4]
 318:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1156              		.loc 1 318 3 is_stmt 1 view .LVU230
 318:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1157              		.loc 1 318 26 is_stmt 0 view .LVU231
 1158 000e 0023     		movs	r3, #0
 1159 0010 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/cc6c1qkn.s 			page 51


 319:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1160              		.loc 1 319 3 is_stmt 1 view .LVU232
 319:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1161              		.loc 1 319 24 is_stmt 0 view .LVU233
 1162 0012 C360     		str	r3, [r0, #12]
 320:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1163              		.loc 1 320 3 is_stmt 1 view .LVU234
 320:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1164              		.loc 1 320 22 is_stmt 0 view .LVU235
 1165 0014 0361     		str	r3, [r0, #16]
 321:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1166              		.loc 1 321 3 is_stmt 1 view .LVU236
 321:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1167              		.loc 1 321 20 is_stmt 0 view .LVU237
 1168 0016 0C22     		movs	r2, #12
 1169 0018 4261     		str	r2, [r0, #20]
 322:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1170              		.loc 1 322 3 is_stmt 1 view .LVU238
 322:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1171              		.loc 1 322 25 is_stmt 0 view .LVU239
 1172 001a 8361     		str	r3, [r0, #24]
 323:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1173              		.loc 1 323 3 is_stmt 1 view .LVU240
 323:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1174              		.loc 1 323 28 is_stmt 0 view .LVU241
 1175 001c C361     		str	r3, [r0, #28]
 324:Core/Src/main.c ****   {
 1176              		.loc 1 324 3 is_stmt 1 view .LVU242
 324:Core/Src/main.c ****   {
 1177              		.loc 1 324 7 is_stmt 0 view .LVU243
 1178 001e FFF7FEFF 		bl	HAL_UART_Init
 1179              	.LVL87:
 324:Core/Src/main.c ****   {
 1180              		.loc 1 324 6 view .LVU244
 1181 0022 00B9     		cbnz	r0, .L97
 331:Core/Src/main.c **** 
 1182              		.loc 1 331 1 view .LVU245
 1183 0024 08BD     		pop	{r3, pc}
 1184              	.L97:
 326:Core/Src/main.c ****   }
 1185              		.loc 1 326 5 is_stmt 1 view .LVU246
 1186 0026 FFF7FEFF 		bl	Error_Handler
 1187              	.LVL88:
 1188              	.L99:
 1189 002a 00BF     		.align	2
 1190              	.L98:
 1191 002c 00000000 		.word	.LANCHOR1
 1192 0030 00440040 		.word	1073759232
 1193              		.cfi_endproc
 1194              	.LFE230:
 1196              		.section	.text.SystemClock_Config,"ax",%progbits
 1197              		.align	1
 1198              		.global	SystemClock_Config
 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1203              	SystemClock_Config:
ARM GAS  /tmp/cc6c1qkn.s 			page 52


 1204              	.LFB228:
 211:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1205              		.loc 1 211 1 view -0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 80
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209 0000 00B5     		push	{lr}
 1210              	.LCFI26:
 1211              		.cfi_def_cfa_offset 4
 1212              		.cfi_offset 14, -4
 1213 0002 95B0     		sub	sp, sp, #84
 1214              	.LCFI27:
 1215              		.cfi_def_cfa_offset 88
 212:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1216              		.loc 1 212 3 view .LVU248
 212:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1217              		.loc 1 212 22 is_stmt 0 view .LVU249
 1218 0004 3022     		movs	r2, #48
 1219 0006 0021     		movs	r1, #0
 1220 0008 08A8     		add	r0, sp, #32
 1221 000a FFF7FEFF 		bl	memset
 1222              	.LVL89:
 213:Core/Src/main.c **** 
 1223              		.loc 1 213 3 is_stmt 1 view .LVU250
 213:Core/Src/main.c **** 
 1224              		.loc 1 213 22 is_stmt 0 view .LVU251
 1225 000e 0023     		movs	r3, #0
 1226 0010 0393     		str	r3, [sp, #12]
 1227 0012 0493     		str	r3, [sp, #16]
 1228 0014 0593     		str	r3, [sp, #20]
 1229 0016 0693     		str	r3, [sp, #24]
 1230 0018 0793     		str	r3, [sp, #28]
 217:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1231              		.loc 1 217 3 is_stmt 1 view .LVU252
 1232              	.LBB11:
 217:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1233              		.loc 1 217 3 view .LVU253
 1234 001a 0193     		str	r3, [sp, #4]
 217:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1235              		.loc 1 217 3 view .LVU254
 1236 001c 1E4A     		ldr	r2, .L106
 1237 001e 116C     		ldr	r1, [r2, #64]
 1238 0020 41F08051 		orr	r1, r1, #268435456
 1239 0024 1164     		str	r1, [r2, #64]
 217:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1240              		.loc 1 217 3 view .LVU255
 1241 0026 126C     		ldr	r2, [r2, #64]
 1242 0028 02F08052 		and	r2, r2, #268435456
 1243 002c 0192     		str	r2, [sp, #4]
 217:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1244              		.loc 1 217 3 view .LVU256
 1245 002e 019A     		ldr	r2, [sp, #4]
 1246              	.LBE11:
 217:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1247              		.loc 1 217 3 view .LVU257
 218:Core/Src/main.c **** 
 1248              		.loc 1 218 3 view .LVU258
ARM GAS  /tmp/cc6c1qkn.s 			page 53


 1249              	.LBB12:
 218:Core/Src/main.c **** 
 1250              		.loc 1 218 3 view .LVU259
 1251 0030 0293     		str	r3, [sp, #8]
 218:Core/Src/main.c **** 
 1252              		.loc 1 218 3 view .LVU260
 1253 0032 1A4A     		ldr	r2, .L106+4
 1254 0034 1168     		ldr	r1, [r2]
 1255 0036 41F44041 		orr	r1, r1, #49152
 1256 003a 1160     		str	r1, [r2]
 218:Core/Src/main.c **** 
 1257              		.loc 1 218 3 view .LVU261
 1258 003c 1268     		ldr	r2, [r2]
 1259 003e 02F44042 		and	r2, r2, #49152
 1260 0042 0292     		str	r2, [sp, #8]
 218:Core/Src/main.c **** 
 1261              		.loc 1 218 3 view .LVU262
 1262 0044 029A     		ldr	r2, [sp, #8]
 1263              	.LBE12:
 218:Core/Src/main.c **** 
 1264              		.loc 1 218 3 view .LVU263
 223:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1265              		.loc 1 223 3 view .LVU264
 223:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1266              		.loc 1 223 36 is_stmt 0 view .LVU265
 1267 0046 0221     		movs	r1, #2
 1268 0048 0891     		str	r1, [sp, #32]
 224:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1269              		.loc 1 224 3 is_stmt 1 view .LVU266
 224:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1270              		.loc 1 224 30 is_stmt 0 view .LVU267
 1271 004a 0122     		movs	r2, #1
 1272 004c 0B92     		str	r2, [sp, #44]
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1273              		.loc 1 225 3 is_stmt 1 view .LVU268
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1274              		.loc 1 225 41 is_stmt 0 view .LVU269
 1275 004e 1022     		movs	r2, #16
 1276 0050 0C92     		str	r2, [sp, #48]
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1277              		.loc 1 226 3 is_stmt 1 view .LVU270
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1278              		.loc 1 226 34 is_stmt 0 view .LVU271
 1279 0052 0E91     		str	r1, [sp, #56]
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1280              		.loc 1 227 3 is_stmt 1 view .LVU272
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1281              		.loc 1 227 35 is_stmt 0 view .LVU273
 1282 0054 0F93     		str	r3, [sp, #60]
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1283              		.loc 1 228 3 is_stmt 1 view .LVU274
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1284              		.loc 1 228 30 is_stmt 0 view .LVU275
 1285 0056 1092     		str	r2, [sp, #64]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1286              		.loc 1 229 3 is_stmt 1 view .LVU276
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
ARM GAS  /tmp/cc6c1qkn.s 			page 54


 1287              		.loc 1 229 30 is_stmt 0 view .LVU277
 1288 0058 4FF4A873 		mov	r3, #336
 1289 005c 1193     		str	r3, [sp, #68]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1290              		.loc 1 230 3 is_stmt 1 view .LVU278
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1291              		.loc 1 230 30 is_stmt 0 view .LVU279
 1292 005e 0423     		movs	r3, #4
 1293 0060 1293     		str	r3, [sp, #72]
 231:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1294              		.loc 1 231 3 is_stmt 1 view .LVU280
 231:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1295              		.loc 1 231 30 is_stmt 0 view .LVU281
 1296 0062 1393     		str	r3, [sp, #76]
 232:Core/Src/main.c ****   {
 1297              		.loc 1 232 3 is_stmt 1 view .LVU282
 232:Core/Src/main.c ****   {
 1298              		.loc 1 232 7 is_stmt 0 view .LVU283
 1299 0064 08A8     		add	r0, sp, #32
 1300 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1301              	.LVL90:
 232:Core/Src/main.c ****   {
 1302              		.loc 1 232 6 view .LVU284
 1303 006a 80B9     		cbnz	r0, .L104
 239:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1304              		.loc 1 239 3 is_stmt 1 view .LVU285
 239:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1305              		.loc 1 239 31 is_stmt 0 view .LVU286
 1306 006c 0F23     		movs	r3, #15
 1307 006e 0393     		str	r3, [sp, #12]
 241:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1308              		.loc 1 241 3 is_stmt 1 view .LVU287
 241:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1309              		.loc 1 241 34 is_stmt 0 view .LVU288
 1310 0070 0221     		movs	r1, #2
 1311 0072 0491     		str	r1, [sp, #16]
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1312              		.loc 1 242 3 is_stmt 1 view .LVU289
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1313              		.loc 1 242 35 is_stmt 0 view .LVU290
 1314 0074 0023     		movs	r3, #0
 1315 0076 0593     		str	r3, [sp, #20]
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1316              		.loc 1 243 3 is_stmt 1 view .LVU291
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1317              		.loc 1 243 36 is_stmt 0 view .LVU292
 1318 0078 4FF48052 		mov	r2, #4096
 1319 007c 0692     		str	r2, [sp, #24]
 244:Core/Src/main.c **** 
 1320              		.loc 1 244 3 is_stmt 1 view .LVU293
 244:Core/Src/main.c **** 
 1321              		.loc 1 244 36 is_stmt 0 view .LVU294
 1322 007e 0793     		str	r3, [sp, #28]
 246:Core/Src/main.c ****   {
 1323              		.loc 1 246 3 is_stmt 1 view .LVU295
 246:Core/Src/main.c ****   {
 1324              		.loc 1 246 7 is_stmt 0 view .LVU296
ARM GAS  /tmp/cc6c1qkn.s 			page 55


 1325 0080 03A8     		add	r0, sp, #12
 1326 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1327              	.LVL91:
 246:Core/Src/main.c ****   {
 1328              		.loc 1 246 6 view .LVU297
 1329 0086 20B9     		cbnz	r0, .L105
 250:Core/Src/main.c **** 
 1330              		.loc 1 250 1 view .LVU298
 1331 0088 15B0     		add	sp, sp, #84
 1332              	.LCFI28:
 1333              		.cfi_remember_state
 1334              		.cfi_def_cfa_offset 4
 1335              		@ sp needed
 1336 008a 5DF804FB 		ldr	pc, [sp], #4
 1337              	.L104:
 1338              	.LCFI29:
 1339              		.cfi_restore_state
 234:Core/Src/main.c ****   }
 1340              		.loc 1 234 5 is_stmt 1 view .LVU299
 1341 008e FFF7FEFF 		bl	Error_Handler
 1342              	.LVL92:
 1343              	.L105:
 248:Core/Src/main.c ****   }
 1344              		.loc 1 248 5 view .LVU300
 1345 0092 FFF7FEFF 		bl	Error_Handler
 1346              	.LVL93:
 1347              	.L107:
 1348 0096 00BF     		.align	2
 1349              	.L106:
 1350 0098 00380240 		.word	1073887232
 1351 009c 00700040 		.word	1073770496
 1352              		.cfi_endproc
 1353              	.LFE228:
 1355              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1356              		.align	2
 1357              	.LC14:
 1358 0000 5461736B 		.ascii	"Task03\000"
 1358      303300
 1359 0007 00       		.align	2
 1360              	.LC15:
 1361 0008 5461736B 		.ascii	"Task04\000"
 1361      303400
 1362 000f 00       		.align	2
 1363              	.LC16:
 1364 0010 5461736B 		.ascii	"Task05\000"
 1364      303500
 1365 0017 00       		.align	2
 1366              	.LC17:
 1367 0018 5461736B 		.ascii	"Task06\000"
 1367      303600
 1368 001f 00       		.align	2
 1369              	.LC18:
 1370 0020 74686520 		.ascii	"the  counting semaphore was succesfully created \015"
 1370      20636F75 
 1370      6E74696E 
 1370      67207365 
 1370      6D617068 
ARM GAS  /tmp/cc6c1qkn.s 			page 56


 1371 0051 00       		.ascii	"\000"
 1372 0052 0000     		.align	2
 1373              	.LC19:
 1374 0054 436F7553 		.ascii	"CouSemo count after is %ld\015\012\000"
 1374      656D6F20 
 1374      636F756E 
 1374      74206166 
 1374      74657220 
 1375 0071 000000   		.align	2
 1376              	.LC20:
 1377 0074 2D2D2D2D 		.ascii	"----> MAX COUNT = %ld ; INITIAL COUNT %ld \015\012\000"
 1377      3E204D41 
 1377      5820434F 
 1377      554E5420 
 1377      3D20256C 
 1378 00a1 000000   		.align	2
 1379              	.LC21:
 1380 00a4 7C2A2A20 		.ascii	"|** Start Scheduler **|\015\000"
 1380      53746172 
 1380      74205363 
 1380      68656475 
 1380      6C657220 
 1381              		.section	.text.main,"ax",%progbits
 1382              		.align	1
 1383              		.global	main
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1388              	main:
 1389              	.LFB227:
 103:Core/Src/main.c **** 
 1390              		.loc 1 103 1 view -0
 1391              		.cfi_startproc
 1392              		@ Volatile: function does not return.
 1393              		@ args = 0, pretend = 0, frame = 0
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395 0000 00B5     		push	{lr}
 1396              	.LCFI30:
 1397              		.cfi_def_cfa_offset 4
 1398              		.cfi_offset 14, -4
 1399 0002 83B0     		sub	sp, sp, #12
 1400              	.LCFI31:
 1401              		.cfi_def_cfa_offset 16
 112:Core/Src/main.c **** 
 1402              		.loc 1 112 3 view .LVU302
 1403 0004 FFF7FEFF 		bl	HAL_Init
 1404              	.LVL94:
 119:Core/Src/main.c **** 
 1405              		.loc 1 119 3 view .LVU303
 1406 0008 FFF7FEFF 		bl	SystemClock_Config
 1407              	.LVL95:
 126:Core/Src/main.c ****   MX_DMA_Init();
 1408              		.loc 1 126 3 view .LVU304
 1409 000c FFF7FEFF 		bl	MX_GPIO_Init
 1410              	.LVL96:
 127:Core/Src/main.c ****   MX_ADC1_Init();
 1411              		.loc 1 127 3 view .LVU305
ARM GAS  /tmp/cc6c1qkn.s 			page 57


 1412 0010 FFF7FEFF 		bl	MX_DMA_Init
 1413              	.LVL97:
 128:Core/Src/main.c ****   MX_USART2_UART_Init();
 1414              		.loc 1 128 3 view .LVU306
 1415 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1416              	.LVL98:
 129:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1417              		.loc 1 129 3 view .LVU307
 1418 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 1419              	.LVL99:
 132:Core/Src/main.c ****   TaskAdd(StartTask04, "Task04", 128*4, NULL, 6, &Task04Handle);
 1420              		.loc 1 132 3 view .LVU308
 1421 001c 384B     		ldr	r3, .L112
 1422 001e 0193     		str	r3, [sp, #4]
 1423 0020 0823     		movs	r3, #8
 1424 0022 0093     		str	r3, [sp]
 1425 0024 0023     		movs	r3, #0
 1426 0026 4FF40072 		mov	r2, #512
 1427 002a 3649     		ldr	r1, .L112+4
 1428 002c 3648     		ldr	r0, .L112+8
 1429 002e FFF7FEFF 		bl	TaskAdd
 1430              	.LVL100:
 133:Core/Src/main.c ****   TaskAdd(StartTask05, "Task05", 128*4, NULL, 4, &Task05Handle);
 1431              		.loc 1 133 3 view .LVU309
 1432 0032 364B     		ldr	r3, .L112+12
 1433 0034 0193     		str	r3, [sp, #4]
 1434 0036 0623     		movs	r3, #6
 1435 0038 0093     		str	r3, [sp]
 1436 003a 0023     		movs	r3, #0
 1437 003c 4FF40072 		mov	r2, #512
 1438 0040 3349     		ldr	r1, .L112+16
 1439 0042 3448     		ldr	r0, .L112+20
 1440 0044 FFF7FEFF 		bl	TaskAdd
 1441              	.LVL101:
 134:Core/Src/main.c ****   TaskAdd(StartTask06, "Task06", 128*4, NULL, 2, &Task06Handle);
 1442              		.loc 1 134 3 view .LVU310
 1443 0048 334B     		ldr	r3, .L112+24
 1444 004a 0193     		str	r3, [sp, #4]
 1445 004c 0423     		movs	r3, #4
 1446 004e 0093     		str	r3, [sp]
 1447 0050 0023     		movs	r3, #0
 1448 0052 4FF40072 		mov	r2, #512
 1449 0056 3149     		ldr	r1, .L112+28
 1450 0058 3148     		ldr	r0, .L112+32
 1451 005a FFF7FEFF 		bl	TaskAdd
 1452              	.LVL102:
 135:Core/Src/main.c ****   //Bi_Semo1 = xSemaphoreCreateBinary();
 1453              		.loc 1 135 3 view .LVU311
 1454 005e 314B     		ldr	r3, .L112+36
 1455 0060 0193     		str	r3, [sp, #4]
 1456 0062 0223     		movs	r3, #2
 1457 0064 0093     		str	r3, [sp]
 1458 0066 0023     		movs	r3, #0
 1459 0068 4FF40072 		mov	r2, #512
 1460 006c 2E49     		ldr	r1, .L112+40
 1461 006e 2F48     		ldr	r0, .L112+44
 1462 0070 FFF7FEFF 		bl	TaskAdd
ARM GAS  /tmp/cc6c1qkn.s 			page 58


 1463              	.LVL103:
 139:Core/Src/main.c ****   printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 1464              		.loc 1 139 3 view .LVU312
 139:Core/Src/main.c ****   printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 1465              		.loc 1 139 13 is_stmt 0 view .LVU313
 1466 0074 0021     		movs	r1, #0
 1467 0076 0320     		movs	r0, #3
 1468 0078 FFF7FEFF 		bl	xQueueCreateCountingSemaphore
 1469              	.LVL104:
 139:Core/Src/main.c ****   printf("CouSemo count is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 1470              		.loc 1 139 11 view .LVU314
 1471 007c 2C4C     		ldr	r4, .L112+48
 1472 007e 2060     		str	r0, [r4]
 140:Core/Src/main.c ****   if( CouSemo != NULL )
 1473              		.loc 1 140 3 is_stmt 1 view .LVU315
 1474 0080 FFF7FEFF 		bl	uxQueueMessagesWaiting
 1475              	.LVL105:
 1476 0084 0146     		mov	r1, r0
 1477 0086 2B48     		ldr	r0, .L112+52
 1478 0088 FFF7FEFF 		bl	printf
 1479              	.LVL106:
 141:Core/Src/main.c ****     			{
 1480              		.loc 1 141 3 view .LVU316
 141:Core/Src/main.c ****     			{
 1481              		.loc 1 141 15 is_stmt 0 view .LVU317
 1482 008c 2368     		ldr	r3, [r4]
 141:Core/Src/main.c ****     			{
 1483              		.loc 1 141 5 view .LVU318
 1484 008e 13B1     		cbz	r3, .L109
 143:Core/Src/main.c ****     			}
 1485              		.loc 1 143 5 is_stmt 1 view .LVU319
 1486 0090 2948     		ldr	r0, .L112+56
 1487 0092 FFF7FEFF 		bl	puts
 1488              	.LVL107:
 1489              	.L109:
 145:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
 1490              		.loc 1 145 3 view .LVU320
 1491 0096 264C     		ldr	r4, .L112+48
 1492 0098 0023     		movs	r3, #0
 1493 009a 1A46     		mov	r2, r3
 1494 009c 1946     		mov	r1, r3
 1495 009e 2068     		ldr	r0, [r4]
 1496 00a0 FFF7FEFF 		bl	xQueueGenericSend
 1497              	.LVL108:
 146:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
 1498              		.loc 1 146 3 view .LVU321
 1499 00a4 0023     		movs	r3, #0
 1500 00a6 1A46     		mov	r2, r3
 1501 00a8 1946     		mov	r1, r3
 1502 00aa 2068     		ldr	r0, [r4]
 1503 00ac FFF7FEFF 		bl	xQueueGenericSend
 1504              	.LVL109:
 147:Core/Src/main.c ****   xSemaphoreGive( CouSemo );
 1505              		.loc 1 147 3 view .LVU322
 1506 00b0 0023     		movs	r3, #0
 1507 00b2 1A46     		mov	r2, r3
 1508 00b4 1946     		mov	r1, r3
ARM GAS  /tmp/cc6c1qkn.s 			page 59


 1509 00b6 2068     		ldr	r0, [r4]
 1510 00b8 FFF7FEFF 		bl	xQueueGenericSend
 1511              	.LVL110:
 148:Core/Src/main.c ****   printf("CouSemo count after is %ld\r\n",uxSemaphoreGetCount(CouSemo));
 1512              		.loc 1 148 3 view .LVU323
 1513 00bc 0023     		movs	r3, #0
 1514 00be 1A46     		mov	r2, r3
 1515 00c0 1946     		mov	r1, r3
 1516 00c2 2068     		ldr	r0, [r4]
 1517 00c4 FFF7FEFF 		bl	xQueueGenericSend
 1518              	.LVL111:
 149:Core/Src/main.c ****   printf("----> MAX COUNT = %ld ; INITIAL COUNT %ld \r\n", uxMaxCount, uxInitialCount);
 1519              		.loc 1 149 3 view .LVU324
 1520 00c8 2068     		ldr	r0, [r4]
 1521 00ca FFF7FEFF 		bl	uxQueueMessagesWaiting
 1522              	.LVL112:
 1523 00ce 0146     		mov	r1, r0
 1524 00d0 1A48     		ldr	r0, .L112+60
 1525 00d2 FFF7FEFF 		bl	printf
 1526              	.LVL113:
 150:Core/Src/main.c ****   //printf("bi semo count is %d\r\n",uxSemaphoreGetCount(Bi_Semo1));
 1527              		.loc 1 150 3 view .LVU325
 1528 00d6 1A4B     		ldr	r3, .L112+64
 1529 00d8 1A68     		ldr	r2, [r3]
 1530 00da 1A4B     		ldr	r3, .L112+68
 1531 00dc 1968     		ldr	r1, [r3]
 1532 00de 1A48     		ldr	r0, .L112+72
 1533 00e0 FFF7FEFF 		bl	printf
 1534              	.LVL114:
 154:Core/Src/main.c ****   /*if( Bi_Semo1 == NULL )
 1535              		.loc 1 154 3 view .LVU326
 1536 00e4 2068     		ldr	r0, [r4]
 1537 00e6 FFF7FEFF 		bl	uxQueueMessagesWaiting
 1538              	.LVL115:
 1539 00ea 0146     		mov	r1, r0
 1540 00ec 1148     		ldr	r0, .L112+52
 1541 00ee FFF7FEFF 		bl	printf
 1542              	.LVL116:
 186:Core/Src/main.c ****   vTaskStartScheduler ();
 1543              		.loc 1 186 3 view .LVU327
 1544 00f2 1648     		ldr	r0, .L112+76
 1545 00f4 FFF7FEFF 		bl	puts
 1546              	.LVL117:
 187:Core/Src/main.c ****   
 1547              		.loc 1 187 3 view .LVU328
 1548 00f8 FFF7FEFF 		bl	vTaskStartScheduler
 1549              	.LVL118:
 1550              	.L110:
 197:Core/Src/main.c ****   {
 1551              		.loc 1 197 3 discriminator 1 view .LVU329
 202:Core/Src/main.c ****   /* USER CODE END 3 */
 1552              		.loc 1 202 3 discriminator 1 view .LVU330
 197:Core/Src/main.c ****   {
 1553              		.loc 1 197 9 discriminator 1 view .LVU331
 1554 00fc FEE7     		b	.L110
 1555              	.L113:
 1556 00fe 00BF     		.align	2
ARM GAS  /tmp/cc6c1qkn.s 			page 60


 1557              	.L112:
 1558 0100 00000000 		.word	.LANCHOR4
 1559 0104 00000000 		.word	.LC14
 1560 0108 00000000 		.word	StartTask03
 1561 010c 00000000 		.word	.LANCHOR5
 1562 0110 08000000 		.word	.LC15
 1563 0114 00000000 		.word	StartTask04
 1564 0118 00000000 		.word	.LANCHOR6
 1565 011c 10000000 		.word	.LC16
 1566 0120 00000000 		.word	StartTask05
 1567 0124 00000000 		.word	.LANCHOR7
 1568 0128 18000000 		.word	.LC17
 1569 012c 00000000 		.word	StartTask06
 1570 0130 00000000 		.word	.LANCHOR0
 1571 0134 18000000 		.word	.LC1
 1572 0138 20000000 		.word	.LC18
 1573 013c 54000000 		.word	.LC19
 1574 0140 00000000 		.word	.LANCHOR8
 1575 0144 00000000 		.word	.LANCHOR9
 1576 0148 74000000 		.word	.LC20
 1577 014c A4000000 		.word	.LC21
 1578              		.cfi_endproc
 1579              	.LFE227:
 1581              		.global	uxMaxCount
 1582              		.global	uxInitialCount
 1583              		.global	inkerMutex
 1584              		.global	inker
 1585              		.global	TaskList_Buffer
 1586              		.global	ClrScrFlag
 1587              		.global	CouSemo
 1588              		.global	Task06Handle
 1589              		.global	Task05Handle
 1590              		.global	Task04Handle
 1591              		.global	Task03Handle
 1592              		.global	Task02Handle
 1593              		.global	Task01Handle
 1594              		.global	huart2
 1595              		.global	hdma_adc1
 1596              		.global	hadc1
 1597              		.section	.bss.ClrScrFlag,"aw",%nobits
 1598              		.set	.LANCHOR2,. + 0
 1601              	ClrScrFlag:
 1602 0000 00       		.space	1
 1603              		.section	.bss.CouSemo,"aw",%nobits
 1604              		.align	2
 1605              		.set	.LANCHOR0,. + 0
 1608              	CouSemo:
 1609 0000 00000000 		.space	4
 1610              		.section	.bss.Task01Handle,"aw",%nobits
 1611              		.align	2
 1614              	Task01Handle:
 1615 0000 00000000 		.space	4
 1616              		.section	.bss.Task02Handle,"aw",%nobits
 1617              		.align	2
 1620              	Task02Handle:
 1621 0000 00000000 		.space	4
 1622              		.section	.bss.Task03Handle,"aw",%nobits
ARM GAS  /tmp/cc6c1qkn.s 			page 61


 1623              		.align	2
 1624              		.set	.LANCHOR4,. + 0
 1627              	Task03Handle:
 1628 0000 00000000 		.space	4
 1629              		.section	.bss.Task04Handle,"aw",%nobits
 1630              		.align	2
 1631              		.set	.LANCHOR5,. + 0
 1634              	Task04Handle:
 1635 0000 00000000 		.space	4
 1636              		.section	.bss.Task05Handle,"aw",%nobits
 1637              		.align	2
 1638              		.set	.LANCHOR6,. + 0
 1641              	Task05Handle:
 1642 0000 00000000 		.space	4
 1643              		.section	.bss.Task06Handle,"aw",%nobits
 1644              		.align	2
 1645              		.set	.LANCHOR7,. + 0
 1648              	Task06Handle:
 1649 0000 00000000 		.space	4
 1650              		.section	.bss.TaskList_Buffer,"aw",%nobits
 1651              		.align	2
 1654              	TaskList_Buffer:
 1655 0000 00000000 		.space	50
 1655      00000000 
 1655      00000000 
 1655      00000000 
 1655      00000000 
 1656              		.section	.bss.hadc1,"aw",%nobits
 1657              		.align	2
 1658              		.set	.LANCHOR3,. + 0
 1661              	hadc1:
 1662 0000 00000000 		.space	72
 1662      00000000 
 1662      00000000 
 1662      00000000 
 1662      00000000 
 1663              		.section	.bss.hdma_adc1,"aw",%nobits
 1664              		.align	2
 1667              	hdma_adc1:
 1668 0000 00000000 		.space	96
 1668      00000000 
 1668      00000000 
 1668      00000000 
 1668      00000000 
 1669              		.section	.bss.huart2,"aw",%nobits
 1670              		.align	2
 1671              		.set	.LANCHOR1,. + 0
 1674              	huart2:
 1675 0000 00000000 		.space	72
 1675      00000000 
 1675      00000000 
 1675      00000000 
 1675      00000000 
 1676              		.section	.bss.inker,"aw",%nobits
 1679              	inker:
 1680 0000 00       		.space	1
 1681              		.section	.bss.inkerMutex,"aw",%nobits
ARM GAS  /tmp/cc6c1qkn.s 			page 62


 1684              	inkerMutex:
 1685 0000 00       		.space	1
 1686              		.section	.bss.uxInitialCount,"aw",%nobits
 1687              		.align	2
 1688              		.set	.LANCHOR8,. + 0
 1691              	uxInitialCount:
 1692 0000 00000000 		.space	4
 1693              		.section	.data.uxMaxCount,"aw"
 1694              		.align	2
 1695              		.set	.LANCHOR9,. + 0
 1698              	uxMaxCount:
 1699 0000 03000000 		.word	3
 1700              		.text
 1701              	.Letext0:
 1702              		.file 3 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 1703              		.file 4 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 1704              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1705              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1706              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1707              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1708              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1709              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1710              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1711              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1712              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1713              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1714              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1715              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1716              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1717              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1718              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1719              		.file 20 "/usr/local/arm-none-eabi/include/stdio.h"
 1720              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1721              		.file 22 "<built-in>"
ARM GAS  /tmp/cc6c1qkn.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6c1qkn.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc6c1qkn.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc6c1qkn.s:175    .text.MX_GPIO_Init:00000000000000ac $d
     /tmp/cc6c1qkn.s:182    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc6c1qkn.s:187    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc6c1qkn.s:236    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc6c1qkn.s:241    .rodata.StartTask03.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:251    .text.StartTask03:0000000000000000 $t
     /tmp/cc6c1qkn.s:257    .text.StartTask03:0000000000000000 StartTask03
     /tmp/cc6c1qkn.s:313    .text.StartTask03:000000000000003c $d
     /tmp/cc6c1qkn.s:321    .text.StartTask04:0000000000000000 $t
     /tmp/cc6c1qkn.s:327    .text.StartTask04:0000000000000000 StartTask04
     /tmp/cc6c1qkn.s:387    .text.StartTask04:0000000000000040 $d
     /tmp/cc6c1qkn.s:395    .rodata.StartTask05.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:399    .text.StartTask05:0000000000000000 $t
     /tmp/cc6c1qkn.s:405    .text.StartTask05:0000000000000000 StartTask05
     /tmp/cc6c1qkn.s:461    .text.StartTask05:000000000000003c $d
     /tmp/cc6c1qkn.s:469    .rodata.StartTask06.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:473    .text.StartTask06:0000000000000000 $t
     /tmp/cc6c1qkn.s:479    .text.StartTask06:0000000000000000 StartTask06
     /tmp/cc6c1qkn.s:535    .text.StartTask06:0000000000000038 $d
     /tmp/cc6c1qkn.s:543    .text.__io_putchar:0000000000000000 $t
     /tmp/cc6c1qkn.s:549    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cc6c1qkn.s:585    .text.__io_putchar:000000000000001c $d
     /tmp/cc6c1qkn.s:590    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cc6c1qkn.s:596    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cc6c1qkn.s:632    .text.HAL_GPIO_EXTI_Callback:000000000000001c $d
     /tmp/cc6c1qkn.s:638    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc6c1qkn.s:644    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc6c1qkn.s:660    .rodata.TaskAdd.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:667    .text.TaskAdd:0000000000000000 $t
     /tmp/cc6c1qkn.s:673    .text.TaskAdd:0000000000000000 TaskAdd
     /tmp/cc6c1qkn.s:743    .text.TaskAdd:0000000000000038 $d
     /tmp/cc6c1qkn.s:749    .rodata.KillTask.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:753    .text.KillTask:0000000000000000 $t
     /tmp/cc6c1qkn.s:759    .text.KillTask:0000000000000000 KillTask
     /tmp/cc6c1qkn.s:798    .text.KillTask:0000000000000020 $d
     /tmp/cc6c1qkn.s:803    .rodata.getStatusName.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:822    .text.getStatusName:0000000000000000 $t
     /tmp/cc6c1qkn.s:828    .text.getStatusName:0000000000000000 getStatusName
     /tmp/cc6c1qkn.s:847    .text.getStatusName:000000000000000c $d
     /tmp/cc6c1qkn.s:918    .text.getStatusName:0000000000000044 $d
     /tmp/cc6c1qkn.s:928    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc6c1qkn.s:934    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc6c1qkn.s:968    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc6c1qkn.s:973    .text.Error_Handler:0000000000000000 $t
     /tmp/cc6c1qkn.s:979    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6c1qkn.s:1011   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc6c1qkn.s:1016   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc6c1qkn.s:1123   .text.MX_ADC1_Init:0000000000000060 $d
     /tmp/cc6c1qkn.s:1131   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc6c1qkn.s:1136   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc6c1qkn.s:1191   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/cc6c1qkn.s:1197   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6c1qkn.s:1203   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /tmp/cc6c1qkn.s 			page 64


     /tmp/cc6c1qkn.s:1350   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc6c1qkn.s:1356   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc6c1qkn.s:1382   .text.main:0000000000000000 $t
     /tmp/cc6c1qkn.s:1388   .text.main:0000000000000000 main
     /tmp/cc6c1qkn.s:1558   .text.main:0000000000000100 $d
     /tmp/cc6c1qkn.s:1698   .data.uxMaxCount:0000000000000000 uxMaxCount
     /tmp/cc6c1qkn.s:1691   .bss.uxInitialCount:0000000000000000 uxInitialCount
     /tmp/cc6c1qkn.s:1684   .bss.inkerMutex:0000000000000000 inkerMutex
     /tmp/cc6c1qkn.s:1679   .bss.inker:0000000000000000 inker
     /tmp/cc6c1qkn.s:1654   .bss.TaskList_Buffer:0000000000000000 TaskList_Buffer
     /tmp/cc6c1qkn.s:1601   .bss.ClrScrFlag:0000000000000000 ClrScrFlag
     /tmp/cc6c1qkn.s:1608   .bss.CouSemo:0000000000000000 CouSemo
     /tmp/cc6c1qkn.s:1648   .bss.Task06Handle:0000000000000000 Task06Handle
     /tmp/cc6c1qkn.s:1641   .bss.Task05Handle:0000000000000000 Task05Handle
     /tmp/cc6c1qkn.s:1634   .bss.Task04Handle:0000000000000000 Task04Handle
     /tmp/cc6c1qkn.s:1627   .bss.Task03Handle:0000000000000000 Task03Handle
     /tmp/cc6c1qkn.s:1620   .bss.Task02Handle:0000000000000000 Task02Handle
     /tmp/cc6c1qkn.s:1614   .bss.Task01Handle:0000000000000000 Task01Handle
     /tmp/cc6c1qkn.s:1674   .bss.huart2:0000000000000000 huart2
     /tmp/cc6c1qkn.s:1667   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/cc6c1qkn.s:1661   .bss.hadc1:0000000000000000 hadc1
     /tmp/cc6c1qkn.s:1602   .bss.ClrScrFlag:0000000000000000 $d
     /tmp/cc6c1qkn.s:1604   .bss.CouSemo:0000000000000000 $d
     /tmp/cc6c1qkn.s:1611   .bss.Task01Handle:0000000000000000 $d
     /tmp/cc6c1qkn.s:1617   .bss.Task02Handle:0000000000000000 $d
     /tmp/cc6c1qkn.s:1623   .bss.Task03Handle:0000000000000000 $d
     /tmp/cc6c1qkn.s:1630   .bss.Task04Handle:0000000000000000 $d
     /tmp/cc6c1qkn.s:1637   .bss.Task05Handle:0000000000000000 $d
     /tmp/cc6c1qkn.s:1644   .bss.Task06Handle:0000000000000000 $d
     /tmp/cc6c1qkn.s:1651   .bss.TaskList_Buffer:0000000000000000 $d
     /tmp/cc6c1qkn.s:1657   .bss.hadc1:0000000000000000 $d
     /tmp/cc6c1qkn.s:1664   .bss.hdma_adc1:0000000000000000 $d
     /tmp/cc6c1qkn.s:1670   .bss.huart2:0000000000000000 $d
     /tmp/cc6c1qkn.s:1680   .bss.inker:0000000000000000 $d
     /tmp/cc6c1qkn.s:1685   .bss.inkerMutex:0000000000000000 $d
     /tmp/cc6c1qkn.s:1687   .bss.uxInitialCount:0000000000000000 $d
     /tmp/cc6c1qkn.s:1694   .data.uxMaxCount:0000000000000000 $d
     /tmp/cc6c1qkn.s:852    .text.getStatusName:0000000000000011 $d
     /tmp/cc6c1qkn.s:852    .text.getStatusName:0000000000000012 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
puts
uxQueueMessagesWaiting
printf
vTaskDelay
xQueueSemaphoreTake
HAL_UART_Transmit
HAL_GPIO_TogglePin
xTaskCreate
pcTaskGetName
vTaskDelete
HAL_IncTick
HAL_ADC_Init
ARM GAS  /tmp/cc6c1qkn.s 			page 65


HAL_ADC_ConfigChannel
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
xQueueCreateCountingSemaphore
xQueueGenericSend
vTaskStartScheduler
