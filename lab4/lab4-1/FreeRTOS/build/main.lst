ARM GAS  /tmp/cciVV68U.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB232:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** 
   2:Core/Src/main.c **** /* USER CODE BEGIN Header */
   3:Core/Src/main.c **** /**
   4:Core/Src/main.c ****   ******************************************************************************
   5:Core/Src/main.c ****   * @file           : main.c
   6:Core/Src/main.c ****   * @brief          : Main program body
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "FreeRTOS.h"
  26:Core/Src/main.c **** #include "task.h"
  27:Core/Src/main.c **** #include "timers.h"
  28:Core/Src/main.c **** #include "queue.h"
  29:Core/Src/main.c **** #include "semphr.h"
  30:Core/Src/main.c **** #include "event_groups.h"
  31:Core/Src/main.c **** #include <stdio.h>
ARM GAS  /tmp/cciVV68U.s 			page 2


  32:Core/Src/main.c **** #include <string.h>
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  53:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  54:Core/Src/main.c **** UART_HandleTypeDef huart2;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** TaskHandle_t Task01Handle = NULL;
  58:Core/Src/main.c **** TaskHandle_t Task02Handle = NULL;
  59:Core/Src/main.c **** TaskHandle_t Task03Handle = NULL;
  60:Core/Src/main.c **** TaskHandle_t Task04Handle = NULL;
  61:Core/Src/main.c **** TaskHandle_t Task05Handle = NULL;
  62:Core/Src/main.c **** TaskHandle_t Task06Handle = NULL;
  63:Core/Src/main.c **** SemaphoreHandle_t Bi_Semo1 = NULL;
  64:Core/Src/main.c **** SemaphoreHandle_t Muto1 = NULL;
  65:Core/Src/main.c **** /* USER CODE END PV */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  68:Core/Src/main.c **** void SystemClock_Config(void);
  69:Core/Src/main.c **** static void MX_GPIO_Init(void);
  70:Core/Src/main.c **** static void MX_DMA_Init(void);
  71:Core/Src/main.c **** static void MX_ADC1_Init(void);
  72:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  75:Core/Src/main.c **** void StartTask03(void *argument);
  76:Core/Src/main.c **** void StartTask04(void *argument);
  77:Core/Src/main.c **** void StartTask05(void *argument);
  78:Core/Src/main.c **** void StartTask06(void *argument);
  79:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument),char * TaskName,uint16_t StackSize,int *pvPara
  80:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle);
  81:Core/Src/main.c **** void getStatusName(int a);
  82:Core/Src/main.c **** uint8_t ClrScrFlag = 0;
  83:Core/Src/main.c **** char TaskList_Buffer[50];
  84:Core/Src/main.c **** uint8_t inker = 0;
  85:Core/Src/main.c **** uint8_t inkerMutex = 0;
  86:Core/Src/main.c **** /* USER CODE END PFP */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
ARM GAS  /tmp/cciVV68U.s 			page 3


  89:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE END 0 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /**
  94:Core/Src/main.c ****   * @brief  The application entry point.
  95:Core/Src/main.c ****   * @retval int
  96:Core/Src/main.c ****   */
  97:Core/Src/main.c **** int main(void)
  98:Core/Src/main.c **** {
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END 1 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Core/Src/main.c ****   HAL_Init();
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE END Init */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Configure the system clock */
 114:Core/Src/main.c ****   SystemClock_Config();
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE END SysInit */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Initialize all configured peripherals */
 121:Core/Src/main.c ****   MX_GPIO_Init();
 122:Core/Src/main.c ****   MX_DMA_Init();
 123:Core/Src/main.c ****   MX_ADC1_Init();
 124:Core/Src/main.c ****   MX_USART2_UART_Init();
 125:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 126:Core/Src/main.c ****   
 127:Core/Src/main.c ****   TaskAdd(StartTask03, "Task03", 128*4, NULL, 8, &Task03Handle);
 128:Core/Src/main.c ****   TaskAdd(StartTask04, "Task04", 128*4, NULL, 6, &Task04Handle);
 129:Core/Src/main.c ****   TaskAdd(StartTask05, "Task05", 128*4, NULL, 4, &Task05Handle);
 130:Core/Src/main.c ****   TaskAdd(StartTask06, "Task06", 128*4, NULL, 2, &Task06Handle);
 131:Core/Src/main.c ****   Bi_Semo1 = xSemaphoreCreateBinary();
 132:Core/Src/main.c ****   Muto1 = xSemaphoreCreateMutex();
 133:Core/Src/main.c ****   
 134:Core/Src/main.c ****   printf("bi semo count is %d\r\n",uxSemaphoreGetCount(Bi_Semo1));
 135:Core/Src/main.c ****   printf("giving Bi_semo1\r\n");
 136:Core/Src/main.c ****   xSemaphoreGive(Bi_Semo1);
 137:Core/Src/main.c ****   printf("bi semo count is %d\r\n",uxSemaphoreGetCount(Bi_Semo1));
 138:Core/Src/main.c ****   /*if( Bi_Semo1 == NULL )
 139:Core/Src/main.c ****     {
 140:Core/Src/main.c **** 	printf("bisemo not created\r\n");
 141:Core/Src/main.c ****     }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****     else
 144:Core/Src/main.c ****     {
 145:Core/Src/main.c **** 	printf("bisemo created\r\n");
ARM GAS  /tmp/cciVV68U.s 			page 4


 146:Core/Src/main.c ****     }
 147:Core/Src/main.c ****     
 148:Core/Src/main.c ****     if( Muto1 == NULL )
 149:Core/Src/main.c ****     {
 150:Core/Src/main.c **** 	printf(" muto not created\r\n");
 151:Core/Src/main.c ****     }
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     else
 154:Core/Src/main.c ****     {
 155:Core/Src/main.c **** 	printf(" muto created\r\n");
 156:Core/Src/main.c ****     }
 157:Core/Src/main.c ****     */
 158:Core/Src/main.c ****     
 159:Core/Src/main.c ****   //  printf("!!Setup!!\r\n");    
 160:Core/Src/main.c ****   //  if( xTaskCreate( StartTask01, "Task01", 512, NULL, 8, &Task01Handle ) != pdPASS ) {
 161:Core/Src/main.c ****   //    printf("---->Failed to add Task01\r\n");
 162:Core/Src/main.c ****   //  }    
 163:Core/Src/main.c ****   //  if( xTaskCreate( StartTask02, "Task02", 512, NULL, 6, &Task02Handle ) != pdPASS ) {
 164:Core/Src/main.c ****   //    printf("---->Failed to add Task02\r\n");
 165:Core/Src/main.c ****   //  }
 166:Core/Src/main.c ****   
 167:Core/Src/main.c ****   	
 168:Core/Src/main.c ****   /* Start the real time scheduler with preemption */
 169:Core/Src/main.c ****   printf("|** Start Scheduler **|\r\n");
 170:Core/Src/main.c ****   vTaskStartScheduler ();
 171:Core/Src/main.c ****   
 172:Core/Src/main.c ****   //if(TaskAdd(StartTask03, "Task03", 512, NULL, 8, &Task03Handle) != pdPASS)
 173:Core/Src/main.c ****   /* USER CODE END 2 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler
 176:Core/Src/main.c ****      unless a task calls vTaskEndScheduler () */
 177:Core/Src/main.c **** 	
 178:Core/Src/main.c ****   /* Infinite loop */
 179:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 180:Core/Src/main.c ****   while (1)
 181:Core/Src/main.c ****   {
 182:Core/Src/main.c ****     /* USER CODE END WHILE */
 183:Core/Src/main.c **** 	
 184:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 185:Core/Src/main.c ****   }
 186:Core/Src/main.c ****   /* USER CODE END 3 */
 187:Core/Src/main.c **** }
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** /**
 190:Core/Src/main.c ****   * @brief System Clock Configuration
 191:Core/Src/main.c ****   * @retval None
 192:Core/Src/main.c ****   */
 193:Core/Src/main.c **** void SystemClock_Config(void)
 194:Core/Src/main.c **** {
 195:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 196:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 199:Core/Src/main.c ****   */
 200:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 202:Core/Src/main.c **** 
ARM GAS  /tmp/cciVV68U.s 			page 5


 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 204:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 205:Core/Src/main.c ****   */
 206:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 208:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 215:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 216:Core/Src/main.c ****   {
 217:Core/Src/main.c ****     Error_Handler();
 218:Core/Src/main.c ****   }
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 223:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 224:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 225:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     Error_Handler();
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c **** }
 234:Core/Src/main.c **** 
 235:Core/Src/main.c **** /**
 236:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 237:Core/Src/main.c ****   * @param None
 238:Core/Src/main.c ****   * @retval None
 239:Core/Src/main.c ****   */
 240:Core/Src/main.c **** static void MX_ADC1_Init(void)
 241:Core/Src/main.c **** {
 242:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c ****   hadc1.Instance = ADC1;
 255:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 256:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 257:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 258:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 259:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
ARM GAS  /tmp/cciVV68U.s 			page 6


 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 263:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 264:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 265:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 266:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 267:Core/Src/main.c ****   {
 268:Core/Src/main.c ****     Error_Handler();
 269:Core/Src/main.c ****   }
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 274:Core/Src/main.c ****   sConfig.Rank = 1;
 275:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 276:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 277:Core/Src/main.c ****   {
 278:Core/Src/main.c ****     Error_Handler();
 279:Core/Src/main.c ****   }
 280:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 283:Core/Src/main.c **** }
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** /**
 286:Core/Src/main.c ****   * @brief USART2 Initialization Function
 287:Core/Src/main.c ****   * @param None
 288:Core/Src/main.c ****   * @retval None
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 291:Core/Src/main.c **** {
 292:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 299:Core/Src/main.c ****   huart2.Instance = USART2;
 300:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 301:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 302:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 303:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 304:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 305:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 306:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 307:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 308:Core/Src/main.c ****   {
 309:Core/Src/main.c ****     Error_Handler();
 310:Core/Src/main.c ****   }
 311:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 314:Core/Src/main.c **** }
 315:Core/Src/main.c **** 
 316:Core/Src/main.c **** /**
ARM GAS  /tmp/cciVV68U.s 			page 7


 317:Core/Src/main.c ****   * Enable DMA controller clock
 318:Core/Src/main.c ****   */
 319:Core/Src/main.c **** static void MX_DMA_Init(void)
 320:Core/Src/main.c **** {
 321:Core/Src/main.c ****   /* DMA controller clock enable */
 322:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* DMA interrupt init */
 325:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 326:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 327:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 328:Core/Src/main.c **** }
 329:Core/Src/main.c **** 
 330:Core/Src/main.c **** /**
 331:Core/Src/main.c ****   * @brief GPIO Initialization Function
 332:Core/Src/main.c ****   * @param None
 333:Core/Src/main.c ****   * @retval None
 334:Core/Src/main.c ****   */
 335:Core/Src/main.c **** static void MX_GPIO_Init(void)
 336:Core/Src/main.c **** {
  28              		.loc 1 336 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 337:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 337 3 view .LVU1
  42              		.loc 1 337 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 338:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 339:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 342:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 342 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 342 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 342 3 view .LVU5
  54 0012 264B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 342 3 view .LVU6
ARM GAS  /tmp/cciVV68U.s 			page 8


  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 342 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 342 3 view .LVU8
 343:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 343 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 343 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 343 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 343 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 343 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 343 3 view .LVU14
 344:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 344 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 344 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 344 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 344 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 344 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 344 3 view .LVU20
 345:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 345 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 345 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 345 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 345 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 345 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
ARM GAS  /tmp/cciVV68U.s 			page 9


 113              		.loc 1 345 3 view .LVU26
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 348:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 348 3 view .LVU27
 115 0062 134D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 351:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 351 3 view .LVU28
 122              		.loc 1 351 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 352:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 125              		.loc 1 352 3 is_stmt 1 view .LVU30
 126              		.loc 1 352 24 is_stmt 0 view .LVU31
 127 0074 4FF40413 		mov	r3, #2162688
 128 0078 0693     		str	r3, [sp, #24]
 353:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 353 3 is_stmt 1 view .LVU32
 130              		.loc 1 353 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 354:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 354 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 0D48     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 357:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 137              		.loc 1 357 3 view .LVU35
 138              		.loc 1 357 23 is_stmt 0 view .LVU36
 139 0084 2023     		movs	r3, #32
 140 0086 0593     		str	r3, [sp, #20]
 358:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 358 3 is_stmt 1 view .LVU37
 142              		.loc 1 358 24 is_stmt 0 view .LVU38
 143 0088 0123     		movs	r3, #1
 144 008a 0693     		str	r3, [sp, #24]
 359:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 359 3 is_stmt 1 view .LVU39
 146              		.loc 1 359 24 is_stmt 0 view .LVU40
 147 008c 0794     		str	r4, [sp, #28]
 360:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 360 3 is_stmt 1 view .LVU41
 149              		.loc 1 360 25 is_stmt 0 view .LVU42
 150 008e 0894     		str	r4, [sp, #32]
 361:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 361 3 is_stmt 1 view .LVU43
 152 0090 05A9     		add	r1, sp, #20
 153 0092 2846     		mov	r0, r5
ARM GAS  /tmp/cciVV68U.s 			page 10


 154 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* EXTI interrupt init*/
 364:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 156              		.loc 1 364 3 view .LVU44
 157 0098 2246     		mov	r2, r4
 158 009a 0521     		movs	r1, #5
 159 009c 2820     		movs	r0, #40
 160 009e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 161              	.LVL3:
 365:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 162              		.loc 1 365 3 view .LVU45
 163 00a2 2820     		movs	r0, #40
 164 00a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 165              	.LVL4:
 366:Core/Src/main.c **** 
 367:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 368:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 369:Core/Src/main.c **** }
 166              		.loc 1 369 1 is_stmt 0 view .LVU46
 167 00a8 0BB0     		add	sp, sp, #44
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 12
 170              		@ sp needed
 171 00aa 30BD     		pop	{r4, r5, pc}
 172              	.L4:
 173              		.align	2
 174              	.L3:
 175 00ac 00380240 		.word	1073887232
 176 00b0 00000240 		.word	1073872896
 177 00b4 00080240 		.word	1073874944
 178              		.cfi_endproc
 179              	.LFE232:
 181              		.section	.text.MX_DMA_Init,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	MX_DMA_Init:
 188              	.LFB231:
 320:Core/Src/main.c ****   /* DMA controller clock enable */
 189              		.loc 1 320 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193 0000 00B5     		push	{lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 14, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 16
 322:Core/Src/main.c **** 
 200              		.loc 1 322 3 view .LVU48
 201              	.LBB8:
 322:Core/Src/main.c **** 
ARM GAS  /tmp/cciVV68U.s 			page 11


 202              		.loc 1 322 3 view .LVU49
 203 0004 0022     		movs	r2, #0
 204 0006 0192     		str	r2, [sp, #4]
 322:Core/Src/main.c **** 
 205              		.loc 1 322 3 view .LVU50
 206 0008 094B     		ldr	r3, .L7
 207 000a 196B     		ldr	r1, [r3, #48]
 208 000c 41F48001 		orr	r1, r1, #4194304
 209 0010 1963     		str	r1, [r3, #48]
 322:Core/Src/main.c **** 
 210              		.loc 1 322 3 view .LVU51
 211 0012 1B6B     		ldr	r3, [r3, #48]
 212 0014 03F48003 		and	r3, r3, #4194304
 213 0018 0193     		str	r3, [sp, #4]
 322:Core/Src/main.c **** 
 214              		.loc 1 322 3 view .LVU52
 215 001a 019B     		ldr	r3, [sp, #4]
 216              	.LBE8:
 322:Core/Src/main.c **** 
 217              		.loc 1 322 3 view .LVU53
 326:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 218              		.loc 1 326 3 view .LVU54
 219 001c 0521     		movs	r1, #5
 220 001e 3820     		movs	r0, #56
 221 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 222              	.LVL5:
 327:Core/Src/main.c **** }
 223              		.loc 1 327 3 view .LVU55
 224 0024 3820     		movs	r0, #56
 225 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 226              	.LVL6:
 328:Core/Src/main.c **** 
 227              		.loc 1 328 1 is_stmt 0 view .LVU56
 228 002a 03B0     		add	sp, sp, #12
 229              	.LCFI5:
 230              		.cfi_def_cfa_offset 4
 231              		@ sp needed
 232 002c 5DF804FB 		ldr	pc, [sp], #4
 233              	.L8:
 234              		.align	2
 235              	.L7:
 236 0030 00380240 		.word	1073887232
 237              		.cfi_endproc
 238              	.LFE231:
 240              		.section	.rodata.StartTask03.str1.4,"aMS",%progbits,1
 241              		.align	2
 242              	.LC0:
 243 0000 7461736B 		.ascii	"task03 takes binary semaphor\015\000"
 243      30332074 
 243      616B6573 
 243      2062696E 
 243      61727920 
 244 001e 0000     		.align	2
 245              	.LC1:
 246 0020 7461736B 		.ascii	"task03 updating shared resources\015\000"
 246      30332075 
 246      70646174 
ARM GAS  /tmp/cciVV68U.s 			page 12


 246      696E6720 
 246      73686172 
 247 0042 0000     		.align	2
 248              	.LC2:
 249 0044 25642069 		.ascii	"%d in task 3\015\012\000"
 249      6E207461 
 249      736B2033 
 249      0D0A00
 250 0053 00       		.align	2
 251              	.LC3:
 252 0054 7461736B 		.ascii	"task3 didnt get bi_semo1 \015\000"
 252      33206469 
 252      646E7420 
 252      67657420 
 252      62695F73 
 253              		.section	.text.StartTask03,"ax",%progbits
 254              		.align	1
 255              		.global	StartTask03
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 260              	StartTask03:
 261              	.LFB233:
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 372:Core/Src/main.c **** void StartTask03(void *argument)
 373:Core/Src/main.c **** {
 262              		.loc 1 373 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ Volatile: function does not return.
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              	.LVL7:
 268              		.loc 1 373 1 is_stmt 0 view .LVU58
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 274 0002 1CE0     		b	.L10
 275              	.LVL8:
 276              	.L14:
 374:Core/Src/main.c ****   
 375:Core/Src/main.c ****   for(;;)
 376:Core/Src/main.c ****   { 
 377:Core/Src/main.c ****     //printf("_____I N   T A S K   3_____\r\n\r\n");
 378:Core/Src/main.c ****    
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****         /* See if we can obtain the semaphore. If the semaphore is not
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****            available wait 10 ticks to see if it becomes free. */
 383:Core/Src/main.c **** 	//xSemaphoreGive( Bi_Semo1 );
 384:Core/Src/main.c **** 	  	
 385:Core/Src/main.c ****     		if( xSemaphoreTake( Bi_Semo1, 1000 ) == pdTRUE )
 386:Core/Src/main.c ****         		{
 387:Core/Src/main.c ****         			printf("task03 takes binary semaphor\r\n");
 277              		.loc 1 387 12 is_stmt 1 view .LVU59
ARM GAS  /tmp/cciVV68U.s 			page 13


 278 0004 1648     		ldr	r0, .L15
 279 0006 FFF7FEFF 		bl	puts
 280              	.LVL9:
 388:Core/Src/main.c ****         			
 389:Core/Src/main.c ****         			
 390:Core/Src/main.c ****         			vTaskDelay(1500);
 281              		.loc 1 390 12 view .LVU60
 282 000a 40F2DC50 		movw	r0, #1500
 283 000e FFF7FEFF 		bl	vTaskDelay
 284              	.LVL10:
 391:Core/Src/main.c ****         			printf("task03 updating shared resources\r\n");
 285              		.loc 1 391 12 view .LVU61
 286 0012 1448     		ldr	r0, .L15+4
 287 0014 FFF7FEFF 		bl	puts
 288              	.LVL11:
 392:Core/Src/main.c **** 				inker = inker+1;
 289              		.loc 1 392 5 view .LVU62
 290              		.loc 1 392 18 is_stmt 0 view .LVU63
 291 0018 134B     		ldr	r3, .L15+8
 292 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 293 001c 0131     		adds	r1, r1, #1
 294 001e C9B2     		uxtb	r1, r1
 295              		.loc 1 392 11 view .LVU64
 296 0020 1970     		strb	r1, [r3]
 393:Core/Src/main.c **** 				
 394:Core/Src/main.c **** 				printf("%d in task 3\r\n", inker);
 297              		.loc 1 394 5 is_stmt 1 view .LVU65
 298 0022 1248     		ldr	r0, .L15+12
 299 0024 FFF7FEFF 		bl	printf
 300              	.LVL12:
 395:Core/Src/main.c **** 				xSemaphoreGive( Bi_Semo1 );
 301              		.loc 1 395 5 view .LVU66
 302 0028 0023     		movs	r3, #0
 303 002a 1A46     		mov	r2, r3
 304 002c 1946     		mov	r1, r3
 305 002e 1048     		ldr	r0, .L15+16
 306 0030 0068     		ldr	r0, [r0]
 307 0032 FFF7FEFF 		bl	xQueueGenericSend
 308              	.LVL13:
 396:Core/Src/main.c **** 				vTaskDelay(1500);
 309              		.loc 1 396 5 view .LVU67
 310 0036 40F2DC50 		movw	r0, #1500
 311 003a FFF7FEFF 		bl	vTaskDelay
 312              	.LVL14:
 313              	.L10:
 375:Core/Src/main.c ****   { 
 314              		.loc 1 375 3 view .LVU68
 385:Core/Src/main.c ****         		{
 315              		.loc 1 385 7 view .LVU69
 385:Core/Src/main.c ****         		{
 316              		.loc 1 385 11 is_stmt 0 view .LVU70
 317 003e 4FF47A71 		mov	r1, #1000
 318 0042 0B4B     		ldr	r3, .L15+16
 319 0044 1868     		ldr	r0, [r3]
 320 0046 FFF7FEFF 		bl	xQueueSemaphoreTake
 321              	.LVL15:
 385:Core/Src/main.c ****         		{
ARM GAS  /tmp/cciVV68U.s 			page 14


 322              		.loc 1 385 9 view .LVU71
 323 004a 0128     		cmp	r0, #1
 324 004c DAD0     		beq	.L14
 397:Core/Src/main.c ****        			}
 398:Core/Src/main.c ****        		else
 399:Core/Src/main.c ****        			{
 400:Core/Src/main.c ****        				printf("task3 didnt get bi_semo1 \r\n");
 325              		.loc 1 400 12 is_stmt 1 view .LVU72
 326 004e 0948     		ldr	r0, .L15+20
 327 0050 FFF7FEFF 		bl	puts
 328              	.LVL16:
 401:Core/Src/main.c ****        				vTaskDelay(1500);
 329              		.loc 1 401 12 view .LVU73
 330 0054 40F2DC50 		movw	r0, #1500
 331 0058 FFF7FEFF 		bl	vTaskDelay
 332              	.LVL17:
 333 005c EFE7     		b	.L10
 334              	.L16:
 335 005e 00BF     		.align	2
 336              	.L15:
 337 0060 00000000 		.word	.LC0
 338 0064 20000000 		.word	.LC1
 339 0068 00000000 		.word	.LANCHOR1
 340 006c 44000000 		.word	.LC2
 341 0070 00000000 		.word	.LANCHOR0
 342 0074 54000000 		.word	.LC3
 343              		.cfi_endproc
 344              	.LFE233:
 346              		.section	.rodata.StartTask04.str1.4,"aMS",%progbits,1
 347              		.align	2
 348              	.LC4:
 349 0000 7461736B 		.ascii	"task04 takes binary semaphor\015\000"
 349      30342074 
 349      616B6573 
 349      2062696E 
 349      61727920 
 350 001e 0000     		.align	2
 351              	.LC5:
 352 0020 25642069 		.ascii	"%d in task 4\015\012\000"
 352      6E207461 
 352      736B2034 
 352      0D0A00
 353 002f 00       		.align	2
 354              	.LC6:
 355 0030 7461736B 		.ascii	"task4 didnt get bi_semo1 \015\000"
 355      34206469 
 355      646E7420 
 355      67657420 
 355      62695F73 
 356              		.section	.text.StartTask04,"ax",%progbits
 357              		.align	1
 358              		.global	StartTask04
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	StartTask04:
 364              	.LFB234:
ARM GAS  /tmp/cciVV68U.s 			page 15


 402:Core/Src/main.c ****        			}
 403:Core/Src/main.c ****    		}
 404:Core/Src/main.c ****   
 405:Core/Src/main.c **** }
 406:Core/Src/main.c **** 
 407:Core/Src/main.c **** void StartTask04(void *argument)
 408:Core/Src/main.c **** {
 365              		.loc 1 408 1 view -0
 366              		.cfi_startproc
 367              		@ Volatile: function does not return.
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL18:
 371              		.loc 1 408 1 is_stmt 0 view .LVU75
 372 0000 08B5     		push	{r3, lr}
 373              	.LCFI7:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 3, -8
 376              		.cfi_offset 14, -4
 377 0002 19E0     		b	.L18
 378              	.LVL19:
 379              	.L22:
 409:Core/Src/main.c ****   for(;;)
 410:Core/Src/main.c ****   {
 411:Core/Src/main.c ****   
 412:Core/Src/main.c ****     //printf("_____I N   T A S K   4_____\r\n\r\n");
 413:Core/Src/main.c ****   	
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****         /* See if we can obtain the semaphore. If the semaphore is not
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****            available wait 10 ticks to see if it becomes free. */
 418:Core/Src/main.c **** 	//xSemaphoreGive( Bi_Semo1 );
 419:Core/Src/main.c ****         
 420:Core/Src/main.c ****     		if( xSemaphoreTake( Bi_Semo1, 1000 ) == pdTRUE )
 421:Core/Src/main.c ****         		{
 422:Core/Src/main.c ****         			printf("task04 takes binary semaphor\r\n");
 380              		.loc 1 422 12 is_stmt 1 view .LVU76
 381 0004 1448     		ldr	r0, .L23
 382 0006 FFF7FEFF 		bl	puts
 383              	.LVL20:
 423:Core/Src/main.c **** 				inker = inker+1;
 384              		.loc 1 423 5 view .LVU77
 385              		.loc 1 423 18 is_stmt 0 view .LVU78
 386 000a 144C     		ldr	r4, .L23+4
 387 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 388 000e 0133     		adds	r3, r3, #1
 389              		.loc 1 423 11 view .LVU79
 390 0010 2370     		strb	r3, [r4]
 424:Core/Src/main.c **** 				vTaskDelay(1500);
 391              		.loc 1 424 5 is_stmt 1 view .LVU80
 392 0012 40F2DC50 		movw	r0, #1500
 393 0016 FFF7FEFF 		bl	vTaskDelay
 394              	.LVL21:
 425:Core/Src/main.c **** 				printf("%d in task 4\r\n", inker);
 395              		.loc 1 425 5 view .LVU81
 396 001a 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 397 001c 1048     		ldr	r0, .L23+8
ARM GAS  /tmp/cciVV68U.s 			page 16


 398 001e FFF7FEFF 		bl	printf
 399              	.LVL22:
 426:Core/Src/main.c **** 				xSemaphoreGive( Bi_Semo1 );
 400              		.loc 1 426 5 view .LVU82
 401 0022 0023     		movs	r3, #0
 402 0024 1A46     		mov	r2, r3
 403 0026 1946     		mov	r1, r3
 404 0028 0E48     		ldr	r0, .L23+12
 405 002a 0068     		ldr	r0, [r0]
 406 002c FFF7FEFF 		bl	xQueueGenericSend
 407              	.LVL23:
 427:Core/Src/main.c **** 				vTaskDelay(1500);
 408              		.loc 1 427 5 view .LVU83
 409 0030 40F2DC50 		movw	r0, #1500
 410 0034 FFF7FEFF 		bl	vTaskDelay
 411              	.LVL24:
 412              	.L18:
 409:Core/Src/main.c ****   {
 413              		.loc 1 409 3 view .LVU84
 420:Core/Src/main.c ****         		{
 414              		.loc 1 420 7 view .LVU85
 420:Core/Src/main.c ****         		{
 415              		.loc 1 420 11 is_stmt 0 view .LVU86
 416 0038 4FF47A71 		mov	r1, #1000
 417 003c 094B     		ldr	r3, .L23+12
 418 003e 1868     		ldr	r0, [r3]
 419 0040 FFF7FEFF 		bl	xQueueSemaphoreTake
 420              	.LVL25:
 420:Core/Src/main.c ****         		{
 421              		.loc 1 420 9 view .LVU87
 422 0044 0128     		cmp	r0, #1
 423 0046 DDD0     		beq	.L22
 428:Core/Src/main.c ****        			}
 429:Core/Src/main.c ****        		else
 430:Core/Src/main.c ****        			{
 431:Core/Src/main.c ****        				printf("task4 didnt get bi_semo1 \r\n");
 424              		.loc 1 431 12 is_stmt 1 view .LVU88
 425 0048 0748     		ldr	r0, .L23+16
 426 004a FFF7FEFF 		bl	puts
 427              	.LVL26:
 432:Core/Src/main.c ****        				vTaskDelay(1500);
 428              		.loc 1 432 12 view .LVU89
 429 004e 40F2DC50 		movw	r0, #1500
 430 0052 FFF7FEFF 		bl	vTaskDelay
 431              	.LVL27:
 432 0056 EFE7     		b	.L18
 433              	.L24:
 434              		.align	2
 435              	.L23:
 436 0058 00000000 		.word	.LC4
 437 005c 00000000 		.word	.LANCHOR1
 438 0060 20000000 		.word	.LC5
 439 0064 00000000 		.word	.LANCHOR0
 440 0068 30000000 		.word	.LC6
 441              		.cfi_endproc
 442              	.LFE234:
 444              		.section	.rodata.StartTask06.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cciVV68U.s 			page 17


 445              		.align	2
 446              	.LC7:
 447 0000 7461736B 		.ascii	"task06 takes mutex\015\000"
 447      30362074 
 447      616B6573 
 447      206D7574 
 447      65780D00 
 448              		.align	2
 449              	.LC8:
 450 0014 25642069 		.ascii	"%d in task 6\015\012\000"
 450      6E207461 
 450      736B2036 
 450      0D0A00
 451 0023 00       		.align	2
 452              	.LC9:
 453 0024 206D7574 		.ascii	" muto not recived by task 06\015\000"
 453      6F206E6F 
 453      74207265 
 453      63697665 
 453      64206279 
 454              		.section	.text.StartTask06,"ax",%progbits
 455              		.align	1
 456              		.global	StartTask06
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 461              	StartTask06:
 462              	.LFB236:
 433:Core/Src/main.c ****        			}
 434:Core/Src/main.c **** 		//printf("bisemo created\r\n");
 435:Core/Src/main.c ****    	}	
 436:Core/Src/main.c ****     
 437:Core/Src/main.c ****     
 438:Core/Src/main.c ****   
 439:Core/Src/main.c **** }
 440:Core/Src/main.c **** 
 441:Core/Src/main.c **** void StartTask05(void *argument)
 442:Core/Src/main.c **** {
 443:Core/Src/main.c ****     
 444:Core/Src/main.c ****     for(;;)
 445:Core/Src/main.c ****     {
 446:Core/Src/main.c ****     //printf("_____I N   T A S K   5_____\r\n\r\n");
 447:Core/Src/main.c ****     	//xSemaphoreGive( Bi_Semo1 );
 448:Core/Src/main.c ****         if( xSemaphoreTake( Muto1, 1000 ) == pdTRUE ){
 449:Core/Src/main.c ****         	printf("task05 takes mutex\r\n");
 450:Core/Src/main.c ****         	printf("task05 updating shared rescources\r\n");
 451:Core/Src/main.c ****         	inkerMutex++;
 452:Core/Src/main.c ****         	inker++;
 453:Core/Src/main.c ****         	vTaskDelay(1500);
 454:Core/Src/main.c ****         	printf("%d in task 5\r\n", inkerMutex);
 455:Core/Src/main.c ****         	printf("%d in task 5\r\n", inker);
 456:Core/Src/main.c ****         	xSemaphoreGive( Muto1 );
 457:Core/Src/main.c ****         }
 458:Core/Src/main.c ****         else
 459:Core/Src/main.c ****         {
 460:Core/Src/main.c ****         	printf(" muto not recived by task 05\r\n");
 461:Core/Src/main.c ****         	vTaskDelay(1500);
ARM GAS  /tmp/cciVV68U.s 			page 18


 462:Core/Src/main.c ****       	}
 463:Core/Src/main.c ****         
 464:Core/Src/main.c ****       if (ClrScrFlag == 1){
 465:Core/Src/main.c ****       	char clear_screen[] = "\033[2J\033[H";
 466:Core/Src/main.c ****       	HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****       	ClrScrFlag = 0;
 469:Core/Src/main.c ****       
 470:Core/Src/main.c ****       }
 471:Core/Src/main.c ****       vTaskDelay(1500);
 472:Core/Src/main.c ****        
 473:Core/Src/main.c ****   }
 474:Core/Src/main.c **** }
 475:Core/Src/main.c **** 
 476:Core/Src/main.c **** void StartTask06(void *argument)
 477:Core/Src/main.c **** {
 463              		.loc 1 477 1 view -0
 464              		.cfi_startproc
 465              		@ Volatile: function does not return.
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              	.LVL28:
 469              		.loc 1 477 1 is_stmt 0 view .LVU91
 470 0000 08B5     		push	{r3, lr}
 471              	.LCFI8:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 3, -8
 474              		.cfi_offset 14, -4
 475 0002 22E0     		b	.L28
 476              	.LVL29:
 477              	.L30:
 478:Core/Src/main.c ****     
 479:Core/Src/main.c ****     for(;;)
 480:Core/Src/main.c ****     {
 481:Core/Src/main.c ****     //printf("_____I N   T A S K   6_____\r\n\r\n");
 482:Core/Src/main.c ****     	//xSemaphoreGive( Muto1 );
 483:Core/Src/main.c ****         if( xSemaphoreTake( Muto1, 1000 ) == pdTRUE ){
 484:Core/Src/main.c ****         	printf("task06 takes mutex\r\n");
 478              		.loc 1 484 10 is_stmt 1 view .LVU92
 479 0004 1948     		ldr	r0, .L31
 480 0006 FFF7FEFF 		bl	puts
 481              	.LVL30:
 485:Core/Src/main.c ****         	inkerMutex++;
 482              		.loc 1 485 10 view .LVU93
 483              		.loc 1 485 20 is_stmt 0 view .LVU94
 484 000a 194D     		ldr	r5, .L31+4
 485 000c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 486 000e 0133     		adds	r3, r3, #1
 487 0010 2B70     		strb	r3, [r5]
 486:Core/Src/main.c ****         	inker++;
 488              		.loc 1 486 10 is_stmt 1 view .LVU95
 489              		.loc 1 486 15 is_stmt 0 view .LVU96
 490 0012 184C     		ldr	r4, .L31+8
 491 0014 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 492 0016 0133     		adds	r3, r3, #1
 493 0018 2370     		strb	r3, [r4]
 487:Core/Src/main.c ****         	vTaskDelay(1500);
ARM GAS  /tmp/cciVV68U.s 			page 19


 494              		.loc 1 487 10 is_stmt 1 view .LVU97
 495 001a 40F2DC50 		movw	r0, #1500
 496 001e FFF7FEFF 		bl	vTaskDelay
 497              	.LVL31:
 488:Core/Src/main.c ****         	printf("%d in task 6\r\n", inkerMutex);
 498              		.loc 1 488 10 view .LVU98
 499 0022 154E     		ldr	r6, .L31+12
 500 0024 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 501 0026 3046     		mov	r0, r6
 502 0028 FFF7FEFF 		bl	printf
 503              	.LVL32:
 489:Core/Src/main.c ****         	printf("%d in task 6\r\n", inker);
 504              		.loc 1 489 10 view .LVU99
 505 002c 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 506 002e 3046     		mov	r0, r6
 507 0030 FFF7FEFF 		bl	printf
 508              	.LVL33:
 490:Core/Src/main.c ****         	xSemaphoreGive( Muto1 );
 509              		.loc 1 490 10 view .LVU100
 510 0034 0023     		movs	r3, #0
 511 0036 1A46     		mov	r2, r3
 512 0038 1946     		mov	r1, r3
 513 003a 1048     		ldr	r0, .L31+16
 514 003c 0068     		ldr	r0, [r0]
 515 003e FFF7FEFF 		bl	xQueueGenericSend
 516              	.LVL34:
 517              	.L27:
 491:Core/Src/main.c ****         }
 492:Core/Src/main.c ****         else
 493:Core/Src/main.c ****         {
 494:Core/Src/main.c ****         	printf(" muto not recived by task 06\r\n");
 495:Core/Src/main.c ****         	vTaskDelay(1500);
 496:Core/Src/main.c ****       	}
 497:Core/Src/main.c ****       vTaskDelay(1500);
 518              		.loc 1 497 7 view .LVU101
 519 0042 40F2DC50 		movw	r0, #1500
 520 0046 FFF7FEFF 		bl	vTaskDelay
 521              	.LVL35:
 479:Core/Src/main.c ****     {
 522              		.loc 1 479 10 view .LVU102
 523              	.L28:
 479:Core/Src/main.c ****     {
 524              		.loc 1 479 5 view .LVU103
 483:Core/Src/main.c ****         	printf("task06 takes mutex\r\n");
 525              		.loc 1 483 9 view .LVU104
 483:Core/Src/main.c ****         	printf("task06 takes mutex\r\n");
 526              		.loc 1 483 13 is_stmt 0 view .LVU105
 527 004a 4FF47A71 		mov	r1, #1000
 528 004e 0B4B     		ldr	r3, .L31+16
 529 0050 1868     		ldr	r0, [r3]
 530 0052 FFF7FEFF 		bl	xQueueSemaphoreTake
 531              	.LVL36:
 483:Core/Src/main.c ****         	printf("task06 takes mutex\r\n");
 532              		.loc 1 483 11 view .LVU106
 533 0056 0128     		cmp	r0, #1
 534 0058 D4D0     		beq	.L30
 494:Core/Src/main.c ****         	vTaskDelay(1500);
ARM GAS  /tmp/cciVV68U.s 			page 20


 535              		.loc 1 494 10 is_stmt 1 view .LVU107
 536 005a 0948     		ldr	r0, .L31+20
 537 005c FFF7FEFF 		bl	puts
 538              	.LVL37:
 495:Core/Src/main.c ****       	}
 539              		.loc 1 495 10 view .LVU108
 540 0060 40F2DC50 		movw	r0, #1500
 541 0064 FFF7FEFF 		bl	vTaskDelay
 542              	.LVL38:
 543 0068 EBE7     		b	.L27
 544              	.L32:
 545 006a 00BF     		.align	2
 546              	.L31:
 547 006c 00000000 		.word	.LC7
 548 0070 00000000 		.word	.LANCHOR3
 549 0074 00000000 		.word	.LANCHOR1
 550 0078 14000000 		.word	.LC8
 551 007c 00000000 		.word	.LANCHOR2
 552 0080 24000000 		.word	.LC9
 553              		.cfi_endproc
 554              	.LFE236:
 556              		.section	.rodata.StartTask05.str1.4,"aMS",%progbits,1
 557              		.align	2
 558              	.LC10:
 559 0000 7461736B 		.ascii	"task05 takes mutex\015\000"
 559      30352074 
 559      616B6573 
 559      206D7574 
 559      65780D00 
 560              		.align	2
 561              	.LC11:
 562 0014 7461736B 		.ascii	"task05 updating shared rescources\015\000"
 562      30352075 
 562      70646174 
 562      696E6720 
 562      73686172 
 563 0037 00       		.align	2
 564              	.LC12:
 565 0038 25642069 		.ascii	"%d in task 5\015\012\000"
 565      6E207461 
 565      736B2035 
 565      0D0A00
 566 0047 00       		.align	2
 567              	.LC13:
 568 0048 206D7574 		.ascii	" muto not recived by task 05\015\000"
 568      6F206E6F 
 568      74207265 
 568      63697665 
 568      64206279 
 569 0066 0000     		.align	2
 570              	.LC14:
 571 0068 1B5B324A 		.ascii	"\033[2J\033[H\000"
 571      1B5B4800 
 572              		.section	.text.StartTask05,"ax",%progbits
 573              		.align	1
 574              		.global	StartTask05
 575              		.syntax unified
ARM GAS  /tmp/cciVV68U.s 			page 21


 576              		.thumb
 577              		.thumb_func
 579              	StartTask05:
 580              	.LFB235:
 442:Core/Src/main.c ****     
 581              		.loc 1 442 1 view -0
 582              		.cfi_startproc
 583              		@ Volatile: function does not return.
 584              		@ args = 0, pretend = 0, frame = 8
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL39:
 442:Core/Src/main.c ****     
 587              		.loc 1 442 1 is_stmt 0 view .LVU110
 588 0000 00B5     		push	{lr}
 589              	.LCFI9:
 590              		.cfi_def_cfa_offset 4
 591              		.cfi_offset 14, -4
 592 0002 83B0     		sub	sp, sp, #12
 593              	.LCFI10:
 594              		.cfi_def_cfa_offset 16
 595 0004 36E0     		b	.L37
 596              	.LVL40:
 597              	.L39:
 449:Core/Src/main.c ****         	printf("task05 updating shared rescources\r\n");
 598              		.loc 1 449 10 is_stmt 1 view .LVU111
 599 0006 2548     		ldr	r0, .L41
 600 0008 FFF7FEFF 		bl	puts
 601              	.LVL41:
 450:Core/Src/main.c ****         	inkerMutex++;
 602              		.loc 1 450 10 view .LVU112
 603 000c 2448     		ldr	r0, .L41+4
 604 000e FFF7FEFF 		bl	puts
 605              	.LVL42:
 451:Core/Src/main.c ****         	inker++;
 606              		.loc 1 451 10 view .LVU113
 451:Core/Src/main.c ****         	inker++;
 607              		.loc 1 451 20 is_stmt 0 view .LVU114
 608 0012 244D     		ldr	r5, .L41+8
 609 0014 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 610 0016 0133     		adds	r3, r3, #1
 611 0018 2B70     		strb	r3, [r5]
 452:Core/Src/main.c ****         	vTaskDelay(1500);
 612              		.loc 1 452 10 is_stmt 1 view .LVU115
 452:Core/Src/main.c ****         	vTaskDelay(1500);
 613              		.loc 1 452 15 is_stmt 0 view .LVU116
 614 001a 234C     		ldr	r4, .L41+12
 615 001c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 616 001e 0133     		adds	r3, r3, #1
 617 0020 2370     		strb	r3, [r4]
 453:Core/Src/main.c ****         	printf("%d in task 5\r\n", inkerMutex);
 618              		.loc 1 453 10 is_stmt 1 view .LVU117
 619 0022 40F2DC50 		movw	r0, #1500
 620 0026 FFF7FEFF 		bl	vTaskDelay
 621              	.LVL43:
 454:Core/Src/main.c ****         	printf("%d in task 5\r\n", inker);
 622              		.loc 1 454 10 view .LVU118
 623 002a 204E     		ldr	r6, .L41+16
ARM GAS  /tmp/cciVV68U.s 			page 22


 624 002c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 625 002e 3046     		mov	r0, r6
 626 0030 FFF7FEFF 		bl	printf
 627              	.LVL44:
 455:Core/Src/main.c ****         	xSemaphoreGive( Muto1 );
 628              		.loc 1 455 10 view .LVU119
 629 0034 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 630 0036 3046     		mov	r0, r6
 631 0038 FFF7FEFF 		bl	printf
 632              	.LVL45:
 456:Core/Src/main.c ****         }
 633              		.loc 1 456 10 view .LVU120
 634 003c 0023     		movs	r3, #0
 635 003e 1A46     		mov	r2, r3
 636 0040 1946     		mov	r1, r3
 637 0042 1B48     		ldr	r0, .L41+20
 638 0044 0068     		ldr	r0, [r0]
 639 0046 FFF7FEFF 		bl	xQueueGenericSend
 640              	.LVL46:
 641 004a 22E0     		b	.L35
 642              	.L40:
 643              	.LBB9:
 465:Core/Src/main.c ****       	HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 644              		.loc 1 465 8 view .LVU121
 465:Core/Src/main.c ****       	HAL_UART_Transmit(&huart2, clear_screen, sizeof(clear_screen), 0xFFFF);      
 645              		.loc 1 465 13 is_stmt 0 view .LVU122
 646 004c 194B     		ldr	r3, .L41+24
 647 004e EC46     		mov	ip, sp
 648 0050 93E80300 		ldm	r3, {r0, r1}
 649 0054 8CE80300 		stm	ip, {r0, r1}
 466:Core/Src/main.c **** 
 650              		.loc 1 466 8 is_stmt 1 view .LVU123
 651 0058 4FF6FF73 		movw	r3, #65535
 652 005c 0822     		movs	r2, #8
 653 005e 6146     		mov	r1, ip
 654 0060 1548     		ldr	r0, .L41+28
 655 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 656              	.LVL47:
 468:Core/Src/main.c ****       
 657              		.loc 1 468 8 view .LVU124
 468:Core/Src/main.c ****       
 658              		.loc 1 468 19 is_stmt 0 view .LVU125
 659 0066 154B     		ldr	r3, .L41+32
 660 0068 0022     		movs	r2, #0
 661 006a 1A70     		strb	r2, [r3]
 662              	.L36:
 663              	.LBE9:
 471:Core/Src/main.c ****        
 664              		.loc 1 471 7 is_stmt 1 view .LVU126
 665 006c 40F2DC50 		movw	r0, #1500
 666 0070 FFF7FEFF 		bl	vTaskDelay
 667              	.LVL48:
 444:Core/Src/main.c ****     {
 668              		.loc 1 444 10 view .LVU127
 669              	.L37:
 444:Core/Src/main.c ****     {
 670              		.loc 1 444 5 view .LVU128
ARM GAS  /tmp/cciVV68U.s 			page 23


 448:Core/Src/main.c ****         	printf("task05 takes mutex\r\n");
 671              		.loc 1 448 9 view .LVU129
 448:Core/Src/main.c ****         	printf("task05 takes mutex\r\n");
 672              		.loc 1 448 13 is_stmt 0 view .LVU130
 673 0074 4FF47A71 		mov	r1, #1000
 674 0078 0D4B     		ldr	r3, .L41+20
 675 007a 1868     		ldr	r0, [r3]
 676 007c FFF7FEFF 		bl	xQueueSemaphoreTake
 677              	.LVL49:
 448:Core/Src/main.c ****         	printf("task05 takes mutex\r\n");
 678              		.loc 1 448 11 view .LVU131
 679 0080 0128     		cmp	r0, #1
 680 0082 C0D0     		beq	.L39
 460:Core/Src/main.c ****         	vTaskDelay(1500);
 681              		.loc 1 460 10 is_stmt 1 view .LVU132
 682 0084 0E48     		ldr	r0, .L41+36
 683 0086 FFF7FEFF 		bl	puts
 684              	.LVL50:
 461:Core/Src/main.c ****       	}
 685              		.loc 1 461 10 view .LVU133
 686 008a 40F2DC50 		movw	r0, #1500
 687 008e FFF7FEFF 		bl	vTaskDelay
 688              	.LVL51:
 689              	.L35:
 464:Core/Src/main.c ****       	char clear_screen[] = "\033[2J\033[H";
 690              		.loc 1 464 7 view .LVU134
 464:Core/Src/main.c ****       	char clear_screen[] = "\033[2J\033[H";
 691              		.loc 1 464 22 is_stmt 0 view .LVU135
 692 0092 0A4B     		ldr	r3, .L41+32
 693 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 464:Core/Src/main.c ****       	char clear_screen[] = "\033[2J\033[H";
 694              		.loc 1 464 10 view .LVU136
 695 0096 012B     		cmp	r3, #1
 696 0098 D8D0     		beq	.L40
 697 009a E7E7     		b	.L36
 698              	.L42:
 699              		.align	2
 700              	.L41:
 701 009c 00000000 		.word	.LC10
 702 00a0 14000000 		.word	.LC11
 703 00a4 00000000 		.word	.LANCHOR3
 704 00a8 00000000 		.word	.LANCHOR1
 705 00ac 38000000 		.word	.LC12
 706 00b0 00000000 		.word	.LANCHOR2
 707 00b4 68000000 		.word	.LC14
 708 00b8 00000000 		.word	.LANCHOR5
 709 00bc 00000000 		.word	.LANCHOR4
 710 00c0 48000000 		.word	.LC13
 711              		.cfi_endproc
 712              	.LFE235:
 714              		.section	.text.__io_putchar,"ax",%progbits
 715              		.align	1
 716              		.global	__io_putchar
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 721              	__io_putchar:
ARM GAS  /tmp/cciVV68U.s 			page 24


 722              	.LVL52:
 723              	.LFB237:
 498:Core/Src/main.c ****        
 499:Core/Src/main.c ****   }
 500:Core/Src/main.c **** }
 501:Core/Src/main.c **** PUTCHAR_PROTOTYPE
 502:Core/Src/main.c **** {
 724              		.loc 1 502 1 is_stmt 1 view -0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 8
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              		.loc 1 502 1 is_stmt 0 view .LVU138
 729 0000 00B5     		push	{lr}
 730              	.LCFI11:
 731              		.cfi_def_cfa_offset 4
 732              		.cfi_offset 14, -4
 733 0002 83B0     		sub	sp, sp, #12
 734              	.LCFI12:
 735              		.cfi_def_cfa_offset 16
 736 0004 0190     		str	r0, [sp, #4]
 503:Core/Src/main.c ****   /* Place your implementation of fputc here */
 504:Core/Src/main.c ****   /* e.g. write a character to the USART1 and Loop until the end of transmission */
 505:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 737              		.loc 1 505 3 is_stmt 1 view .LVU139
 738 0006 4FF6FF73 		movw	r3, #65535
 739 000a 0122     		movs	r2, #1
 740 000c 01A9     		add	r1, sp, #4
 741 000e 0348     		ldr	r0, .L45
 742              	.LVL53:
 743              		.loc 1 505 3 is_stmt 0 view .LVU140
 744 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 745              	.LVL54:
 506:Core/Src/main.c ****   return ch;
 746              		.loc 1 506 3 is_stmt 1 view .LVU141
 507:Core/Src/main.c **** }
 747              		.loc 1 507 1 is_stmt 0 view .LVU142
 748 0014 0198     		ldr	r0, [sp, #4]
 749 0016 03B0     		add	sp, sp, #12
 750              	.LCFI13:
 751              		.cfi_def_cfa_offset 4
 752              		@ sp needed
 753 0018 5DF804FB 		ldr	pc, [sp], #4
 754              	.L46:
 755              		.align	2
 756              	.L45:
 757 001c 00000000 		.word	.LANCHOR5
 758              		.cfi_endproc
 759              	.LFE237:
 761              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 762              		.align	1
 763              		.global	HAL_GPIO_EXTI_Callback
 764              		.syntax unified
 765              		.thumb
 766              		.thumb_func
 768              	HAL_GPIO_EXTI_Callback:
 769              	.LVL55:
 770              	.LFB238:
ARM GAS  /tmp/cciVV68U.s 			page 25


 508:Core/Src/main.c **** 
 509:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 510:Core/Src/main.c **** {
 771              		.loc 1 510 1 is_stmt 1 view -0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 511:Core/Src/main.c ****   if (GPIO_Pin == B1_Pin)
 775              		.loc 1 511 3 view .LVU144
 776              		.loc 1 511 6 is_stmt 0 view .LVU145
 777 0000 B0F5005F 		cmp	r0, #8192
 778 0004 00D0     		beq	.L53
 779 0006 7047     		bx	lr
 780              	.L53:
 510:Core/Src/main.c ****   if (GPIO_Pin == B1_Pin)
 781              		.loc 1 510 1 view .LVU146
 782 0008 08B5     		push	{r3, lr}
 783              	.LCFI14:
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 3, -8
 786              		.cfi_offset 14, -4
 512:Core/Src/main.c ****   {
 513:Core/Src/main.c ****   	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 787              		.loc 1 513 4 is_stmt 1 view .LVU147
 788 000a 2021     		movs	r1, #32
 789 000c 0348     		ldr	r0, .L54
 790              	.LVL56:
 791              		.loc 1 513 4 is_stmt 0 view .LVU148
 792 000e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 793              	.LVL57:
 514:Core/Src/main.c ****  	ClrScrFlag = 1;	
 794              		.loc 1 514 3 is_stmt 1 view .LVU149
 795              		.loc 1 514 14 is_stmt 0 view .LVU150
 796 0012 034B     		ldr	r3, .L54+4
 797 0014 0122     		movs	r2, #1
 798 0016 1A70     		strb	r2, [r3]
 515:Core/Src/main.c ****   }
 516:Core/Src/main.c ****   
 517:Core/Src/main.c **** }
 799              		.loc 1 517 1 view .LVU151
 800 0018 08BD     		pop	{r3, pc}
 801              	.L55:
 802 001a 00BF     		.align	2
 803              	.L54:
 804 001c 00000240 		.word	1073872896
 805 0020 00000000 		.word	.LANCHOR4
 806              		.cfi_endproc
 807              	.LFE238:
 809              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 810              		.align	1
 811              		.global	HAL_ADC_ConvCpltCallback
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 816              	HAL_ADC_ConvCpltCallback:
 817              	.LVL58:
 818              	.LFB239:
ARM GAS  /tmp/cciVV68U.s 			page 26


 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** 
 520:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 521:Core/Src/main.c **** {
 819              		.loc 1 521 1 is_stmt 1 view -0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 522:Core/Src/main.c ****   if (hadc->Instance == ADC1)
 824              		.loc 1 522 3 view .LVU153
 523:Core/Src/main.c ****   {
 524:Core/Src/main.c ****   }
 825              		.loc 1 524 3 view .LVU154
 525:Core/Src/main.c **** }
 826              		.loc 1 525 1 is_stmt 0 view .LVU155
 827 0000 7047     		bx	lr
 828              		.cfi_endproc
 829              	.LFE239:
 831              		.section	.rodata.TaskAdd.str1.4,"aMS",%progbits,1
 832              		.align	2
 833              	.LC15:
 834 0000 2D2D2D2D 		.ascii	"---->%s Added\015\012\000"
 834      3E257320 
 834      41646465 
 834      640D0A00 
 835              		.align	2
 836              	.LC16:
 837 0010 2D2D2D2D 		.ascii	"---->Failed to add %s\015\012\000"
 837      3E466169 
 837      6C656420 
 837      746F2061 
 837      64642025 
 838              		.section	.text.TaskAdd,"ax",%progbits
 839              		.align	1
 840              		.global	TaskAdd
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 845              	TaskAdd:
 846              	.LVL59:
 847              	.LFB240:
 526:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument), /* Function that implements the task. */
 527:Core/Src/main.c **** 	char * TaskName, /* Text name for the task. */
 528:Core/Src/main.c **** 	uint16_t StackSize, /* Stack size in words, not bytes. */
 529:Core/Src/main.c **** 	int *pvParameters, /* Parameter passed into the task. */
 530:Core/Src/main.c **** 	UBaseType_t uxPriority, /* Priority at which the task is created. */
 531:Core/Src/main.c **** 	TaskHandle_t *TaskHandle ) /* Used to pass out the task’s handle. */
 532:Core/Src/main.c **** 	{
 848              		.loc 1 532 2 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 8, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              		.loc 1 532 2 is_stmt 0 view .LVU157
 853 0000 70B5     		push	{r4, r5, r6, lr}
 854              	.LCFI15:
 855              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cciVV68U.s 			page 27


 856              		.cfi_offset 4, -16
 857              		.cfi_offset 5, -12
 858              		.cfi_offset 6, -8
 859              		.cfi_offset 14, -4
 860 0002 82B0     		sub	sp, sp, #8
 861              	.LCFI16:
 862              		.cfi_def_cfa_offset 24
 863 0004 0C46     		mov	r4, r1
 864 0006 079D     		ldr	r5, [sp, #28]
 533:Core/Src/main.c **** 		BaseType_t retValue = xTaskCreate( FunctionName, TaskName, StackSize, pvParameters,
 865              		.loc 1 533 3 is_stmt 1 view .LVU158
 866              		.loc 1 533 25 is_stmt 0 view .LVU159
 867 0008 0195     		str	r5, [sp, #4]
 868 000a 069E     		ldr	r6, [sp, #24]
 869 000c 0096     		str	r6, [sp]
 870 000e FFF7FEFF 		bl	xTaskCreate
 871              	.LVL60:
 534:Core/Src/main.c **** 		uxPriority, TaskHandle );
 535:Core/Src/main.c **** 		//printf("Converted Random number in main to %d in task %s", *pvParameters, TaskName);
 536:Core/Src/main.c **** 		if( retValue == pdPASS ) {
 872              		.loc 1 536 3 is_stmt 1 view .LVU160
 873              		.loc 1 536 5 is_stmt 0 view .LVU161
 874 0012 0128     		cmp	r0, #1
 875 0014 06D0     		beq	.L61
 537:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 538:Core/Src/main.c **** 			return 0;
 539:Core/Src/main.c **** 		}
 540:Core/Src/main.c **** 	
 541:Core/Src/main.c **** 		else {
 542:Core/Src/main.c **** 			printf("---->Failed to add %s\r\n", TaskName);
 876              		.loc 1 542 4 is_stmt 1 view .LVU162
 877 0016 2146     		mov	r1, r4
 878 0018 0748     		ldr	r0, .L62
 879              	.LVL61:
 880              		.loc 1 542 4 is_stmt 0 view .LVU163
 881 001a FFF7FEFF 		bl	printf
 882              	.LVL62:
 543:Core/Src/main.c **** 		}
 544:Core/Src/main.c **** 	return 1;
 883              		.loc 1 544 2 is_stmt 1 view .LVU164
 884              		.loc 1 544 9 is_stmt 0 view .LVU165
 885 001e 0120     		movs	r0, #1
 886              	.L59:
 545:Core/Src/main.c **** }
 887              		.loc 1 545 1 view .LVU166
 888 0020 02B0     		add	sp, sp, #8
 889              	.LCFI17:
 890              		.cfi_remember_state
 891              		.cfi_def_cfa_offset 16
 892              		@ sp needed
 893 0022 70BD     		pop	{r4, r5, r6, pc}
 894              	.LVL63:
 895              	.L61:
 896              	.LCFI18:
 897              		.cfi_restore_state
 537:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 898              		.loc 1 537 4 is_stmt 1 view .LVU167
ARM GAS  /tmp/cciVV68U.s 			page 28


 899 0024 2868     		ldr	r0, [r5]
 900              	.LVL64:
 537:Core/Src/main.c **** 			printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 901              		.loc 1 537 4 is_stmt 0 view .LVU168
 902 0026 FFF7FEFF 		bl	pcTaskGetName
 903              	.LVL65:
 904 002a 0146     		mov	r1, r0
 905 002c 0348     		ldr	r0, .L62+4
 906 002e FFF7FEFF 		bl	printf
 907              	.LVL66:
 538:Core/Src/main.c **** 		}
 908              		.loc 1 538 4 is_stmt 1 view .LVU169
 538:Core/Src/main.c **** 		}
 909              		.loc 1 538 11 is_stmt 0 view .LVU170
 910 0032 0020     		movs	r0, #0
 911 0034 F4E7     		b	.L59
 912              	.L63:
 913 0036 00BF     		.align	2
 914              	.L62:
 915 0038 10000000 		.word	.LC16
 916 003c 00000000 		.word	.LC15
 917              		.cfi_endproc
 918              	.LFE240:
 920              		.section	.rodata.KillTask.str1.4,"aMS",%progbits,1
 921              		.align	2
 922              	.LC17:
 923 0000 2D2D2D2D 		.ascii	"---->%s Killed\015\012\000"
 923      3E257320 
 923      4B696C6C 
 923      65640D0A 
 923      00
 924              		.section	.text.KillTask,"ax",%progbits
 925              		.align	1
 926              		.global	KillTask
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 931              	KillTask:
 932              	.LVL67:
 933              	.LFB241:
 546:Core/Src/main.c **** 
 547:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle)
 548:Core/Src/main.c **** {
 934              		.loc 1 548 1 is_stmt 1 view -0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		.loc 1 548 1 is_stmt 0 view .LVU172
 939 0000 10B5     		push	{r4, lr}
 940              	.LCFI19:
 941              		.cfi_def_cfa_offset 8
 942              		.cfi_offset 4, -8
 943              		.cfi_offset 14, -4
 944 0002 0446     		mov	r4, r0
 549:Core/Src/main.c **** 	vTaskDelete( *TaskHandle );
 945              		.loc 1 549 2 is_stmt 1 view .LVU173
 946 0004 0068     		ldr	r0, [r0]
ARM GAS  /tmp/cciVV68U.s 			page 29


 947              	.LVL68:
 948              		.loc 1 549 2 is_stmt 0 view .LVU174
 949 0006 FFF7FEFF 		bl	vTaskDelete
 950              	.LVL69:
 550:Core/Src/main.c **** 	printf("---->%s Killed\r\n", pcTaskGetName(*TaskHandle));
 951              		.loc 1 550 2 is_stmt 1 view .LVU175
 952 000a 2068     		ldr	r0, [r4]
 953 000c FFF7FEFF 		bl	pcTaskGetName
 954              	.LVL70:
 955 0010 0146     		mov	r1, r0
 956 0012 0348     		ldr	r0, .L66
 957 0014 FFF7FEFF 		bl	printf
 958              	.LVL71:
 551:Core/Src/main.c **** 	/* Task gets killed when IDLE Task runs */
 552:Core/Src/main.c **** 	*TaskHandle = NULL;
 959              		.loc 1 552 2 view .LVU176
 960              		.loc 1 552 14 is_stmt 0 view .LVU177
 961 0018 0023     		movs	r3, #0
 962 001a 2360     		str	r3, [r4]
 553:Core/Src/main.c **** }
 963              		.loc 1 553 1 view .LVU178
 964 001c 10BD     		pop	{r4, pc}
 965              	.LVL72:
 966              	.L67:
 967              		.loc 1 553 1 view .LVU179
 968 001e 00BF     		.align	2
 969              	.L66:
 970 0020 00000000 		.word	.LC17
 971              		.cfi_endproc
 972              	.LFE241:
 974              		.section	.rodata.getStatusName.str1.4,"aMS",%progbits,1
 975              		.align	2
 976              	.LC18:
 977 0000 73746174 		.ascii	"state : eRunning  %d \015\012\000"
 977      65203A20 
 977      6552756E 
 977      6E696E67 
 977      20202564 
 978              		.align	2
 979              	.LC19:
 980 0018 73746174 		.ascii	"state : eReady  %d \015\012\000"
 980      65203A20 
 980      65526561 
 980      64792020 
 980      2564200D 
 981 002e 0000     		.align	2
 982              	.LC20:
 983 0030 73746174 		.ascii	"state : eBlocked %d \015\012\000"
 983      65203A20 
 983      65426C6F 
 983      636B6564 
 983      20256420 
 984 0047 00       		.align	2
 985              	.LC21:
 986 0048 73746174 		.ascii	"state : eSuspended  %d \015\012\000"
 986      65203A20 
 986      65537573 
ARM GAS  /tmp/cciVV68U.s 			page 30


 986      70656E64 
 986      65642020 
 987 0062 0000     		.align	2
 988              	.LC22:
 989 0064 73746174 		.ascii	"state : eDeleted  %d \015\012\000"
 989      65203A20 
 989      6544656C 
 989      65746564 
 989      20202564 
 990              		.align	2
 991              	.LC23:
 992 007c 73746174 		.ascii	"state : eInvalid  %d \015\012\000"
 992      65203A20 
 992      65496E76 
 992      616C6964 
 992      20202564 
 993              		.section	.text.getStatusName,"ax",%progbits
 994              		.align	1
 995              		.global	getStatusName
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 1000              	getStatusName:
 1001              	.LVL73:
 1002              	.LFB242:
 554:Core/Src/main.c **** 
 555:Core/Src/main.c **** void getStatusName(int a)
 556:Core/Src/main.c **** {
 1003              		.loc 1 556 1 is_stmt 1 view -0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              		.loc 1 556 1 is_stmt 0 view .LVU181
 1008 0000 08B5     		push	{r3, lr}
 1009              	.LCFI20:
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 3, -8
 1012              		.cfi_offset 14, -4
 1013 0002 0146     		mov	r1, r0
 557:Core/Src/main.c **** 	
 558:Core/Src/main.c **** 	switch(a)
 1014              		.loc 1 558 2 is_stmt 1 view .LVU182
 1015 0004 0428     		cmp	r0, #4
 1016 0006 18D8     		bhi	.L69
 1017 0008 DFE800F0 		tbb	[pc, r0]
 1018              	.L71:
 1019 000c 03       		.byte	(.L75-.L71)/2
 1020 000d 07       		.byte	(.L74-.L71)/2
 1021 000e 0B       		.byte	(.L73-.L71)/2
 1022 000f 0F       		.byte	(.L72-.L71)/2
 1023 0010 13       		.byte	(.L70-.L71)/2
 1024 0011 00       		.p2align 1
 1025              	.L75:
 559:Core/Src/main.c **** 	{
 560:Core/Src/main.c **** 		case 0:  printf( "state : eRunning  %d \r\n", a );
 1026              		.loc 1 560 12 view .LVU183
 1027 0012 0C48     		ldr	r0, .L78
ARM GAS  /tmp/cciVV68U.s 			page 31


 1028              	.LVL74:
 1029              		.loc 1 560 12 is_stmt 0 view .LVU184
 1030 0014 FFF7FEFF 		bl	printf
 1031              	.LVL75:
 561:Core/Src/main.c **** 		break;	
 1032              		.loc 1 561 3 is_stmt 1 view .LVU185
 1033              	.L68:
 562:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 563:Core/Src/main.c **** 		break;
 564:Core/Src/main.c **** 		case 2:  printf( "state : eBlocked %d \r\n", a );
 565:Core/Src/main.c **** 		break;
 566:Core/Src/main.c **** 		case 3:  printf( "state : eSuspended  %d \r\n", a );
 567:Core/Src/main.c **** 		break;
 568:Core/Src/main.c **** 		case 4:  printf( "state : eDeleted  %d \r\n", a );
 569:Core/Src/main.c **** 		break;
 570:Core/Src/main.c **** 		default: printf( "state : eInvalid  %d \r\n", a );
 571:Core/Src/main.c **** 		break;
 572:Core/Src/main.c **** 	}
 573:Core/Src/main.c **** }
 1034              		.loc 1 573 1 is_stmt 0 view .LVU186
 1035 0018 08BD     		pop	{r3, pc}
 1036              	.LVL76:
 1037              	.L74:
 562:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 1038              		.loc 1 562 12 is_stmt 1 view .LVU187
 1039 001a 0B48     		ldr	r0, .L78+4
 1040              	.LVL77:
 562:Core/Src/main.c **** 		case 1:  printf( "state : eReady  %d \r\n", a );
 1041              		.loc 1 562 12 is_stmt 0 view .LVU188
 1042 001c FFF7FEFF 		bl	printf
 1043              	.LVL78:
 563:Core/Src/main.c **** 		case 2:  printf( "state : eBlocked %d \r\n", a );
 1044              		.loc 1 563 3 is_stmt 1 view .LVU189
 1045 0020 FAE7     		b	.L68
 1046              	.LVL79:
 1047              	.L73:
 564:Core/Src/main.c **** 		break;
 1048              		.loc 1 564 12 view .LVU190
 1049 0022 0A48     		ldr	r0, .L78+8
 1050              	.LVL80:
 564:Core/Src/main.c **** 		break;
 1051              		.loc 1 564 12 is_stmt 0 view .LVU191
 1052 0024 FFF7FEFF 		bl	printf
 1053              	.LVL81:
 565:Core/Src/main.c **** 		case 3:  printf( "state : eSuspended  %d \r\n", a );
 1054              		.loc 1 565 3 is_stmt 1 view .LVU192
 1055 0028 F6E7     		b	.L68
 1056              	.LVL82:
 1057              	.L72:
 566:Core/Src/main.c **** 		break;
 1058              		.loc 1 566 12 view .LVU193
 1059 002a 0948     		ldr	r0, .L78+12
 1060              	.LVL83:
 566:Core/Src/main.c **** 		break;
 1061              		.loc 1 566 12 is_stmt 0 view .LVU194
 1062 002c FFF7FEFF 		bl	printf
 1063              	.LVL84:
ARM GAS  /tmp/cciVV68U.s 			page 32


 567:Core/Src/main.c **** 		case 4:  printf( "state : eDeleted  %d \r\n", a );
 1064              		.loc 1 567 3 is_stmt 1 view .LVU195
 1065 0030 F2E7     		b	.L68
 1066              	.LVL85:
 1067              	.L70:
 568:Core/Src/main.c **** 		break;
 1068              		.loc 1 568 12 view .LVU196
 1069 0032 0848     		ldr	r0, .L78+16
 1070              	.LVL86:
 568:Core/Src/main.c **** 		break;
 1071              		.loc 1 568 12 is_stmt 0 view .LVU197
 1072 0034 FFF7FEFF 		bl	printf
 1073              	.LVL87:
 569:Core/Src/main.c **** 		default: printf( "state : eInvalid  %d \r\n", a );
 1074              		.loc 1 569 3 is_stmt 1 view .LVU198
 1075 0038 EEE7     		b	.L68
 1076              	.LVL88:
 1077              	.L69:
 570:Core/Src/main.c **** 		break;
 1078              		.loc 1 570 12 view .LVU199
 1079 003a 0748     		ldr	r0, .L78+20
 1080              	.LVL89:
 570:Core/Src/main.c **** 		break;
 1081              		.loc 1 570 12 is_stmt 0 view .LVU200
 1082 003c FFF7FEFF 		bl	printf
 1083              	.LVL90:
 571:Core/Src/main.c **** 	}
 1084              		.loc 1 571 3 is_stmt 1 view .LVU201
 1085              		.loc 1 573 1 is_stmt 0 view .LVU202
 1086 0040 EAE7     		b	.L68
 1087              	.L79:
 1088 0042 00BF     		.align	2
 1089              	.L78:
 1090 0044 00000000 		.word	.LC18
 1091 0048 18000000 		.word	.LC19
 1092 004c 30000000 		.word	.LC20
 1093 0050 48000000 		.word	.LC21
 1094 0054 64000000 		.word	.LC22
 1095 0058 7C000000 		.word	.LC23
 1096              		.cfi_endproc
 1097              	.LFE242:
 1099              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1100              		.align	1
 1101              		.global	HAL_TIM_PeriodElapsedCallback
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1106              	HAL_TIM_PeriodElapsedCallback:
 1107              	.LVL91:
 1108              	.LFB243:
 574:Core/Src/main.c **** /* USER CODE END 4 */
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** /**
 577:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 578:Core/Src/main.c ****   * @note   This function is called  when TIM11 interrupt took place, inside
 579:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 580:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
ARM GAS  /tmp/cciVV68U.s 			page 33


 581:Core/Src/main.c ****   * @param  htim : TIM handle
 582:Core/Src/main.c ****   * @retval None
 583:Core/Src/main.c ****   */
 584:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 585:Core/Src/main.c **** {
 1109              		.loc 1 585 1 is_stmt 1 view -0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113              		.loc 1 585 1 is_stmt 0 view .LVU204
 1114 0000 08B5     		push	{r3, lr}
 1115              	.LCFI21:
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 3, -8
 1118              		.cfi_offset 14, -4
 586:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 587:Core/Src/main.c **** 
 588:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 589:Core/Src/main.c ****   if (htim->Instance == TIM11) {
 1119              		.loc 1 589 3 is_stmt 1 view .LVU205
 1120              		.loc 1 589 11 is_stmt 0 view .LVU206
 1121 0002 0268     		ldr	r2, [r0]
 1122              		.loc 1 589 6 view .LVU207
 1123 0004 034B     		ldr	r3, .L84
 1124 0006 9A42     		cmp	r2, r3
 1125 0008 00D0     		beq	.L83
 1126              	.LVL92:
 1127              	.L80:
 590:Core/Src/main.c ****     HAL_IncTick();
 591:Core/Src/main.c ****   }
 592:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 595:Core/Src/main.c **** }
 1128              		.loc 1 595 1 view .LVU208
 1129 000a 08BD     		pop	{r3, pc}
 1130              	.LVL93:
 1131              	.L83:
 590:Core/Src/main.c ****     HAL_IncTick();
 1132              		.loc 1 590 5 is_stmt 1 view .LVU209
 1133 000c FFF7FEFF 		bl	HAL_IncTick
 1134              	.LVL94:
 1135              		.loc 1 595 1 is_stmt 0 view .LVU210
 1136 0010 FBE7     		b	.L80
 1137              	.L85:
 1138 0012 00BF     		.align	2
 1139              	.L84:
 1140 0014 00480140 		.word	1073825792
 1141              		.cfi_endproc
 1142              	.LFE243:
 1144              		.section	.text.Error_Handler,"ax",%progbits
 1145              		.align	1
 1146              		.global	Error_Handler
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1151              	Error_Handler:
ARM GAS  /tmp/cciVV68U.s 			page 34


 1152              	.LFB244:
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** /**
 598:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 599:Core/Src/main.c ****   * @retval None
 600:Core/Src/main.c ****   */
 601:Core/Src/main.c **** void Error_Handler(void)
 602:Core/Src/main.c **** {
 1153              		.loc 1 602 1 is_stmt 1 view -0
 1154              		.cfi_startproc
 1155              		@ Volatile: function does not return.
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 603:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 604:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 605:Core/Src/main.c ****   __disable_irq();
 1159              		.loc 1 605 3 view .LVU212
 1160              	.LBB10:
 1161              	.LBI10:
 1162              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  /tmp/cciVV68U.s 			page 35


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cciVV68U.s 			page 36


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cciVV68U.s 			page 37


 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /tmp/cciVV68U.s 			page 38


 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cciVV68U.s 			page 39


 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /tmp/cciVV68U.s 			page 40


 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/cciVV68U.s 			page 41


 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cciVV68U.s 			page 42


 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cciVV68U.s 			page 43


 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cciVV68U.s 			page 44


 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/cciVV68U.s 			page 45


 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
ARM GAS  /tmp/cciVV68U.s 			page 46


 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/cciVV68U.s 			page 47


 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
ARM GAS  /tmp/cciVV68U.s 			page 48


 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cciVV68U.s 			page 49


 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cciVV68U.s 			page 50


 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cciVV68U.s 			page 51


 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1163              		.loc 2 960 27 view .LVU213
 1164              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1165              		.loc 2 962 3 view .LVU214
 1166              		.syntax unified
 1167              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1168 0000 72B6     		cpsid i
 1169              	@ 0 "" 2
 1170              		.thumb
 1171              		.syntax unified
 1172              	.L87:
 1173              	.LBE11:
 1174              	.LBE10:
 606:Core/Src/main.c ****   while (1)
 1175              		.loc 1 606 3 discriminator 1 view .LVU215
 607:Core/Src/main.c ****   {
 608:Core/Src/main.c ****   }
 1176              		.loc 1 608 3 discriminator 1 view .LVU216
 606:Core/Src/main.c ****   while (1)
 1177              		.loc 1 606 9 discriminator 1 view .LVU217
 1178 0002 FEE7     		b	.L87
 1179              		.cfi_endproc
 1180              	.LFE244:
 1182              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1183              		.align	1
 1184              		.syntax unified
 1185              		.thumb
 1186              		.thumb_func
 1188              	MX_ADC1_Init:
 1189              	.LFB229:
 241:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 1190              		.loc 1 241 1 view -0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 16
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194 0000 00B5     		push	{lr}
 1195              	.LCFI22:
 1196              		.cfi_def_cfa_offset 4
 1197              		.cfi_offset 14, -4
 1198 0002 85B0     		sub	sp, sp, #20
 1199              	.LCFI23:
 1200              		.cfi_def_cfa_offset 24
 246:Core/Src/main.c **** 
 1201              		.loc 1 246 3 view .LVU219
ARM GAS  /tmp/cciVV68U.s 			page 52


 246:Core/Src/main.c **** 
 1202              		.loc 1 246 26 is_stmt 0 view .LVU220
 1203 0004 0023     		movs	r3, #0
 1204 0006 0093     		str	r3, [sp]
 1205 0008 0193     		str	r3, [sp, #4]
 1206 000a 0293     		str	r3, [sp, #8]
 1207 000c 0393     		str	r3, [sp, #12]
 254:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1208              		.loc 1 254 3 is_stmt 1 view .LVU221
 254:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1209              		.loc 1 254 18 is_stmt 0 view .LVU222
 1210 000e 1448     		ldr	r0, .L94
 1211 0010 144A     		ldr	r2, .L94+4
 1212 0012 0260     		str	r2, [r0]
 255:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1213              		.loc 1 255 3 is_stmt 1 view .LVU223
 255:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1214              		.loc 1 255 29 is_stmt 0 view .LVU224
 1215 0014 4FF48032 		mov	r2, #65536
 1216 0018 4260     		str	r2, [r0, #4]
 256:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1217              		.loc 1 256 3 is_stmt 1 view .LVU225
 256:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1218              		.loc 1 256 25 is_stmt 0 view .LVU226
 1219 001a 8360     		str	r3, [r0, #8]
 257:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1220              		.loc 1 257 3 is_stmt 1 view .LVU227
 257:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1221              		.loc 1 257 27 is_stmt 0 view .LVU228
 1222 001c 0122     		movs	r2, #1
 1223 001e 0261     		str	r2, [r0, #16]
 258:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1224              		.loc 1 258 3 is_stmt 1 view .LVU229
 258:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1225              		.loc 1 258 33 is_stmt 0 view .LVU230
 1226 0020 0276     		strb	r2, [r0, #24]
 259:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1227              		.loc 1 259 3 is_stmt 1 view .LVU231
 259:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1228              		.loc 1 259 36 is_stmt 0 view .LVU232
 1229 0022 80F82030 		strb	r3, [r0, #32]
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1230              		.loc 1 260 3 is_stmt 1 view .LVU233
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1231              		.loc 1 260 35 is_stmt 0 view .LVU234
 1232 0026 C362     		str	r3, [r0, #44]
 261:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1233              		.loc 1 261 3 is_stmt 1 view .LVU235
 261:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1234              		.loc 1 261 31 is_stmt 0 view .LVU236
 1235 0028 0F49     		ldr	r1, .L94+8
 1236 002a 8162     		str	r1, [r0, #40]
 262:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1237              		.loc 1 262 3 is_stmt 1 view .LVU237
 262:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1238              		.loc 1 262 24 is_stmt 0 view .LVU238
 1239 002c C360     		str	r3, [r0, #12]
ARM GAS  /tmp/cciVV68U.s 			page 53


 263:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1240              		.loc 1 263 3 is_stmt 1 view .LVU239
 263:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1241              		.loc 1 263 30 is_stmt 0 view .LVU240
 1242 002e C261     		str	r2, [r0, #28]
 264:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1243              		.loc 1 264 3 is_stmt 1 view .LVU241
 264:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1244              		.loc 1 264 36 is_stmt 0 view .LVU242
 1245 0030 80F83020 		strb	r2, [r0, #48]
 265:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1246              		.loc 1 265 3 is_stmt 1 view .LVU243
 265:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1247              		.loc 1 265 27 is_stmt 0 view .LVU244
 1248 0034 4261     		str	r2, [r0, #20]
 266:Core/Src/main.c ****   {
 1249              		.loc 1 266 3 is_stmt 1 view .LVU245
 266:Core/Src/main.c ****   {
 1250              		.loc 1 266 7 is_stmt 0 view .LVU246
 1251 0036 FFF7FEFF 		bl	HAL_ADC_Init
 1252              	.LVL95:
 266:Core/Src/main.c ****   {
 1253              		.loc 1 266 6 view .LVU247
 1254 003a 68B9     		cbnz	r0, .L92
 273:Core/Src/main.c ****   sConfig.Rank = 1;
 1255              		.loc 1 273 3 is_stmt 1 view .LVU248
 273:Core/Src/main.c ****   sConfig.Rank = 1;
 1256              		.loc 1 273 19 is_stmt 0 view .LVU249
 1257 003c 0B4B     		ldr	r3, .L94+12
 1258 003e 0093     		str	r3, [sp]
 274:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1259              		.loc 1 274 3 is_stmt 1 view .LVU250
 274:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1260              		.loc 1 274 16 is_stmt 0 view .LVU251
 1261 0040 0123     		movs	r3, #1
 1262 0042 0193     		str	r3, [sp, #4]
 275:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1263              		.loc 1 275 3 is_stmt 1 view .LVU252
 275:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1264              		.loc 1 275 24 is_stmt 0 view .LVU253
 1265 0044 0723     		movs	r3, #7
 1266 0046 0293     		str	r3, [sp, #8]
 276:Core/Src/main.c ****   {
 1267              		.loc 1 276 3 is_stmt 1 view .LVU254
 276:Core/Src/main.c ****   {
 1268              		.loc 1 276 7 is_stmt 0 view .LVU255
 1269 0048 6946     		mov	r1, sp
 1270 004a 0548     		ldr	r0, .L94
 1271 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1272              	.LVL96:
 276:Core/Src/main.c ****   {
 1273              		.loc 1 276 6 view .LVU256
 1274 0050 20B9     		cbnz	r0, .L93
 283:Core/Src/main.c **** 
 1275              		.loc 1 283 1 view .LVU257
 1276 0052 05B0     		add	sp, sp, #20
 1277              	.LCFI24:
ARM GAS  /tmp/cciVV68U.s 			page 54


 1278              		.cfi_remember_state
 1279              		.cfi_def_cfa_offset 4
 1280              		@ sp needed
 1281 0054 5DF804FB 		ldr	pc, [sp], #4
 1282              	.L92:
 1283              	.LCFI25:
 1284              		.cfi_restore_state
 268:Core/Src/main.c ****   }
 1285              		.loc 1 268 5 is_stmt 1 view .LVU258
 1286 0058 FFF7FEFF 		bl	Error_Handler
 1287              	.LVL97:
 1288              	.L93:
 278:Core/Src/main.c ****   }
 1289              		.loc 1 278 5 view .LVU259
 1290 005c FFF7FEFF 		bl	Error_Handler
 1291              	.LVL98:
 1292              	.L95:
 1293              		.align	2
 1294              	.L94:
 1295 0060 00000000 		.word	.LANCHOR6
 1296 0064 00200140 		.word	1073815552
 1297 0068 0100000F 		.word	251658241
 1298 006c 12000010 		.word	268435474
 1299              		.cfi_endproc
 1300              	.LFE229:
 1302              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1303              		.align	1
 1304              		.syntax unified
 1305              		.thumb
 1306              		.thumb_func
 1308              	MX_USART2_UART_Init:
 1309              	.LFB230:
 291:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 1310              		.loc 1 291 1 view -0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314 0000 08B5     		push	{r3, lr}
 1315              	.LCFI26:
 1316              		.cfi_def_cfa_offset 8
 1317              		.cfi_offset 3, -8
 1318              		.cfi_offset 14, -4
 299:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1319              		.loc 1 299 3 view .LVU261
 299:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1320              		.loc 1 299 19 is_stmt 0 view .LVU262
 1321 0002 0A48     		ldr	r0, .L100
 1322 0004 0A4B     		ldr	r3, .L100+4
 1323 0006 0360     		str	r3, [r0]
 300:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1324              		.loc 1 300 3 is_stmt 1 view .LVU263
 300:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1325              		.loc 1 300 24 is_stmt 0 view .LVU264
 1326 0008 4FF4E133 		mov	r3, #115200
 1327 000c 4360     		str	r3, [r0, #4]
 301:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1328              		.loc 1 301 3 is_stmt 1 view .LVU265
ARM GAS  /tmp/cciVV68U.s 			page 55


 301:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1329              		.loc 1 301 26 is_stmt 0 view .LVU266
 1330 000e 0023     		movs	r3, #0
 1331 0010 8360     		str	r3, [r0, #8]
 302:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1332              		.loc 1 302 3 is_stmt 1 view .LVU267
 302:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1333              		.loc 1 302 24 is_stmt 0 view .LVU268
 1334 0012 C360     		str	r3, [r0, #12]
 303:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1335              		.loc 1 303 3 is_stmt 1 view .LVU269
 303:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1336              		.loc 1 303 22 is_stmt 0 view .LVU270
 1337 0014 0361     		str	r3, [r0, #16]
 304:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1338              		.loc 1 304 3 is_stmt 1 view .LVU271
 304:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1339              		.loc 1 304 20 is_stmt 0 view .LVU272
 1340 0016 0C22     		movs	r2, #12
 1341 0018 4261     		str	r2, [r0, #20]
 305:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1342              		.loc 1 305 3 is_stmt 1 view .LVU273
 305:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1343              		.loc 1 305 25 is_stmt 0 view .LVU274
 1344 001a 8361     		str	r3, [r0, #24]
 306:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1345              		.loc 1 306 3 is_stmt 1 view .LVU275
 306:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1346              		.loc 1 306 28 is_stmt 0 view .LVU276
 1347 001c C361     		str	r3, [r0, #28]
 307:Core/Src/main.c ****   {
 1348              		.loc 1 307 3 is_stmt 1 view .LVU277
 307:Core/Src/main.c ****   {
 1349              		.loc 1 307 7 is_stmt 0 view .LVU278
 1350 001e FFF7FEFF 		bl	HAL_UART_Init
 1351              	.LVL99:
 307:Core/Src/main.c ****   {
 1352              		.loc 1 307 6 view .LVU279
 1353 0022 00B9     		cbnz	r0, .L99
 314:Core/Src/main.c **** 
 1354              		.loc 1 314 1 view .LVU280
 1355 0024 08BD     		pop	{r3, pc}
 1356              	.L99:
 309:Core/Src/main.c ****   }
 1357              		.loc 1 309 5 is_stmt 1 view .LVU281
 1358 0026 FFF7FEFF 		bl	Error_Handler
 1359              	.LVL100:
 1360              	.L101:
 1361 002a 00BF     		.align	2
 1362              	.L100:
 1363 002c 00000000 		.word	.LANCHOR5
 1364 0030 00440040 		.word	1073759232
 1365              		.cfi_endproc
 1366              	.LFE230:
 1368              		.section	.text.SystemClock_Config,"ax",%progbits
 1369              		.align	1
 1370              		.global	SystemClock_Config
ARM GAS  /tmp/cciVV68U.s 			page 56


 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1375              	SystemClock_Config:
 1376              	.LFB228:
 194:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1377              		.loc 1 194 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 80
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381 0000 00B5     		push	{lr}
 1382              	.LCFI27:
 1383              		.cfi_def_cfa_offset 4
 1384              		.cfi_offset 14, -4
 1385 0002 95B0     		sub	sp, sp, #84
 1386              	.LCFI28:
 1387              		.cfi_def_cfa_offset 88
 195:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1388              		.loc 1 195 3 view .LVU283
 195:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1389              		.loc 1 195 22 is_stmt 0 view .LVU284
 1390 0004 3022     		movs	r2, #48
 1391 0006 0021     		movs	r1, #0
 1392 0008 08A8     		add	r0, sp, #32
 1393 000a FFF7FEFF 		bl	memset
 1394              	.LVL101:
 196:Core/Src/main.c **** 
 1395              		.loc 1 196 3 is_stmt 1 view .LVU285
 196:Core/Src/main.c **** 
 1396              		.loc 1 196 22 is_stmt 0 view .LVU286
 1397 000e 0023     		movs	r3, #0
 1398 0010 0393     		str	r3, [sp, #12]
 1399 0012 0493     		str	r3, [sp, #16]
 1400 0014 0593     		str	r3, [sp, #20]
 1401 0016 0693     		str	r3, [sp, #24]
 1402 0018 0793     		str	r3, [sp, #28]
 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1403              		.loc 1 200 3 is_stmt 1 view .LVU287
 1404              	.LBB12:
 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1405              		.loc 1 200 3 view .LVU288
 1406 001a 0193     		str	r3, [sp, #4]
 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1407              		.loc 1 200 3 view .LVU289
 1408 001c 1E4A     		ldr	r2, .L108
 1409 001e 116C     		ldr	r1, [r2, #64]
 1410 0020 41F08051 		orr	r1, r1, #268435456
 1411 0024 1164     		str	r1, [r2, #64]
 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1412              		.loc 1 200 3 view .LVU290
 1413 0026 126C     		ldr	r2, [r2, #64]
 1414 0028 02F08052 		and	r2, r2, #268435456
 1415 002c 0192     		str	r2, [sp, #4]
 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1416              		.loc 1 200 3 view .LVU291
 1417 002e 019A     		ldr	r2, [sp, #4]
 1418              	.LBE12:
ARM GAS  /tmp/cciVV68U.s 			page 57


 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1419              		.loc 1 200 3 view .LVU292
 201:Core/Src/main.c **** 
 1420              		.loc 1 201 3 view .LVU293
 1421              	.LBB13:
 201:Core/Src/main.c **** 
 1422              		.loc 1 201 3 view .LVU294
 1423 0030 0293     		str	r3, [sp, #8]
 201:Core/Src/main.c **** 
 1424              		.loc 1 201 3 view .LVU295
 1425 0032 1A4A     		ldr	r2, .L108+4
 1426 0034 1168     		ldr	r1, [r2]
 1427 0036 41F44041 		orr	r1, r1, #49152
 1428 003a 1160     		str	r1, [r2]
 201:Core/Src/main.c **** 
 1429              		.loc 1 201 3 view .LVU296
 1430 003c 1268     		ldr	r2, [r2]
 1431 003e 02F44042 		and	r2, r2, #49152
 1432 0042 0292     		str	r2, [sp, #8]
 201:Core/Src/main.c **** 
 1433              		.loc 1 201 3 view .LVU297
 1434 0044 029A     		ldr	r2, [sp, #8]
 1435              	.LBE13:
 201:Core/Src/main.c **** 
 1436              		.loc 1 201 3 view .LVU298
 206:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1437              		.loc 1 206 3 view .LVU299
 206:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1438              		.loc 1 206 36 is_stmt 0 view .LVU300
 1439 0046 0221     		movs	r1, #2
 1440 0048 0891     		str	r1, [sp, #32]
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1441              		.loc 1 207 3 is_stmt 1 view .LVU301
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1442              		.loc 1 207 30 is_stmt 0 view .LVU302
 1443 004a 0122     		movs	r2, #1
 1444 004c 0B92     		str	r2, [sp, #44]
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1445              		.loc 1 208 3 is_stmt 1 view .LVU303
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1446              		.loc 1 208 41 is_stmt 0 view .LVU304
 1447 004e 1022     		movs	r2, #16
 1448 0050 0C92     		str	r2, [sp, #48]
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1449              		.loc 1 209 3 is_stmt 1 view .LVU305
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1450              		.loc 1 209 34 is_stmt 0 view .LVU306
 1451 0052 0E91     		str	r1, [sp, #56]
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1452              		.loc 1 210 3 is_stmt 1 view .LVU307
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1453              		.loc 1 210 35 is_stmt 0 view .LVU308
 1454 0054 0F93     		str	r3, [sp, #60]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1455              		.loc 1 211 3 is_stmt 1 view .LVU309
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1456              		.loc 1 211 30 is_stmt 0 view .LVU310
ARM GAS  /tmp/cciVV68U.s 			page 58


 1457 0056 1092     		str	r2, [sp, #64]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1458              		.loc 1 212 3 is_stmt 1 view .LVU311
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1459              		.loc 1 212 30 is_stmt 0 view .LVU312
 1460 0058 4FF4A873 		mov	r3, #336
 1461 005c 1193     		str	r3, [sp, #68]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1462              		.loc 1 213 3 is_stmt 1 view .LVU313
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1463              		.loc 1 213 30 is_stmt 0 view .LVU314
 1464 005e 0423     		movs	r3, #4
 1465 0060 1293     		str	r3, [sp, #72]
 214:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1466              		.loc 1 214 3 is_stmt 1 view .LVU315
 214:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1467              		.loc 1 214 30 is_stmt 0 view .LVU316
 1468 0062 1393     		str	r3, [sp, #76]
 215:Core/Src/main.c ****   {
 1469              		.loc 1 215 3 is_stmt 1 view .LVU317
 215:Core/Src/main.c ****   {
 1470              		.loc 1 215 7 is_stmt 0 view .LVU318
 1471 0064 08A8     		add	r0, sp, #32
 1472 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1473              	.LVL102:
 215:Core/Src/main.c ****   {
 1474              		.loc 1 215 6 view .LVU319
 1475 006a 80B9     		cbnz	r0, .L106
 222:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1476              		.loc 1 222 3 is_stmt 1 view .LVU320
 222:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1477              		.loc 1 222 31 is_stmt 0 view .LVU321
 1478 006c 0F23     		movs	r3, #15
 1479 006e 0393     		str	r3, [sp, #12]
 224:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1480              		.loc 1 224 3 is_stmt 1 view .LVU322
 224:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1481              		.loc 1 224 34 is_stmt 0 view .LVU323
 1482 0070 0221     		movs	r1, #2
 1483 0072 0491     		str	r1, [sp, #16]
 225:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1484              		.loc 1 225 3 is_stmt 1 view .LVU324
 225:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1485              		.loc 1 225 35 is_stmt 0 view .LVU325
 1486 0074 0023     		movs	r3, #0
 1487 0076 0593     		str	r3, [sp, #20]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1488              		.loc 1 226 3 is_stmt 1 view .LVU326
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1489              		.loc 1 226 36 is_stmt 0 view .LVU327
 1490 0078 4FF48052 		mov	r2, #4096
 1491 007c 0692     		str	r2, [sp, #24]
 227:Core/Src/main.c **** 
 1492              		.loc 1 227 3 is_stmt 1 view .LVU328
 227:Core/Src/main.c **** 
 1493              		.loc 1 227 36 is_stmt 0 view .LVU329
 1494 007e 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/cciVV68U.s 			page 59


 229:Core/Src/main.c ****   {
 1495              		.loc 1 229 3 is_stmt 1 view .LVU330
 229:Core/Src/main.c ****   {
 1496              		.loc 1 229 7 is_stmt 0 view .LVU331
 1497 0080 03A8     		add	r0, sp, #12
 1498 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1499              	.LVL103:
 229:Core/Src/main.c ****   {
 1500              		.loc 1 229 6 view .LVU332
 1501 0086 20B9     		cbnz	r0, .L107
 233:Core/Src/main.c **** 
 1502              		.loc 1 233 1 view .LVU333
 1503 0088 15B0     		add	sp, sp, #84
 1504              	.LCFI29:
 1505              		.cfi_remember_state
 1506              		.cfi_def_cfa_offset 4
 1507              		@ sp needed
 1508 008a 5DF804FB 		ldr	pc, [sp], #4
 1509              	.L106:
 1510              	.LCFI30:
 1511              		.cfi_restore_state
 217:Core/Src/main.c ****   }
 1512              		.loc 1 217 5 is_stmt 1 view .LVU334
 1513 008e FFF7FEFF 		bl	Error_Handler
 1514              	.LVL104:
 1515              	.L107:
 231:Core/Src/main.c ****   }
 1516              		.loc 1 231 5 view .LVU335
 1517 0092 FFF7FEFF 		bl	Error_Handler
 1518              	.LVL105:
 1519              	.L109:
 1520 0096 00BF     		.align	2
 1521              	.L108:
 1522 0098 00380240 		.word	1073887232
 1523 009c 00700040 		.word	1073770496
 1524              		.cfi_endproc
 1525              	.LFE228:
 1527              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1528              		.align	2
 1529              	.LC24:
 1530 0000 5461736B 		.ascii	"Task03\000"
 1530      303300
 1531 0007 00       		.align	2
 1532              	.LC25:
 1533 0008 5461736B 		.ascii	"Task04\000"
 1533      303400
 1534 000f 00       		.align	2
 1535              	.LC26:
 1536 0010 5461736B 		.ascii	"Task05\000"
 1536      303500
 1537 0017 00       		.align	2
 1538              	.LC27:
 1539 0018 5461736B 		.ascii	"Task06\000"
 1539      303600
 1540 001f 00       		.align	2
 1541              	.LC28:
 1542 0020 62692073 		.ascii	"bi semo count is %d\015\012\000"
ARM GAS  /tmp/cciVV68U.s 			page 60


 1542      656D6F20 
 1542      636F756E 
 1542      74206973 
 1542      2025640D 
 1543 0036 0000     		.align	2
 1544              	.LC29:
 1545 0038 67697669 		.ascii	"giving Bi_semo1\015\000"
 1545      6E672042 
 1545      695F7365 
 1545      6D6F310D 
 1545      00
 1546 0049 000000   		.align	2
 1547              	.LC30:
 1548 004c 7C2A2A20 		.ascii	"|** Start Scheduler **|\015\000"
 1548      53746172 
 1548      74205363 
 1548      68656475 
 1548      6C657220 
 1549              		.section	.text.main,"ax",%progbits
 1550              		.align	1
 1551              		.global	main
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1556              	main:
 1557              	.LFB227:
  98:Core/Src/main.c **** 
 1558              		.loc 1 98 1 view -0
 1559              		.cfi_startproc
 1560              		@ Volatile: function does not return.
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563 0000 00B5     		push	{lr}
 1564              	.LCFI31:
 1565              		.cfi_def_cfa_offset 4
 1566              		.cfi_offset 14, -4
 1567 0002 83B0     		sub	sp, sp, #12
 1568              	.LCFI32:
 1569              		.cfi_def_cfa_offset 16
 107:Core/Src/main.c **** 
 1570              		.loc 1 107 3 view .LVU337
 1571 0004 FFF7FEFF 		bl	HAL_Init
 1572              	.LVL106:
 114:Core/Src/main.c **** 
 1573              		.loc 1 114 3 view .LVU338
 1574 0008 FFF7FEFF 		bl	SystemClock_Config
 1575              	.LVL107:
 121:Core/Src/main.c ****   MX_DMA_Init();
 1576              		.loc 1 121 3 view .LVU339
 1577 000c FFF7FEFF 		bl	MX_GPIO_Init
 1578              	.LVL108:
 122:Core/Src/main.c ****   MX_ADC1_Init();
 1579              		.loc 1 122 3 view .LVU340
 1580 0010 FFF7FEFF 		bl	MX_DMA_Init
 1581              	.LVL109:
 123:Core/Src/main.c ****   MX_USART2_UART_Init();
 1582              		.loc 1 123 3 view .LVU341
ARM GAS  /tmp/cciVV68U.s 			page 61


 1583 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1584              	.LVL110:
 124:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1585              		.loc 1 124 3 view .LVU342
 1586 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 1587              	.LVL111:
 127:Core/Src/main.c ****   TaskAdd(StartTask04, "Task04", 128*4, NULL, 6, &Task04Handle);
 1588              		.loc 1 127 3 view .LVU343
 1589 001c 2A4B     		ldr	r3, .L113
 1590 001e 0193     		str	r3, [sp, #4]
 1591 0020 0823     		movs	r3, #8
 1592 0022 0093     		str	r3, [sp]
 1593 0024 0023     		movs	r3, #0
 1594 0026 4FF40072 		mov	r2, #512
 1595 002a 2849     		ldr	r1, .L113+4
 1596 002c 2848     		ldr	r0, .L113+8
 1597 002e FFF7FEFF 		bl	TaskAdd
 1598              	.LVL112:
 128:Core/Src/main.c ****   TaskAdd(StartTask05, "Task05", 128*4, NULL, 4, &Task05Handle);
 1599              		.loc 1 128 3 view .LVU344
 1600 0032 284B     		ldr	r3, .L113+12
 1601 0034 0193     		str	r3, [sp, #4]
 1602 0036 0623     		movs	r3, #6
 1603 0038 0093     		str	r3, [sp]
 1604 003a 0023     		movs	r3, #0
 1605 003c 4FF40072 		mov	r2, #512
 1606 0040 2549     		ldr	r1, .L113+16
 1607 0042 2648     		ldr	r0, .L113+20
 1608 0044 FFF7FEFF 		bl	TaskAdd
 1609              	.LVL113:
 129:Core/Src/main.c ****   TaskAdd(StartTask06, "Task06", 128*4, NULL, 2, &Task06Handle);
 1610              		.loc 1 129 3 view .LVU345
 1611 0048 254B     		ldr	r3, .L113+24
 1612 004a 0193     		str	r3, [sp, #4]
 1613 004c 0423     		movs	r3, #4
 1614 004e 0093     		str	r3, [sp]
 1615 0050 0023     		movs	r3, #0
 1616 0052 4FF40072 		mov	r2, #512
 1617 0056 2349     		ldr	r1, .L113+28
 1618 0058 2348     		ldr	r0, .L113+32
 1619 005a FFF7FEFF 		bl	TaskAdd
 1620              	.LVL114:
 130:Core/Src/main.c ****   Bi_Semo1 = xSemaphoreCreateBinary();
 1621              		.loc 1 130 3 view .LVU346
 1622 005e 234B     		ldr	r3, .L113+36
 1623 0060 0193     		str	r3, [sp, #4]
 1624 0062 0223     		movs	r3, #2
 1625 0064 0093     		str	r3, [sp]
 1626 0066 0023     		movs	r3, #0
 1627 0068 4FF40072 		mov	r2, #512
 1628 006c 2049     		ldr	r1, .L113+40
 1629 006e 2148     		ldr	r0, .L113+44
 1630 0070 FFF7FEFF 		bl	TaskAdd
 1631              	.LVL115:
 131:Core/Src/main.c ****   Muto1 = xSemaphoreCreateMutex();
 1632              		.loc 1 131 3 view .LVU347
 131:Core/Src/main.c ****   Muto1 = xSemaphoreCreateMutex();
ARM GAS  /tmp/cciVV68U.s 			page 62


 1633              		.loc 1 131 14 is_stmt 0 view .LVU348
 1634 0074 0322     		movs	r2, #3
 1635 0076 0021     		movs	r1, #0
 1636 0078 0120     		movs	r0, #1
 1637 007a FFF7FEFF 		bl	xQueueGenericCreate
 1638              	.LVL116:
 131:Core/Src/main.c ****   Muto1 = xSemaphoreCreateMutex();
 1639              		.loc 1 131 12 view .LVU349
 1640 007e 1E4C     		ldr	r4, .L113+48
 1641 0080 2060     		str	r0, [r4]
 132:Core/Src/main.c ****   
 1642              		.loc 1 132 3 is_stmt 1 view .LVU350
 132:Core/Src/main.c ****   
 1643              		.loc 1 132 11 is_stmt 0 view .LVU351
 1644 0082 0120     		movs	r0, #1
 1645 0084 FFF7FEFF 		bl	xQueueCreateMutex
 1646              	.LVL117:
 132:Core/Src/main.c ****   
 1647              		.loc 1 132 9 view .LVU352
 1648 0088 1C4B     		ldr	r3, .L113+52
 1649 008a 1860     		str	r0, [r3]
 134:Core/Src/main.c ****   printf("giving Bi_semo1\r\n");
 1650              		.loc 1 134 3 is_stmt 1 view .LVU353
 1651 008c 2068     		ldr	r0, [r4]
 1652 008e FFF7FEFF 		bl	uxQueueMessagesWaiting
 1653              	.LVL118:
 1654 0092 0146     		mov	r1, r0
 1655 0094 1A4D     		ldr	r5, .L113+56
 1656 0096 2846     		mov	r0, r5
 1657 0098 FFF7FEFF 		bl	printf
 1658              	.LVL119:
 135:Core/Src/main.c ****   xSemaphoreGive(Bi_Semo1);
 1659              		.loc 1 135 3 view .LVU354
 1660 009c 1948     		ldr	r0, .L113+60
 1661 009e FFF7FEFF 		bl	puts
 1662              	.LVL120:
 136:Core/Src/main.c ****   printf("bi semo count is %d\r\n",uxSemaphoreGetCount(Bi_Semo1));
 1663              		.loc 1 136 3 view .LVU355
 1664 00a2 0023     		movs	r3, #0
 1665 00a4 1A46     		mov	r2, r3
 1666 00a6 1946     		mov	r1, r3
 1667 00a8 2068     		ldr	r0, [r4]
 1668 00aa FFF7FEFF 		bl	xQueueGenericSend
 1669              	.LVL121:
 137:Core/Src/main.c ****   /*if( Bi_Semo1 == NULL )
 1670              		.loc 1 137 3 view .LVU356
 1671 00ae 2068     		ldr	r0, [r4]
 1672 00b0 FFF7FEFF 		bl	uxQueueMessagesWaiting
 1673              	.LVL122:
 1674 00b4 0146     		mov	r1, r0
 1675 00b6 2846     		mov	r0, r5
 1676 00b8 FFF7FEFF 		bl	printf
 1677              	.LVL123:
 169:Core/Src/main.c ****   vTaskStartScheduler ();
 1678              		.loc 1 169 3 view .LVU357
 1679 00bc 1248     		ldr	r0, .L113+64
 1680 00be FFF7FEFF 		bl	puts
ARM GAS  /tmp/cciVV68U.s 			page 63


 1681              	.LVL124:
 170:Core/Src/main.c ****   
 1682              		.loc 1 170 3 view .LVU358
 1683 00c2 FFF7FEFF 		bl	vTaskStartScheduler
 1684              	.LVL125:
 1685              	.L111:
 180:Core/Src/main.c ****   {
 1686              		.loc 1 180 3 discriminator 1 view .LVU359
 185:Core/Src/main.c ****   /* USER CODE END 3 */
 1687              		.loc 1 185 3 discriminator 1 view .LVU360
 180:Core/Src/main.c ****   {
 1688              		.loc 1 180 9 discriminator 1 view .LVU361
 1689 00c6 FEE7     		b	.L111
 1690              	.L114:
 1691              		.align	2
 1692              	.L113:
 1693 00c8 00000000 		.word	.LANCHOR7
 1694 00cc 00000000 		.word	.LC24
 1695 00d0 00000000 		.word	StartTask03
 1696 00d4 00000000 		.word	.LANCHOR8
 1697 00d8 08000000 		.word	.LC25
 1698 00dc 00000000 		.word	StartTask04
 1699 00e0 00000000 		.word	.LANCHOR9
 1700 00e4 10000000 		.word	.LC26
 1701 00e8 00000000 		.word	StartTask05
 1702 00ec 00000000 		.word	.LANCHOR10
 1703 00f0 18000000 		.word	.LC27
 1704 00f4 00000000 		.word	StartTask06
 1705 00f8 00000000 		.word	.LANCHOR0
 1706 00fc 00000000 		.word	.LANCHOR2
 1707 0100 20000000 		.word	.LC28
 1708 0104 38000000 		.word	.LC29
 1709 0108 4C000000 		.word	.LC30
 1710              		.cfi_endproc
 1711              	.LFE227:
 1713              		.global	inkerMutex
 1714              		.global	inker
 1715              		.global	TaskList_Buffer
 1716              		.global	ClrScrFlag
 1717              		.global	Muto1
 1718              		.global	Bi_Semo1
 1719              		.global	Task06Handle
 1720              		.global	Task05Handle
 1721              		.global	Task04Handle
 1722              		.global	Task03Handle
 1723              		.global	Task02Handle
 1724              		.global	Task01Handle
 1725              		.global	huart2
 1726              		.global	hdma_adc1
 1727              		.global	hadc1
 1728              		.section	.bss.Bi_Semo1,"aw",%nobits
 1729              		.align	2
 1730              		.set	.LANCHOR0,. + 0
 1733              	Bi_Semo1:
 1734 0000 00000000 		.space	4
 1735              		.section	.bss.ClrScrFlag,"aw",%nobits
 1736              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/cciVV68U.s 			page 64


 1739              	ClrScrFlag:
 1740 0000 00       		.space	1
 1741              		.section	.bss.Muto1,"aw",%nobits
 1742              		.align	2
 1743              		.set	.LANCHOR2,. + 0
 1746              	Muto1:
 1747 0000 00000000 		.space	4
 1748              		.section	.bss.Task01Handle,"aw",%nobits
 1749              		.align	2
 1752              	Task01Handle:
 1753 0000 00000000 		.space	4
 1754              		.section	.bss.Task02Handle,"aw",%nobits
 1755              		.align	2
 1758              	Task02Handle:
 1759 0000 00000000 		.space	4
 1760              		.section	.bss.Task03Handle,"aw",%nobits
 1761              		.align	2
 1762              		.set	.LANCHOR7,. + 0
 1765              	Task03Handle:
 1766 0000 00000000 		.space	4
 1767              		.section	.bss.Task04Handle,"aw",%nobits
 1768              		.align	2
 1769              		.set	.LANCHOR8,. + 0
 1772              	Task04Handle:
 1773 0000 00000000 		.space	4
 1774              		.section	.bss.Task05Handle,"aw",%nobits
 1775              		.align	2
 1776              		.set	.LANCHOR9,. + 0
 1779              	Task05Handle:
 1780 0000 00000000 		.space	4
 1781              		.section	.bss.Task06Handle,"aw",%nobits
 1782              		.align	2
 1783              		.set	.LANCHOR10,. + 0
 1786              	Task06Handle:
 1787 0000 00000000 		.space	4
 1788              		.section	.bss.TaskList_Buffer,"aw",%nobits
 1789              		.align	2
 1792              	TaskList_Buffer:
 1793 0000 00000000 		.space	50
 1793      00000000 
 1793      00000000 
 1793      00000000 
 1793      00000000 
 1794              		.section	.bss.hadc1,"aw",%nobits
 1795              		.align	2
 1796              		.set	.LANCHOR6,. + 0
 1799              	hadc1:
 1800 0000 00000000 		.space	72
 1800      00000000 
 1800      00000000 
 1800      00000000 
 1800      00000000 
 1801              		.section	.bss.hdma_adc1,"aw",%nobits
 1802              		.align	2
 1805              	hdma_adc1:
 1806 0000 00000000 		.space	96
 1806      00000000 
ARM GAS  /tmp/cciVV68U.s 			page 65


 1806      00000000 
 1806      00000000 
 1806      00000000 
 1807              		.section	.bss.huart2,"aw",%nobits
 1808              		.align	2
 1809              		.set	.LANCHOR5,. + 0
 1812              	huart2:
 1813 0000 00000000 		.space	72
 1813      00000000 
 1813      00000000 
 1813      00000000 
 1813      00000000 
 1814              		.section	.bss.inker,"aw",%nobits
 1815              		.set	.LANCHOR1,. + 0
 1818              	inker:
 1819 0000 00       		.space	1
 1820              		.section	.bss.inkerMutex,"aw",%nobits
 1821              		.set	.LANCHOR3,. + 0
 1824              	inkerMutex:
 1825 0000 00       		.space	1
 1826              		.text
 1827              	.Letext0:
 1828              		.file 3 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 1829              		.file 4 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 1830              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1831              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1832              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1833              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1834              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1835              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1836              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1837              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1838              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1839              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1840              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1841              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1842              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1843              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1844              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1845              		.file 20 "/usr/local/arm-none-eabi/include/stdio.h"
 1846              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1847              		.file 22 "<built-in>"
ARM GAS  /tmp/cciVV68U.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cciVV68U.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cciVV68U.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cciVV68U.s:175    .text.MX_GPIO_Init:00000000000000ac $d
     /tmp/cciVV68U.s:182    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cciVV68U.s:187    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cciVV68U.s:236    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cciVV68U.s:241    .rodata.StartTask03.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:254    .text.StartTask03:0000000000000000 $t
     /tmp/cciVV68U.s:260    .text.StartTask03:0000000000000000 StartTask03
     /tmp/cciVV68U.s:337    .text.StartTask03:0000000000000060 $d
     /tmp/cciVV68U.s:347    .rodata.StartTask04.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:357    .text.StartTask04:0000000000000000 $t
     /tmp/cciVV68U.s:363    .text.StartTask04:0000000000000000 StartTask04
     /tmp/cciVV68U.s:436    .text.StartTask04:0000000000000058 $d
     /tmp/cciVV68U.s:445    .rodata.StartTask06.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:455    .text.StartTask06:0000000000000000 $t
     /tmp/cciVV68U.s:461    .text.StartTask06:0000000000000000 StartTask06
     /tmp/cciVV68U.s:547    .text.StartTask06:000000000000006c $d
     /tmp/cciVV68U.s:557    .rodata.StartTask05.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:573    .text.StartTask05:0000000000000000 $t
     /tmp/cciVV68U.s:579    .text.StartTask05:0000000000000000 StartTask05
     /tmp/cciVV68U.s:701    .text.StartTask05:000000000000009c $d
     /tmp/cciVV68U.s:715    .text.__io_putchar:0000000000000000 $t
     /tmp/cciVV68U.s:721    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cciVV68U.s:757    .text.__io_putchar:000000000000001c $d
     /tmp/cciVV68U.s:762    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cciVV68U.s:768    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cciVV68U.s:804    .text.HAL_GPIO_EXTI_Callback:000000000000001c $d
     /tmp/cciVV68U.s:810    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cciVV68U.s:816    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cciVV68U.s:832    .rodata.TaskAdd.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:839    .text.TaskAdd:0000000000000000 $t
     /tmp/cciVV68U.s:845    .text.TaskAdd:0000000000000000 TaskAdd
     /tmp/cciVV68U.s:915    .text.TaskAdd:0000000000000038 $d
     /tmp/cciVV68U.s:921    .rodata.KillTask.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:925    .text.KillTask:0000000000000000 $t
     /tmp/cciVV68U.s:931    .text.KillTask:0000000000000000 KillTask
     /tmp/cciVV68U.s:970    .text.KillTask:0000000000000020 $d
     /tmp/cciVV68U.s:975    .rodata.getStatusName.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:994    .text.getStatusName:0000000000000000 $t
     /tmp/cciVV68U.s:1000   .text.getStatusName:0000000000000000 getStatusName
     /tmp/cciVV68U.s:1019   .text.getStatusName:000000000000000c $d
     /tmp/cciVV68U.s:1090   .text.getStatusName:0000000000000044 $d
     /tmp/cciVV68U.s:1100   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cciVV68U.s:1106   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cciVV68U.s:1140   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cciVV68U.s:1145   .text.Error_Handler:0000000000000000 $t
     /tmp/cciVV68U.s:1151   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cciVV68U.s:1183   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cciVV68U.s:1188   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cciVV68U.s:1295   .text.MX_ADC1_Init:0000000000000060 $d
     /tmp/cciVV68U.s:1303   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cciVV68U.s:1308   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cciVV68U.s:1363   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/cciVV68U.s:1369   .text.SystemClock_Config:0000000000000000 $t
ARM GAS  /tmp/cciVV68U.s 			page 67


     /tmp/cciVV68U.s:1375   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cciVV68U.s:1522   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cciVV68U.s:1528   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cciVV68U.s:1550   .text.main:0000000000000000 $t
     /tmp/cciVV68U.s:1556   .text.main:0000000000000000 main
     /tmp/cciVV68U.s:1693   .text.main:00000000000000c8 $d
     /tmp/cciVV68U.s:1824   .bss.inkerMutex:0000000000000000 inkerMutex
     /tmp/cciVV68U.s:1818   .bss.inker:0000000000000000 inker
     /tmp/cciVV68U.s:1792   .bss.TaskList_Buffer:0000000000000000 TaskList_Buffer
     /tmp/cciVV68U.s:1739   .bss.ClrScrFlag:0000000000000000 ClrScrFlag
     /tmp/cciVV68U.s:1746   .bss.Muto1:0000000000000000 Muto1
     /tmp/cciVV68U.s:1733   .bss.Bi_Semo1:0000000000000000 Bi_Semo1
     /tmp/cciVV68U.s:1786   .bss.Task06Handle:0000000000000000 Task06Handle
     /tmp/cciVV68U.s:1779   .bss.Task05Handle:0000000000000000 Task05Handle
     /tmp/cciVV68U.s:1772   .bss.Task04Handle:0000000000000000 Task04Handle
     /tmp/cciVV68U.s:1765   .bss.Task03Handle:0000000000000000 Task03Handle
     /tmp/cciVV68U.s:1758   .bss.Task02Handle:0000000000000000 Task02Handle
     /tmp/cciVV68U.s:1752   .bss.Task01Handle:0000000000000000 Task01Handle
     /tmp/cciVV68U.s:1812   .bss.huart2:0000000000000000 huart2
     /tmp/cciVV68U.s:1805   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/cciVV68U.s:1799   .bss.hadc1:0000000000000000 hadc1
     /tmp/cciVV68U.s:1729   .bss.Bi_Semo1:0000000000000000 $d
     /tmp/cciVV68U.s:1740   .bss.ClrScrFlag:0000000000000000 $d
     /tmp/cciVV68U.s:1742   .bss.Muto1:0000000000000000 $d
     /tmp/cciVV68U.s:1749   .bss.Task01Handle:0000000000000000 $d
     /tmp/cciVV68U.s:1755   .bss.Task02Handle:0000000000000000 $d
     /tmp/cciVV68U.s:1761   .bss.Task03Handle:0000000000000000 $d
     /tmp/cciVV68U.s:1768   .bss.Task04Handle:0000000000000000 $d
     /tmp/cciVV68U.s:1775   .bss.Task05Handle:0000000000000000 $d
     /tmp/cciVV68U.s:1782   .bss.Task06Handle:0000000000000000 $d
     /tmp/cciVV68U.s:1789   .bss.TaskList_Buffer:0000000000000000 $d
     /tmp/cciVV68U.s:1795   .bss.hadc1:0000000000000000 $d
     /tmp/cciVV68U.s:1802   .bss.hdma_adc1:0000000000000000 $d
     /tmp/cciVV68U.s:1808   .bss.huart2:0000000000000000 $d
     /tmp/cciVV68U.s:1819   .bss.inker:0000000000000000 $d
     /tmp/cciVV68U.s:1825   .bss.inkerMutex:0000000000000000 $d
     /tmp/cciVV68U.s:1024   .text.getStatusName:0000000000000011 $d
     /tmp/cciVV68U.s:1024   .text.getStatusName:0000000000000012 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
puts
vTaskDelay
printf
xQueueGenericSend
xQueueSemaphoreTake
HAL_UART_Transmit
HAL_GPIO_TogglePin
xTaskCreate
pcTaskGetName
vTaskDelete
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
ARM GAS  /tmp/cciVV68U.s 			page 68


HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
xQueueGenericCreate
xQueueCreateMutex
uxQueueMessagesWaiting
vTaskStartScheduler
